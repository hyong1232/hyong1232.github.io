<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>出云阁</title>
  
  <subtitle>hope</subtitle>
  <link href="https://hyong1232.github.io/atom.xml" rel="self"/>
  
  <link href="https://hyong1232.github.io/"/>
  <updated>2021-09-05T04:43:38.763Z</updated>
  <id>https://hyong1232.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>topfullstack</title>
    <link href="https://hyong1232.github.io/2021/08/29/topfullstack/"/>
    <id>https://hyong1232.github.io/2021/08/29/topfullstack/</id>
    <published>2021-08-29T10:23:15.000Z</published>
    <updated>2021-09-05T04:43:38.763Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nest常用命令"><a href="#nest常用命令" class="headerlink" title="nest常用命令"></a>nest常用命令</h3><ul><li><p>nest g app []</p></li><li><p>nest g lib [db]</p></li><li><p>nest start -w subAppName</p></li><li><p>yarn upgrade-interactive 升级依赖</p></li><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;nest常用命令&quot;&gt;&lt;a href=&quot;#nest常用命令&quot; class=&quot;headerlink&quot; title=&quot;nest常用命令&quot;&gt;&lt;/a&gt;nest常用命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;nest g app []&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nest g</summary>
      
    
    
    
    <category term="node" scheme="https://hyong1232.github.io/categories/node/"/>
    
    
    <category term="fullstack" scheme="https://hyong1232.github.io/tags/fullstack/"/>
    
  </entry>
  
  <entry>
    <title>vue3入门</title>
    <link href="https://hyong1232.github.io/2021/08/14/vue3-ru-men/"/>
    <id>https://hyong1232.github.io/2021/08/14/vue3-ru-men/</id>
    <published>2021-08-14T10:08:38.000Z</published>
    <updated>2021-08-22T16:01:11.061Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>相近文档☞<a href="https://24kcs.github.io/vue3_study/chapter3/01_%E8%AE%A4%E8%AF%86Vue3.html#_1-%E4%BA%86%E8%A7%A3%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF">vue3&amp;ts入门文档详解</a></p><h3 id="关于setup"><a href="#关于setup" class="headerlink" title="关于setup"></a>关于setup</h3><h4 id="执行的时机"><a href="#执行的时机" class="headerlink" title="执行的时机"></a>执行的时机</h4><blockquote><p>在beforeCreate之前执行，此时组件还没有被创建，即<strong>setup中的this是undefined，不可使用this</strong></p></blockquote><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><ul><li>会将setup和data函数的返回值以及method对象中的数据合并，并覆盖掉同名属性。</li><li>不可以使用async修饰setup函数（async关键字修饰的方法返回promise对象）</li><li>模板中可以直接使用setup返回对象中的属性值</li></ul><h3 id="ref和reactive对比"><a href="#ref和reactive对比" class="headerlink" title="ref和reactive对比"></a>ref和reactive对比</h3><ul><li>同：ref和reactive都可以转换普通对象为proxy代理对象，</li><li>异：ref的转换的代理对象取值时，要以proxyObj.value的形式取值，ref也可以代理对象，内部自动调用reactive来实现转换。</li></ul><h3 id="watch-amp-amp-watchEffect"><a href="#watch-amp-amp-watchEffect" class="headerlink" title="watch&amp;&amp;watchEffect"></a>watch&amp;&amp;watchEffect</h3><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><ul><li>getter&amp;setter</li></ul><h3 id="toRefs-amp-toRef"><a href="#toRefs-amp-toRef" class="headerlink" title="toRefs&amp;toRef"></a>toRefs&amp;toRef</h3><h3 id="toRaw-amp-amp-markRaw"><a href="#toRaw-amp-amp-markRaw" class="headerlink" title="toRaw&amp;&amp;markRaw"></a>toRaw&amp;&amp;markRaw</h3><ul><li>toRaw：临时返回proxy代理的普通对象，临时读取，写入不会同步更新到页面，操作不会被同步到</li><li>markRaw：标记一个对象，使其永远不会转换为代理。返回对象本身。</li></ul><h3 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h3><blockquote><p>自定义ref代理操作：customRef(callback: (track: () =&gt; void, trigger: () =&gt; void) =&gt; {get: () =&gt; any}, set: () =&gt; void) =&gt; any</p></blockquote><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h3 id="readonly-amp-shallowReadonly"><a href="#readonly-amp-shallowReadonly" class="headerlink" title="readonly&amp;shallowReadonly"></a>readonly&amp;shallowReadonly</h3><h3 id="provide-amp-amp-inject"><a href="#provide-amp-amp-inject" class="headerlink" title="provide&amp;&amp;inject"></a>provide&amp;&amp;inject</h3><h3 id="isProxy-amp-amp-isRef-amp-amp-isReactive"><a href="#isProxy-amp-amp-isRef-amp-amp-isReactive" class="headerlink" title="isProxy&amp;&amp;isRef&amp;&amp;isReactive"></a>isProxy&amp;&amp;isRef&amp;&amp;isReactive</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h3&gt;&lt;p&gt;相近文档☞&lt;a href=&quot;https://24kcs.github.io/vue3_study/chapter3/01_%E8%AE%A4</summary>
      
    
    
    
    <category term="vue" scheme="https://hyong1232.github.io/categories/vue/"/>
    
    
    <category term="vue3入门" scheme="https://hyong1232.github.io/tags/vue3%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>bom和dom</title>
    <link href="https://hyong1232.github.io/2021/08/09/bom-he-dom/"/>
    <id>https://hyong1232.github.io/2021/08/09/bom-he-dom/</id>
    <published>2021-08-09T14:45:51.000Z</published>
    <updated>2021-08-09T16:05:29.584Z</updated>
    
    <content type="html"><![CDATA[<h3 id="bom和dom对象"><a href="#bom和dom对象" class="headerlink" title="bom和dom对象"></a>bom和dom对象</h3><p><img src="/images/html/bomAndDomArea.png" alt="图中1234都是bom区，5是dom区"><br>区别：BOM是浏览器提供的对象（所以实现不同，ie），通常包含页面上可视范围的：滚动条、右键菜单、底部状态栏、顶部的收藏夹、地址栏等固定部分，而DOM是文档对象，均要实现W3C的标准。</p><p><img src="/images/html/bomAndDom.png" alt="bom和dom对象的联系"></p><p>联系：BOM通常包含DOM，例如可以使用window.document来访问DOM的根节点document对象。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;bom和dom对象&quot;&gt;&lt;a href=&quot;#bom和dom对象&quot; class=&quot;headerlink&quot; title=&quot;bom和dom对象&quot;&gt;&lt;/a&gt;bom和dom对象&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/html/bomAndDomArea.png&quot; </summary>
      
    
    
    
    <category term="html" scheme="https://hyong1232.github.io/categories/html/"/>
    
    
    <category term="bom,dom" scheme="https://hyong1232.github.io/tags/bom-dom/"/>
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="https://hyong1232.github.io/2021/07/04/docker/"/>
    <id>https://hyong1232.github.io/2021/07/04/docker/</id>
    <published>2021-07-04T04:49:50.000Z</published>
    <updated>2021-07-17T09:45:17.394Z</updated>
    
    <content type="html"><![CDATA[<h3 id="docker介绍"><a href="#docker介绍" class="headerlink" title="docker介绍"></a>docker介绍</h3><ul><li><p>docker是什么？</p><blockquote><p>阮一峰老师说：Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。简单来讲就是使用虚拟容器技术，来封装<strong>应用程序和运行该程序运行所需要的依赖</strong>，来避免所谓<strong>“在我的电脑上可以运行”</strong>的尴尬局面。</p></blockquote></li><li><p>docker优势？</p><blockquote><p>1、使用docker减少环境配置，特别是布置大型的应用、多个（集群）的分布式业务能减少很多麻烦。<br>2、docker比linux虚拟机少了很多的冗余内容（guest os、Hypervisor）<br>3、docker可以保证环境一致的迁移使用<br><img src="/images/docker/dockerVMCompare.png" alt="VM和docker对比图"></p></blockquote></li><li><p>docker用途<br>（1）提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。<br>（2）提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。<br>（3）组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构</p></li></ul><h3 id="docker安装和配置"><a href="#docker安装和配置" class="headerlink" title="docker安装和配置"></a>docker安装和配置</h3><ul><li>安装<blockquote><p>官网对不同的操作系统的安装做了详尽的说明**<a href="https://docs.docker.com/engine/install/">docker官方安装说明</a>**</p></blockquote></li></ul><p><strong>实例：1、aliyuncentos安装docker</strong></p><ul><li><p>删除已有服务器上的docker相关文件</p><pre class="line-numbers language-shell"><code class="language-shell">sudo yum remove docker \                docker-client \                docker-client-latest \                docker-common \                docker-latest \                docker-latest-logrotate \                docker-logrotate \                docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装yum-utils&amp;&amp;配置docker仓库镜像<br>1、安装yum-utils</p><pre class="line-numbers language-shell"><code class="language-shell">yum install -y yum-utils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、配置阿里云镜像</p><pre class="line-numbers language-shell"><code class="language-shell">sudo yum-config-manager \  --add-repo \  https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #使用阿里云centos的docker仓库地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>安装docker引擎</p><pre class="line-numbers language-shell"><code class="language-shell">sudo yum install docker-ce docker-ce-cli containerd.io# 查看docker的版本列表&&安装指定版本dockeryum list docker-ce --showduplicates | sort -ryum install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io# 启动dockersystemctl start docker# 运行docker镜像（container的命令，会自动去下载对应的image然后生成container实例并运行）docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置阿里云镜像加速</p><blockquote><p>阿里云自己有docker镜像加速服务**<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">阿里云容器镜像加速</a>**，其中centos的配置如下</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json <<-'EOF'{"registry-mirrors": ["https://mnqcynsm.mirror.aliyuncs.com"]}EOFsudo systemctl daemon-reloadsudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用docker version||docker info查看安装的docker信息</p></li></ul><p><strong>实列2：tencent云ubuntu安装docker</strong><br>1、卸载旧版的docker和docker-engine</p><pre class="line-numbers language-shell"><code class="language-shell">$ sudo apt-get remove docker \               docker-engine \               docker.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、由于采用apt安装，因此我们首先需要添加使用 HTTPS 传输的软件包以及 CA 证书</p><pre class="line-numbers language-shell"><code class="language-shell">$ sudo apt-get update$ sudo apt-get install \    apt-transport-https \    ca-certificates \    curl \    gnupg \    lsb-release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、确认所下软件的合法性，添加软件源的GPG密钥（建议使用国内）</p><pre class="line-numbers language-shell"><code class="language-shell"># 阿里云镜像GPG密钥curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4、向source.list文件中加入docker软件源(aliyun源)</p><pre class="line-numbers language-shell"><code class="language-shell">$ echo \  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5、更新apt软件包的缓存</p><pre class="line-numbers language-shell"><code class="language-shell">$ sudo apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>6、大招：脚本自动安装</strong></p><pre class="line-numbers language-shell"><code class="language-shell"># $ curl -fsSL test.docker.com -o get-docker.sh$ curl -fsSL get.docker.com -o get-docker.sh$ sudo sh get-docker.sh --mirror Aliyun# $ sudo sh get-docker.sh --mirror AzureChinaCloud<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以上命令会启动脚本，自动的将一切准备工作做好，并且把 Docker 的稳定(stable)版本安装在系统中</p><p>7、普通用户添加到docker用户组</p><pre class="line-numbers language-shell"><code class="language-shell"># 建立docker用户组$ sudo groupadd docker# 添加当前用户到用户组中$ sudo usermod -aG docker $USER<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>原因：默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组</p><p>8、配置镜像加速</p><pre class="line-numbers language-shell"><code class="language-shell">vi /etc/docker/daemon.json# 添加以下镜像加速源：{  "registry-mirrors": [    "https://hub-mirror.c.163.com",    "https://mirror.baidubce.com",    "https://mirror.css.tencentyun.com" #仅供腾讯云内部访问  ]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9、重启daemon进程和docker</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl daemon-reloadsystemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>10、检查是否配置成功</p><pre class="line-numbers language-shell"><code class="language-shell">docker info# 若出现如下信息，表示配置成功 Registry Mirrors:  https://hub-mirror.c.163.com/  https://mirror.baiduce.com/  https://mirror.css.tencentyun.com/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="docker镜像image文件"><a href="#docker镜像image文件" class="headerlink" title="docker镜像image文件"></a>docker镜像image文件</h3><blockquote><p>image文件是一个用来创建可运行的docker实例的模板，它可以被继承使用（一般使用已有修改简便）。</p></blockquote><ul><li>常见命令</li></ul><table><thead><tr><th>命令</th><th>简写|特殊写法</th><th>释义</th><th>可选参数</th></tr></thead><tbody><tr><td>docker image ls [参数]</td><td>docker images</td><td>列出本地所有镜像</td><td>-a：所有镜像信息，-q：仅展示镜像id，-aq，所有镜像id</td></tr><tr><td>docker search imageName</td><td>-</td><td>搜索docker镜像</td><td>-f=[tag:stars]=3000:过滤端口小于3000的镜像</td></tr><tr><td>docker pull imageName:version</td><td>docker pull imageName</td><td>下载镜像默认最新的latest</td><td>-</td></tr><tr><td>docker rmi imageName1 imageName2 …</td><td>docker rmi -f $(docker images -aq)</td><td>移除指定镜像|所有的镜像</td><td>-f：强制移除</td></tr><tr><td>docker commit -a=’作者’ -m=’msg’ containerID/containerName 自定义镜像名称:版本</td><td>-</td><td>提交一个自定义的镜像文件</td><td>-</td></tr><tr><td><strong>docker的实现原理：</strong>使用union file system分层的管理包底层公用kernel的bootfs文件，使用不同的rootfs（对应不同的操作系统）精简了系统的大部分功能，保留基本的命令行等。</td><td></td><td></td><td></td></tr></tbody></table><h3 id="docker容器container"><a href="#docker容器container" class="headerlink" title="docker容器container"></a>docker容器container</h3><blockquote><p>通过image生成的可以运行的实例文件，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。，而且关闭容器并不会删除容器文件，只是容器停止运行而已。</p></blockquote><ul><li>常见容器命令<table><thead><tr><th>命令</th><th>简写|特殊写法</th><th>释义</th><th>可选参数</th></tr></thead><tbody><tr><td>docker container run [参数] imageName</td><td>-</td><td>创建一个容器实例并运行它</td><td>-p：端口映射（外：容器内），-it：shell命令行投影，–name：容器实例重命名，-d：后台运行（实例没有前台服务自动停止）</td></tr><tr><td>docker container kill [containID]</td><td>-</td><td>停止容器实例</td><td>-</td></tr><tr><td>docker container stop [containID]</td><td>-</td><td>停止容器实例</td><td>-</td></tr><tr><td>docker container ls [参数]</td><td>-</td><td>停止容器实例</td><td>-a：列出所有（包括终止运行的容器）</td></tr><tr><td>docker container rm [containID]</td><td>docker container run –rm -p 8000:3000 -it koa-demo /bin/bash</td><td>删除容器实例|在容器终止运行后自动删除容器</td><td>-</td></tr><tr><td>docker rm [参数] containID</td><td>docker rm -f $(docker container ps</td><td>docker container ls -aq)</td><td>删除container实例</td></tr><tr><td>docker kill containID</td><td>-</td><td>强制停止container实例</td><td>-</td></tr><tr><td>docker stop containID</td><td>-</td><td>停止container实例</td><td>-</td></tr><tr><td>docker start containID</td><td>-</td><td>启动container实例</td><td>-</td></tr><tr><td>docker restart containID</td><td>-</td><td>重启container实例</td><td>-</td></tr><tr><td>docker container ps [参数]</td><td>-</td><td>重启container实例</td><td>-a：所有container实例（包含停止的），-q：实例id（containerID）</td></tr><tr><td>docker top containID</td><td>-</td><td>显示进程|父进程运行信息</td><td>-</td></tr><tr><td>docker inspect containID</td><td>-</td><td>展示正在运行的实例具体信息</td><td>-</td></tr><tr><td>docker logs [参数] containID</td><td>-</td><td>显示日志</td><td>-n –tail：条数</td></tr><tr><td>docker cp containID|containName:docName targetPath</td><td>-</td><td>复制docker文件至指定路径</td><td>-</td></tr><tr><td>docker attach containID|containName</td><td>-</td><td>进入正在运行的container实例</td><td>-</td></tr><tr><td>docker exec -it containID|containName /bin/bash</td><td>-</td><td>进入正在运行的cotainer实例，并打开新的窗口（不影响正在运行）</td><td>-</td></tr><tr><td>docker stats containID|containName</td><td>-</td><td>展示container实例的内存使用情况</td><td>-</td></tr></tbody></table></li></ul><p><strong>-it：使用可命令交互的方式运行</strong></p><ul><li><p>安装es+kibana</p><pre class="line-numbers language-shell"><code class="language-shell"># 拉取elasticsearch的image镜像docker pull elasticsearch# 运行elasticsearch（注意配置运行内存）docker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-Xms64m -Xms512m" elasticsearch:tag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装可视化操作面板</p><pre class="line-numbers language-shell"><code class="language-shell"># 安装portainerdocker run -d -p 8080:9000 --restart=always -v /var/run/docker/.sock:/var/run/docker.sock --privileged=true portainer/portainer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>根据端口号差进程，然后根据pid杀进程</p><pre class="line-numbers language-shell"><code class="language-shell">netstat -antupnestat <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="容器数据卷volume"><a href="#容器数据卷volume" class="headerlink" title="容器数据卷volume"></a>容器数据卷volume</h3><blockquote><p>容器的数据保存要求可以<strong>容器间共享、持久化保存</strong>,容器数据卷应运而生。</p></blockquote><h4 id="命令行设置数据卷"><a href="#命令行设置数据卷" class="headerlink" title="命令行设置数据卷"></a>命令行设置数据卷</h4><ul><li>指定路径的映射<br>docker run -p 3306:3306 –name=’mysql’-e ‘MYSQL_ROOT_PASSWORD=root’ -v /home/mysql/conf:/etc/mysql/conf.d -v /home/msyql/data:/var/lib/mysql -d  mysql</li><li>具名映射<br>docker run –name=nginx -P -v juming:/etc/nginx -d nginx</li><li>匿名映射<br>docker run –name=nginx -P -v /etc/nginx -d nginx</li></ul><p><strong>注意：</strong><br>1、不指定路径的映射都默认将映射文件放置到/var/lib/docker/volumes/XXX/_data下<br>2、mysql要指定初始密码：-e MYSQL_ROOT_PASSWORD=root，映射/etc/mysql时启动docker就退出？？？</p><table><thead><tr><th>命令</th><th>释义</th></tr></thead><tbody><tr><td>docker inspect containerID/containerName</td><td>查找mount的volume卷信息（名称）</td></tr><tr><td>docker volume ls</td><td>列出所有的volume信息</td></tr><tr><td>docker volume inspect volumeName</td><td>查看volume详细信息</td></tr></tbody></table><ul><li>通过commit提交运行的container实例生成自定义镜像（container也只是在image上加了一层自定义的files）<pre class="line-numbers language-shell"><code class="language-shell">docker <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="dockerfile文件挂载数据卷"><a href="#dockerfile文件挂载数据卷" class="headerlink" title="dockerfile文件挂载数据卷"></a>dockerfile文件挂载数据卷</h4><ul><li>创建dockerfile文件<pre class="line-numbers language-shell"><code class="language-shell">FROM dockerImageNameVOLUME ['volume1','volume2']CMD /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>生成镜像<pre class="line-numbers language-shell"><code class="language-shell"># 生成自定义docker image镜像docker build -f dockerfilePath -t imageName imageStorageLocation(.表当前目录)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="容器间共享数据卷"><a href="#容器间共享数据卷" class="headerlink" title="容器间共享数据卷"></a>容器间共享数据卷</h4><ul><li>使用–volumes-from containerId/containerName ：共享数据<pre class="line-numbers language-shell"><code class="language-shell"># 例如两个mysql数据库使用同一个数据卷docker run -p 3306:3306 --name my01 -e MYSQL_ROOT_PASSWORD=root --volumes-from my -d my:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="dockerfile创建建镜像"><a href="#dockerfile创建建镜像" class="headerlink" title="dockerfile创建建镜像"></a>dockerfile创建建镜像</h4><p><img src="/images/docker/dockerImage.jpg" alt="dockerimage原理"><br><img src="/images/docker/dockerFileDirection.png" alt="dockerfile常见命令"><br><img src="/images/docker/dockerfileDirection01.png" alt="dockerfile常见命令总结"><br><img src="/images/docker/dockerDirections.png" alt="docker常见命令"></p><ul><li><p>cmd命令和entrypoint区别：dockerfile中的cmd命令只有最后一条会被执行，且在启动镜像时，添加的命令会替换掉他。entrypoint则不会被覆盖。</p></li><li><p>实例：tomcat+jdk+vim实现功能</p></li></ul><h4 id="发布docker到仓库"><a href="#发布docker到仓库" class="headerlink" title="发布docker到仓库"></a>发布docker到仓库</h4><p>docker login<br>docker logout<br>docker tag</p><h3 id="docker网络netwokr"><a href="#docker网络netwokr" class="headerlink" title="docker网络netwokr"></a>docker网络netwokr</h3><ul><li><p>原理：evth-pair桥接bridge技术</p></li><li><p>默认网络docker0，名字ping不通–link+名称设置可ping通</p></li><li><p>自建网络 docker network create </p></li><li><p>创建redis集群</p><pre class="line-numbers language-shell"><code class="language-shell"># 创建redis集群for port in $(seq 1 6); \do \mkdir -p /mydata/redis/node-${port}/conftouch /mydata/redis/node-${port}/conf/redis.confcat  EOF /mydata/redis/node-${port}/conf/redis.confport 6379 bind 0.0.0.0cluster-enabled yes cluster-config-file nodes.confcluster-node-timeout 5000cluster-announce-ip 172.38.0.1${port}cluster-announce-port 6379cluster-announce-bus-port 16379appendonly yesEOFdone# 启动容器实例docker run -p 6371:6379 -p 16371:16379 --name redis-1 \  -v /mydata/redis/node-1/data:/data \  -v /mydata/redis/node-1/conf/redis.conf:/etc/redis/redis.conf \  -d --net redis --ip 172.38.0.11 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf# 创建redisjiqunredis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>springboot微服务</p></li></ul><h3 id="bug全集"><a href="#bug全集" class="headerlink" title="bug全集"></a>bug全集</h3><ul><li><p>volume数据卷挂载错误</p><pre class="line-numbers language-shell"><code class="language-shell">invalid mount {Destination:[volume1,volume2] Type:bind Source:/var/lib/docker/volumes/85a4574c659e9d2709852f32cd7070dba21351354e6ba98a28e49781c837ea12/_data Options:[rbind]}: mount destination [volume1,volume2] not absolute: unknown.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决方案：卷前加/指定绝对路径：/volume1</p></li><li><p>nginx启动异常，-d一启动就自动退出</p><pre class="line-numbers language-shell"><code class="language-shell">[root@iZ0jl5de38snuehexgcjliZ ng]# docker run --name ng -P -v $PWD/home/ng/conf/nginx.conf:/etc/nginx/nginx.conf:rw -d ng:1.05e8a413844c7920d48f861ee2040b04505010da0e6dfbb6bc0500b6998d022b2docker: Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: process_linux.go:545: container init caused: rootfs_linux.go:76: mounting "/home/ng/home/ng/conf/nginx.conf" to rootfs at "/etc/nginx/nginx.conf" caused: mount through procfd: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type.[root@iZ0jl5de38snuehexgcjliZ ng]# docker run --name my-custom-nginx-container -v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx40cceb90a914d99060409ac427242dd4207895b3d8a2d3fc598e06a0d3c007ba<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决方案：待解决</p></li><li><p>挂载springcloudjarweb文件报错,查看docker启动日志结果如下：</p><pre class="line-numbers language-shell"><code class="language-shell"># [root@iZ0jl5de38snuehexgcjliZ idea] docker logs -n --tail=1 web# --server.port=8080: 1: --server.port=8080: [java,-jar,/app.jar]: not found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决方案：<strong>超级大坑：</strong>在shell脚本里ENTRYPOINT的中括号要使用”双引号，否则报此错误错</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;docker介绍&quot;&gt;&lt;a href=&quot;#docker介绍&quot; class=&quot;headerlink&quot; title=&quot;docker介绍&quot;&gt;&lt;/a&gt;docker介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;docker是什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;阮一峰老师说</summary>
      
    
    
    
    <category term="docker" scheme="https://hyong1232.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://hyong1232.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>angular入门</title>
    <link href="https://hyong1232.github.io/2021/06/12/angular-ru-men/"/>
    <id>https://hyong1232.github.io/2021/06/12/angular-ru-men/</id>
    <published>2021-06-12T07:35:52.000Z</published>
    <updated>2021-06-19T07:35:19.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用cli命令"><a href="#常用cli命令" class="headerlink" title="常用cli命令"></a>常用cli命令</h2><table><thead><tr><th>命令</th><th>释义</th></tr></thead><tbody><tr><td>ng g module| m modulename path [–routing]</td><td>新建module（普通module|路由。。。）</td></tr><tr><td>ng g component | c componentname path</td><td>新建component</td></tr><tr><td>ng g</td><td></td></tr></tbody></table><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><pre class="line-numbers language-md"><code class="language-md">├─e2e --端到端测试├─node_modules --第三方依赖包├─src --业务源代码│  ├─app  --项目文件│  ├─assets --静态资源│  ├─environments --环境资源│  ├─main.ts -- 入口文件│  ├─polyfill.ts -- 额外资源│  ├─styles.less -- 全局样式 │  └─test.ts -- 测试入口│ ├─.editorconfig --编辑器代码风格设置├─.angular-cli.json --angular脚手架配置文件├─.gitignore --git仓库提交忽略配置├─package.json --项目包说明文件├─karma.config.js --karma的测试配置文件├─protractor.config.js --端到端测试配置文件（与e2e文件夹相关）├─tsconfig.json --ts配置文件└─tslint.json --ts代码格式校验配置（类似eslint）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="angular指令"><a href="#angular指令" class="headerlink" title="angular指令"></a>angular指令</h2><ul><li>按键修饰符keyup.enter</li><li>双向绑定不默认提供==》》module种引入form</li><li>实例：利用toggleAll的get、set切换列表状态（标签内””使用$event获取input值：get函数的值会因为依赖属性值的改变而变化）</li><li>时间执行顺序：监听key事件 &gt;&gt; blur事件</li><li>window.onhashchange = function(){}</li><li>ngOnCheck：当组件数据改变时触发</li></ul><h3 id="表单校验"><a href="#表单校验" class="headerlink" title="表单校验"></a>表单校验</h3><ul><li>input绑定属性值:#name=”ngModule”</li><li>获取获取属性值</li><li>添加error提示校验div，if或hidde属性动态判定显示</li><li>阻止默认表单提交：form标签上：#form=”ngForm”==&gt;submit-button：[disabled]=”!form.form.valid”</li></ul><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><ul><li>新建服务：ng g service service/serviceName</li><li>在要使用的组件中注入serviceClass，并使用</li><li></li></ul><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ul><li>安装路由模块：ng generate module app-routing –flat –module=app</li><li>进入app-routing.module.ts配置路由模块的路由表</li><li>首先从@angular/router包中引入RouterModule模块（forRoot方法：用于启动路由）和Routes对象（用于执行route类型）</li><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;常用cli命令&quot;&gt;&lt;a href=&quot;#常用cli命令&quot; class=&quot;headerlink&quot; title=&quot;常用cli命令&quot;&gt;&lt;/a&gt;常用cli命令&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;释义&lt;/th&gt;
&lt;/tr&gt;
&lt;/</summary>
      
    
    
    
    <category term="angular" scheme="https://hyong1232.github.io/categories/angular/"/>
    
    
    <category term="入门" scheme="https://hyong1232.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>ts入门</title>
    <link href="https://hyong1232.github.io/2021/06/03/ts-ru-men/"/>
    <id>https://hyong1232.github.io/2021/06/03/ts-ru-men/</id>
    <published>2021-06-03T05:35:23.000Z</published>
    <updated>2021-08-08T15:55:49.744Z</updated>
    
    <content type="html"><![CDATA[<h3 id="webpack配置ts"><a href="#webpack配置ts" class="headerlink" title="webpack配置ts"></a>webpack配置ts</h3><ul><li>webpack.config.js文件配置如下：<pre class="line-numbers language-json"><code class="language-json">const path = require('path'<span class="token punctuation">)</span><span class="token punctuation">;</span>const htmlWebpackPlugin = require('html-webpack-plugin'<span class="token punctuation">)</span><span class="token punctuation">;</span>const <span class="token punctuation">{</span>CleanWebpackPlugin<span class="token punctuation">}</span> = require('clean-webpack-plugin'<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>module.exports = {<br>    mode: ‘development’,<br>    entry: {<br>        app: ‘./src/index.ts’<br>    },<br>    plugins: [<br>        new htmlWebpackPlugin({<br>            template: path.join(__dirname, ‘./www/index.html’)<br>        }),<br>        new CleanWebpackPlugin(),<br>    ],<br>    module: {<br>        rules: [<br>            {<br>                test: /.ts$/, use: [<br>                    {<br>                        loader: ‘babel-loader’,<br>                        options: {<br>                            presets: [<br>                                [“@babel/preset-env”, {targets:{chrome:”88”, ie: ‘11’}, corejs: ‘3’, useBuiltIns: ‘usage’}],<br>                            ]<br>                        },<br>                    },<br>                    ‘ts-loader’,<br>                ],<br>                exclude: /node_modules/<br>            },<br>            {<br>                test: /.less$/, use: [<br>                    ‘style-loader’,<br>                    ‘css-loader’,<br>                    {<br>                        loader: ‘postcss-loader’,<br>                        options: {<br>                            postcssOptions: {<br>                                plugins: [<br>                                    [<br>                                        ‘postcss-preset-env’,<br>                                        {<br>                                            browser: ‘last 2 version’,<br>                                        }<br>                                    ]<br>                                ]<br>                            }<br>                        }<br>                    },<br>                    ‘less-loader’,<br>                ],<br>                exclude: /node_modules/<br>            }<br>        ]<br>    },<br>    resolve: {<br>        alias:{<br>            ‘@’: path.join(__dirname, ‘./src’),<br>        },<br>        extensions: [‘.ts’,’.js’],<br>    },<br>    output: {<br>        filename: ‘bundle.js’,<br>        path: path.join(__dirname, ‘dist’),<br>        environment: {<br>            arrowFunction: false,<br>        }<br>    },<br>    // devServer: {</p><pre><code>// &#125;</code></pre><p>}</p><pre><code>+ ts.config.json文件配置：```json&#123;    &quot;include&quot;: [        &quot;./src/**/*&quot;,    ],    &quot;exclude&quot;: [        &quot;./node_modules/&quot;,        &quot;./dist&quot;,    ],    &quot;compilerOptions&quot;: &#123;        &quot;target&quot;: &quot;esnext&quot;,        &quot;module&quot;: &quot;esnext&quot;    &#125;&#125;</code></pre><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><h4 id="类型申明"><a href="#类型申明" class="headerlink" title="类型申明"></a>类型申明</h4><blockquote><p>共有12种类型的申明</p></blockquote><table><thead><tr><th>类型</th><th>例子</th><th>描述</th></tr></thead><tbody><tr><td>number</td><td>1,1.000</td><td>数字</td></tr><tr><td>string</td><td>‘any’,”any”,<code>any</code></td><td>字符串</td></tr><tr><td>boolean</td><td>true、false</td><td>布尔值</td></tr><tr><td>字面量</td><td>其本身</td><td>变量的值只能是指定的值</td></tr><tr><td>any</td><td>任意类型</td><td>任意类型</td></tr><tr><td>unknow</td><td>任意类型</td><td>类型安全的任意类型</td></tr><tr><td>void</td><td>undefined（空值）</td><td>返回值为空undefined，多用于方法</td></tr><tr><td>never</td><td>没有值</td><td>永远不会返回任何值，多用于方法</td></tr><tr><td>object</td><td>{name:’jack’}</td><td>对象</td></tr><tr><td>array</td><td>[1,2,3]</td><td>数组</td></tr><tr><td>tuple</td><td>[string,number]</td><td>ts新增，固定长度的数组,可以复合其他类型</td></tr><tr><td>enum</td><td>enum{A,B}</td><td>枚举，ts新增类型</td></tr></tbody></table><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><h4 id="编译方式"><a href="#编译方式" class="headerlink" title="编译方式"></a>编译方式</h4><ul><li>命令行直接tsc filename -w（监视文件变化动态编译）</li><li>tscofig.json文件配置项目编译<table><thead><tr><th>配置项</th><th>释义</th><th>例子</th></tr></thead><tbody><tr><td>include</td><td>配置要编译的文件路径</td><td>“include”:[“./src/*<em>/</em>“,]</td></tr><tr><td>exclude</td><td>配置不要ts编译器编译的文件</td><td>“exclude”: [“./node_modules/“,”./dist/“,]</td></tr><tr><td>files</td><td>配置具体要编译的文件名称列表</td><td>“files”: [“other.ts”]</td></tr><tr><td>extends</td><td>配置要继承的配置文件，会将继承文件的配置添加到配置文件</td><td>“extends”: “./tsconfig.base.json”,</td></tr><tr><td>compilerOptions</td><td>配置编译器选项</td><td>{配置项较多，不一一展开}</td></tr></tbody></table></li></ul><table><thead><tr><th>compilerOptions配置项</th><th>释义</th><th>例子</th></tr></thead><tbody><tr><td>target</td><td>配置ts编译器转换成js的版本</td><td>target:”es6”</td></tr><tr><td>module</td><td>配置ts转换的模块规则（commonjs、amd。。。）</td><td>module:”es6”</td></tr><tr><td>removeComments</td><td>是否移除注释</td><td>removeComments:true</td></tr><tr><td>allowJs</td><td>是否编译js文件</td><td>allowJs:true</td></tr><tr><td>checkJs</td><td>是否检查js文件语法</td><td>checkJs:true</td></tr><tr><td>outDir</td><td>配置编译文件的导出文件路径位置</td><td>outDir:”dist”</td></tr><tr><td>outFile</td><td>配置编译文件的导出文件名称（将所有的编译文件导入到一个文件中）</td><td>outFile:”./dist/outfile.js”</td></tr><tr><td>noEmit</td><td>是否生成编译好的文件</td><td>noEmit:true</td></tr><tr><td>noEmitOnError</td><td>是否在编译出错时生成编译文件</td><td>noEmitOnError:true</td></tr><tr><td>strict</td><td>编译文件是否使用严格模式总开关</td><td>strict:true</td></tr><tr><td>alwaysStrict</td><td>是否使用严格模式（有export/import关键字的默认使用严格模式）</td><td>alwaysStrict:true</td></tr><tr><td>noImplicitAny</td><td>是否允许使用any</td><td>noImplicitAny:true</td></tr><tr><td>noImplicitThis</td><td>是否允许无类型申明的this</td><td>noImplicitThis:true</td></tr><tr><td>strictNullChecks</td><td>是否严格检查变量为null的情况</td><td>strictNullChecks:true</td></tr></tbody></table><p><strong>注意：</strong>演示用ts的检查，设置strict为true即可，规范代码。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><p>接口类型指定type</p></li><li><p>封装：private+_property+get/set</p></li></ul><pre class="line-numbers language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">//对象的get、set方法</span><span class="token keyword">class</span> <span class="token class-name">person</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> _age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">set</span> <span class="token function">age</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'cannot set age to this number!!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>泛型</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;webpack配置ts&quot;&gt;&lt;a href=&quot;#webpack配置ts&quot; class=&quot;headerlink&quot; title=&quot;webpack配置ts&quot;&gt;&lt;/a&gt;webpack配置ts&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;webpack.config.js文件配置如下：&lt;pre</summary>
      
    
    
    
    <category term="ts" scheme="https://hyong1232.github.io/categories/ts/"/>
    
    
    <category term="typescript基础" scheme="https://hyong1232.github.io/tags/typescript%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架项目使用总结</title>
    <link href="https://hyong1232.github.io/2021/05/10/ssm-kuang-jia-xiang-mu-shi-yong-zong-jie/"/>
    <id>https://hyong1232.github.io/2021/05/10/ssm-kuang-jia-xiang-mu-shi-yong-zong-jie/</id>
    <published>2021-05-10T15:58:33.000Z</published>
    <updated>2021-05-11T01:15:44.515Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mapper写法"><a href="#Mapper写法" class="headerlink" title="Mapper写法"></a>Mapper写法</h2><ul><li>插入多条数据</li><li>查询多条数据</li><li>聚合查询select查询另一个sql</li><li>新增数据获取id的两种方式selectKey和useGeneratedKey</li></ul><h2 id="加密方式两种"><a href="#加密方式两种" class="headerlink" title="加密方式两种"></a>加密方式两种</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Mapper写法&quot;&gt;&lt;a href=&quot;#Mapper写法&quot; class=&quot;headerlink&quot; title=&quot;Mapper写法&quot;&gt;&lt;/a&gt;Mapper写法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;插入多条数据&lt;/li&gt;
&lt;li&gt;查询多条数据&lt;/li&gt;
&lt;li&gt;聚合查询sele</summary>
      
    
    
    
    <category term="java" scheme="https://hyong1232.github.io/categories/java/"/>
    
    
    <category term="SSM" scheme="https://hyong1232.github.io/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>面试</title>
    <link href="https://hyong1232.github.io/2021/04/13/mian-shi/"/>
    <id>https://hyong1232.github.io/2021/04/13/mian-shi/</id>
    <published>2021-04-13T06:02:17.000Z</published>
    <updated>2021-06-23T15:16:34.837Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h3><blockquote><p>js闭包、原型链、vue原理、词法分析AO、http缓存、性能优化、bfc、es6语法</p></blockquote><h3 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h3><blockquote><p>1、创建AO（active object）对象<br>2、将函数的参数添加至AO并赋值<br>3、将函数中的变量提升添加至AO，并赋初值，默认初值undefined==》》忽略重复声明<br>4、将函数声明添加值AO<br>5、执行函数中的立即执行函数</p></blockquote><h3 id="闭包："><a href="#闭包：" class="headerlink" title="闭包："></a>闭包：</h3><blockquote><p>局部变量私有化，并可以通过函数来访问私有化的变量</p></blockquote><p>特点：<br>1、私有化的变量不会被gc处理掉，因为js的链式作用域chain scope，返回的函数依赖这个属性。<br>2、私有化的变量只能被返回的闭包函数访问。</p><h3 id="原型链："><a href="#原型链：" class="headerlink" title="原型链："></a>原型链：</h3><p>new 关键字新建对象自动调用protorype属性对象，这里存储着公用的属性或方法。</p><h3 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h3><p>1、没有class，用new+this创建实例，自动调用prototype对象（获取公共方法、属性）<br>2、Javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承<br>3、判定：</p><ul><li>实例 instanceof 类型||实例.prototype.isProtorypeOf(实例)</li><li>实例属性==》》实例.hasOwnProperty(属性名称)||属性 in 实例==》》boolean，+for还可以遍历实例属性==》》for 属性 in 实例</li></ul><p>4、继承的5种方法：</p><ul><li>1&gt;call/apply调用父类构造函数==&gt;&gt;父类.apply(子类,arguments)</li><li>2&gt;替换子类的prototype–》》添加父类的公共属性/方法到子类–》》会改变子类的构造函数constructor–》》手动修改–》》实例新建会调用prototype的constructor（只想构造函数），总结：<br>  　p.prototype = {};　p.prototype.constructor = p;</li><li>3&gt;子类的prototype替换成父类的===》》子类和父类的prototype都指向父类，修改子类的constructor会修改父类的。</li><li>4&gt;在子类prototype替换成，prototype是父类的空函数的新建对象。<pre class="line-numbers language-js"><code class="language-js">　　<span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span>Child<span class="token punctuation">,</span> Parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>　　<span class="token keyword">var</span> F <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>　　F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>　　Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　Child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child<span class="token punctuation">;</span>　　Child<span class="token punctuation">.</span>uber <span class="token operator">=</span> Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>5&gt;拷贝父类的prototype属性值到父类。<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">extend2</span><span class="token punctuation">(</span>Child<span class="token punctuation">,</span> Parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>　　<span class="token keyword">var</span> p <span class="token operator">=</span> Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>　　<span class="token keyword">var</span> c <span class="token operator">=</span> Child<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>　　<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>　　　　<span class="token punctuation">}</span>　　c<span class="token punctuation">.</span>uber <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>6&gt;非构造函数的继承：<br>  1.空function返回有父类prototype的对象，然后自定义添加这个对象即可。<br>  2.遍历添加父类的所有属性：<pre class="line-numbers language-js"><code class="language-js">浅拷贝：<span class="token keyword">function</span> <span class="token function">extendCopy</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>　　<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>　　<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>　　<span class="token punctuation">}</span>　　c<span class="token punctuation">.</span>uber <span class="token operator">=</span> p<span class="token punctuation">;</span>　　<span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token function">深拷贝</span><span class="token punctuation">(</span>递归浅拷贝<span class="token punctuation">)</span>：<span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> c <span class="token operator">=</span> c <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token function">deepCopy</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> c<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h3><blockquote><p>简单来说可以分成创建、运行、销毁三个阶段</p></blockquote></li></ul><h4 id="创建："><a href="#创建：" class="headerlink" title="创建："></a>创建：</h4><ul><li>new 一个vue对象会初始化vue对象默认的事件、属性和生命周期函数—-beforeCreate</li><li>初始化data和methods中的函数，完成后进入—-create（data和methods初始化完成）</li><li>查找el属性或$mount(el)方法，然后将template通过render渲染函数渲染成虚拟dom节点，保存在内存中—-beforeMount</li><li>将渲染好的虚拟dom节点替换到浏览器的dom中—–mount<h4 id="运行："><a href="#运行：" class="headerlink" title="运行："></a>运行：</h4></li><li>data中的属性改变时—-beforeUpdate</li><li>重新渲染内存中的虚拟dom，完成后替换页面dom—-update（此时页面数据已经同步）<h4 id="销毁："><a href="#销毁：" class="headerlink" title="销毁："></a>销毁：</h4></li><li>调用了$destroy函数，此时methods和data及其他属性、函数均可用—-beforeDestroy</li><li>销毁vue对象所有数据、方法、属性、过滤器等等—destroy（不可用vue特性）<br><img src="/images/vueCreateProcess.png" alt="vue生命周期图"></li></ul><h3 id="vue兄弟组件传值"><a href="#vue兄弟组件传值" class="headerlink" title="vue兄弟组件传值"></a>vue兄弟组件传值</h3><blockquote><p>利用vue的$on接收信息和$emit触发信息==》》》新建一个vue对象，将其添加到vue的原型对象上即可。</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//main.js 全局注册</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//brother one</span><span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'sendMessage'</span><span class="token punctuation">,</span>message<span class="token punctuation">:</span>Object<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//brother two</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'sendMessage'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span>Object<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">do</span> something <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="http缓存"><a href="#http缓存" class="headerlink" title="http缓存"></a>http缓存</h3><h4 id="cache-control"><a href="#cache-control" class="headerlink" title="cache-control"></a>cache-control</h4><blockquote><p>用于控制缓存的支持情况，请求响应头都支持这个属性设置。</p></blockquote><table><thead><tr><th>cache常用设置字段</th><th>释义</th></tr></thead><tbody><tr><td>no-store</td><td>缓存不存储任何请求/响应相关的内容，客户端每次下载完整响应内容</td></tr><tr><td>no-cache</td><td>客户端请求时，缓存会向服务器确认是否缓存可用，可用则直接返回缓存，不可用就重新请求</td></tr><tr><td>private/public</td><td>设置请求的响应是否可以被中间代理、CDN或其他中介缓存</td></tr><tr><td>max-age=<seconds></td><td>设置缓存的有效时间</td></tr><tr><td>must-revalidate</td><td>使用缓存必须要校验是否可用</td></tr></tbody></table><p><strong>pragma</strong>属性，功能与cache-control类似，主要用来向后兼容HTTP1.0协议</p><h4 id="新鲜度"><a href="#新鲜度" class="headerlink" title="新鲜度"></a>新鲜度</h4><blockquote><p>总结来讲就是缓存的内容空间是有限的，在不断有新的内容需要缓存的前提下，缓存设立新鲜度，替换老旧的缓存内容。<br>注意：<strong>不会自动清除旧缓存</strong>，而是客户端请求相同内容时，会发送If-None-Match头确认缓存是否继续可用,可用返回304，否则重新请求并缓存请求结果。</p></blockquote><p><img src="/images/HTTPStaleness.png" alt="新鲜度判定图"></p><ul><li>对于含有特定头信息的请求，会去计算缓存寿命。比如Cache-control: max-age=N的头，相应的缓存的寿命就是N。通常情况下，对于不含这个属性的请求则会去查看是否包含Expires属性，通过比较Expires的值和头里面Date属性的值来判断是否缓存还有效。如果max-age和expires属性都没有，找找头里的Last-Modified信息。如果有，缓存的寿命就等于头里面Date的值减去Last-Modified的值除以10（注：根据rfc2626其实也就是乘以10%）</li></ul><blockquote><p>expirationTime = responseTime + freshnessLifetime - currentAge</p></blockquote><h4 id="改进资源"><a href="#改进资源" class="headerlink" title="改进资源"></a>改进资源</h4><blockquote><p>设定不常变动（js/css）的缓存资源加版本号缓存，常变（html）动资源改变即可。</p></blockquote><p><img src="/images/HTTPRevved.png" alt="改进资源图"></p><h4 id="vary"><a href="#vary" class="headerlink" title="vary"></a>vary</h4><blockquote><p>给缓存的内容加一个校验规则,当请求和缓存内容相同且vary一直且在有效期内才使用缓存，否则向服务器发起请求并缓存请求内容。</p></blockquote><p><img src="/images/HTTPVary.png" alt="vary缓存校验"></p><ul><li>vary:user-agent用于区分不同的用户客户端的内容，避免不同设备的适配问题。</li></ul><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ul><li>transform和opacity实现动画效果</li><li>使用弹性布局flex</li><li>不覆盖js原生方法</li><li>多用位操作</li><li>使用web worker</li><li>requestAnimationFrame优化视觉效果</li><li>使用switch代替多个if/else条件判定</li><li>事件委托代替逐个监听（利用js冒泡监听公共父级元素）</li><li>减少dom重绘和重排（避免删除，改变dom元素，使用css方法修改样式）<br>重排和重绘这两个操作都是非常昂贵的，因为 JavaScript 引擎线程与 GUI 渲染线程是互斥，它们同时只能一个在工作。</li><li>webpack按需加载库文件</li><li>css代替动画/图片效果</li><li>iconfont字体代替图片图标</li><li>减少不必要的http请求，利用http协议缓存cache-control控制资源重复加载</li><li>css放在html头部，js放在底部（先GUI渲染，然后执行js脚本）</li><li>静态资源CDN加速</li></ul><h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><blockquote><p>BFC官方定义实在抽象，我的理解是就是一个css属性，添加了这个属性那么这个模块内的内容就不受页面的普通流布局影响。</p></blockquote><h4 id="常见bfc触发方式："><a href="#常见bfc触发方式：" class="headerlink" title="常见bfc触发方式："></a>常见bfc触发方式：</h4><table><thead><tr><th>元素</th><th>设置的值</th></tr></thead><tbody><tr><td>html根元素</td><td>-</td></tr><tr><td>浮动元素</td><td>float的值不为none</td></tr><tr><td>绝对定位的元素</td><td>position为absolute或fixed</td></tr><tr><td>行内元素</td><td>display为inline-box</td></tr><tr><td>表格元素</td><td>table、table-cell、table-row、table-caption、table-footer-group、table-row-group、table-header-group、inline-table</td></tr><tr><td>overflow</td><td>不为visible</td></tr><tr><td>弹性和网格布局</td><td>flex、inline-flex、grid、inline-grid</td></tr></tbody></table><h4 id="bfc解决常见的css布局问题："><a href="#bfc解决常见的css布局问题：" class="headerlink" title="bfc解决常见的css布局问题："></a>bfc解决常见的css布局问题：</h4><ul><li><p>上下相邻margin合并</p></li><li><p>float浮动导致父元素高度坍塌<br>解决方案：<br>  1、使用伪元素::after–&gt;</p><pre class="line-numbers language-css"><code class="language-css">    <span class="token selector">&amp;<span class="token pseudo-element">:after</span></span><span class="token punctuation">{</span>        <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span>        <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  2、浮动父元素，使之脱离文档流<br>  3、添加空标签清楚浮动or固定父元素的高度</p></li><li><p>浮动元素遮挡兄弟元素内容</p></li><li><p>布局内容溢出，导致环绕布局</p></li></ul><h3 id="es6问题"><a href="#es6问题" class="headerlink" title="es6问题"></a>es6问题</h3><h4 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h4><blockquote><p>宏队列：promise和MutationObserver，宏队列：dom回调，定时/延时器和ajax回调</p></blockquote><p><img src="/images/jsCallbackExecte.png" alt="js函数回调执行顺序图"></p><h4 id="for-of-与for-in的区别"><a href="#for-of-与for-in的区别" class="headerlink" title="for of 与for in的区别"></a>for of 与for in的区别</h4><blockquote><p>for of是为了解决for循环的繁琐、forEach不能continue/break、for in遍历所有可枚举属性（原型链上、数组属性-[].a = 1）的缺点设计出来的，可以遍历所有可迭代对象（有iterator或[symbol.iterator]属性）,例如map、set、arguments、string、DomNode。</p></blockquote><h4 id="重排和重绘"><a href="#重排和重绘" class="headerlink" title="重排和重绘"></a>重排和重绘</h4><blockquote><p>重排：dom元素的几何属性被改变的时候（w、h、margin、border）<br>重绘：dom元素的显示属性发生改变的时候（color、background、box-shadow）</p></blockquote><ul><li><p>避免重绘：<br>1、减少使用直接修改dom几何属性，改用css实现————display:none操作完成再block回来visibility:hidden<br>  display脱离文档流，visibility不显示不脱离文档流，opacity显示颜色为透明</p><table><thead><tr><th>区别\属性</th><th>display:none</th><th>visibility:hidden</th><th>opacity:0</th></tr></thead><tbody><tr><td>是否占据页面空间</td><td>×</td><td>√</td><td>√</td></tr><tr><td>是否影响子元素</td><td>√</td><td>×(设置visibility:visible)</td><td>√</td></tr><tr><td>是否产生回流</td><td>√</td><td>×</td><td>×</td></tr><tr><td>是否影响自身绑定事件触发</td><td>√</td><td>√</td><td>×</td></tr></tbody></table></li></ul><p>2、批量操作重排操作（浏览器自动放置到渲染队列），不要穿插执行js任务（先执行渲染队列内容）<br>3、让需要频繁修改的dom脱离文档流，触发bfc<br><strong>重排一定重绘，重绘不一定重排</strong></p><h3 id="css问题"><a href="#css问题" class="headerlink" title="css问题"></a>css问题</h3><h4 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h4><blockquote><p>box、bgroup、article===》》》padding+margin+content === 盒子大小</p></blockquote><ul><li>ie和模型:box-sizing:content-box;</li><li>标准和模型：box-sizing:border-box;</li></ul><h4 id="页面不流畅"><a href="#页面不流畅" class="headerlink" title="页面不流畅"></a>页面不流畅</h4><ul><li>网络延迟===》》缓存</li><li>动画卡顿===》》requestAnimationFrame：将代码放到下一次重新渲染时执行。<br>  （FPs）帧：1s内重新渲染的次数，24帧人眼就感觉特别明显，30~60合格，越高越好，主流显示器60帧，这就要求每次页面渲染完成的时间不能超过100/60 = 16.67毫秒，意味着JavaScript线程每个任务的耗时，<strong>必须少于16毫秒</strong>。<br>  实例1：大量重排渲染<pre class="line-numbers language-js"><code class="language-js">elements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">let</span> ow <span class="token operator">=</span> e<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width    window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span>  ow    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  实例2：scroll时间监听<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//第三个参数true为捕获阶段处理，false冒泡阶段处理，默认冒泡</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>handler<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>  实例3：动画<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> rAF <span class="token operator">=</span> window<span class="token punctuation">.</span>requestAnimationFrame<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token string">`rotate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token operator">++</span>reg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">deg)`</span></span>    <span class="token function">rAF</span><span class="token punctuation">(</span>upate<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">rAF</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  参考资料：<a href="https://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html">网页性能管理详解-阮一峰的网络博客</a></li></ul><h3 id="节流和防抖"><a href="#节流和防抖" class="headerlink" title="节流和防抖"></a>节流和防抖</h3><blockquote><p>相同点：节流和防抖都是在通过降低回调执行的频次，节省计算资源。<br>不同点：节流是在一段时间内只执行一次，防抖是只关心最后一次的执行情况。</p></blockquote><ul><li><p>节流实现</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//节流实现1</span><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>deplay<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">let</span> preTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">-</span> pretime <span class="token operator">></span> deplay<span class="token punctuation">)</span><span class="token punctuation">{</span>          preTime <span class="token operator">=</span> now          <span class="token comment" spellcheck="true">//do something</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//节流实现2</span><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span>          timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//do something...</span>              timer <span class="token operator">=</span> <span class="token keyword">null</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定时执行</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>threshold<span class="token punctuation">)</span><span class="token punctuation">,</span>threshold<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>防抖实现</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">debunce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//do something...</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><h3 id="watch-和computed区别"><a href="#watch-和computed区别" class="headerlink" title="watch 和computed区别"></a>watch 和computed区别</h3><blockquote><p>watch实际上就是观察者模式，把变量放置到观察者收集器中，变量值得变化可以被通知到，它接收两个参数，一个newValue一个oldValue，可选则添加immediate立即启用，deep深度（适用于watch对象）。</p></blockquote><ul><li>应用场景：自己的改变会影响到其他数据。</li></ul><blockquote><p>computed实际上就是将数据的getter重写成了自定义函数，相当于实现了数据劫持，会缓存计算结果，无论props还是data的属性值都可以作为计算属性的依赖值。</p></blockquote><ul><li>应用场景：依赖数据的改变会影响计算的结果。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;内容简介&quot;&gt;&lt;a href=&quot;#内容简介&quot; class=&quot;headerlink&quot; title=&quot;内容简介&quot;&gt;&lt;/a&gt;内容简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;js闭包、原型链、vue原理、词法分析AO、http缓存、性能优化、bfc、es6语法&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="面试" scheme="https://hyong1232.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面试" scheme="https://hyong1232.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>常见css面试题</title>
    <link href="https://hyong1232.github.io/2021/04/10/chang-jian-css-mian-shi-ti/"/>
    <id>https://hyong1232.github.io/2021/04/10/chang-jian-css-mian-shi-ti/</id>
    <published>2021-04-10T05:56:45.000Z</published>
    <updated>2021-04-10T08:12:47.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h2><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><ul><li>css3的transform：translate函数和绝对定位实现<iframe id="cp_embed_GRrymZG" src="//codepen.io/hyong1232/embed/GRrymZG?height=360&theme-id=dark&slug-hash=GRrymZG&default-tab=css,result" scrolling="no" frameborder="no" height="360" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></li></ul><h3 id="border生成三角形"><a href="#border生成三角形" class="headerlink" title="border生成三角形"></a>border生成三角形</h3><ul><li>css的border通过控制border的宽高、颜色生成三角形<iframe id="cp_embed_yLgpobR" src="//codepen.io/hyong1232/embed/yLgpobR?height=360&theme-id=dark&slug-hash=yLgpobR&default-tab=css,result" scrolling="no" frameborder="no" height="360" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></li></ul><h3 id="关于伪类和为伪元素"><a href="#关于伪类和为伪元素" class="headerlink" title="关于伪类和为伪元素"></a>关于伪类和为伪元素</h3><blockquote><p>常见伪类和伪元素归纳,伪类的前面只有<strong>一个冒号</strong>，而伪元素则有<strong>两个冒号</strong>。</p></blockquote><ul><li><p>作用：选择一些指定的有特殊格式的元素。<br><img src="/images/pseudo-class.png" alt="伪类"></p></li><li><p>作用：创建指定的元素，但是这个元素不在页面的dom树结构中。<br><img src="/images/pseudo-element.png" alt="伪元素"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;元素定位&quot;&gt;&lt;a href=&quot;#元素定位&quot; class=&quot;headerlink&quot; title=&quot;元素定位&quot;&gt;&lt;/a&gt;元素定位&lt;/h2&gt;&lt;h3 id=&quot;垂直居中&quot;&gt;&lt;a href=&quot;#垂直居中&quot; class=&quot;headerlink&quot; title=&quot;垂直居中&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="css" scheme="https://hyong1232.github.io/categories/css/"/>
    
    
    <category term="常见面试题" scheme="https://hyong1232.github.io/tags/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>gulp使用小结</title>
    <link href="https://hyong1232.github.io/2021/04/06/gulp-shi-yong-xiao-jie/"/>
    <id>https://hyong1232.github.io/2021/04/06/gulp-shi-yong-xiao-jie/</id>
    <published>2021-04-06T13:50:11.000Z</published>
    <updated>2021-04-07T17:11:32.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gulp介绍"><a href="#gulp介绍" class="headerlink" title="gulp介绍"></a>gulp介绍</h2><blockquote><p>1、gulp是一种类似于webpack的自动化构建工具，所有的操作均基于“流”，其本身是基于node构建的，大部分的功能以插件的形式提供。<br>2、gulp可以用来进行js、css、html、图片等等文件的打包压缩，sass、less等文件格式的转码。<br>3、gulp可以实现本地文件的实时修改实时展示，在<strong>gulp4</strong>中扩展了代理、html组件等功能。</p></blockquote><h2 id="gulp常用api"><a href="#gulp常用api" class="headerlink" title="gulp常用api"></a>gulp常用api</h2><table><thead><tr><th>api</th><th>作用</th></tr></thead><tbody><tr><td>src(path:string)</td><td>在指定的文件上创建一个流</td></tr><tr><td>src().pipe(path:string)</td><td>在此方法内执行所有扩展操作（插件的）</td></tr><tr><td>dest(path:string)</td><td>输出处理好的文件到指定的路径</td></tr><tr><td>task(name:string,handler:functoin)</td><td>创建一个任务到gulp的任务系统</td></tr><tr><td>watch(path:string,handler:function)</td><td>监视指定路径的文件，产生变化时用handler处理</td></tr><tr><td>series(…taskk:function)</td><td>依次访问任务系统中的指定任务，同步执行</td></tr><tr><td>parallel(…task:function)</td><td>同时开启任务系统中的指定任务，异步完成执行</td></tr></tbody></table><h2 id="gulp3"><a href="#gulp3" class="headerlink" title="gulp3"></a>gulp3</h2><ul><li>常见插件<pre class="line-numbers language-json"><code class="language-json"><span class="token property">"gulp-clean-css"</span><span class="token operator">:</span> <span class="token string">"^4.3.0"</span><span class="token punctuation">,</span><span class="token property">"gulp-concat"</span><span class="token operator">:</span> <span class="token string">"^2.6.1"</span><span class="token punctuation">,</span><span class="token property">"gulp-connect"</span><span class="token operator">:</span> <span class="token string">"^5.7.0"</span><span class="token punctuation">,</span><span class="token property">"gulp-load-plugins"</span><span class="token operator">:</span> <span class="token string">"^2.0.6"</span><span class="token punctuation">,</span><span class="token property">"open"</span><span class="token operator">:</span> <span class="token string">"^8.0.5"</span><span class="token punctuation">,</span><span class="token property">"gulp-rename"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span><span class="token property">"gulp-livereload"</span><span class="token operator">:</span> <span class="token string">"^4.0.2"</span><span class="token punctuation">,</span><span class="token property">"gulp-less"</span><span class="token operator">:</span> <span class="token string">"^4.0.1"</span><span class="token punctuation">,</span><span class="token property">"gulp-uglify"</span><span class="token operator">:</span> <span class="token string">"^3.0.2"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>插件</th><th>作用</th></tr></thead><tbody><tr><td>open</td><td>在浏览器上打开指定的文件</td></tr><tr><td>gulp-load-plugins</td><td>将gulp-开头的插件添加到一个对象上，调用返回这个对象</td></tr><tr><td>gulp-connect</td><td>开启gulp服务</td></tr><tr><td>gulp-livereload</td><td>刷新修改的文件，用于实时更新修改文件</td></tr><tr><td>gulp-rename</td><td>为还在流中的处理文件命名</td></tr><tr><td>gulp-concat</td><td>合并同类文件，例如css合并</td></tr><tr><td>gulp-uglify</td><td>压缩js文件</td></tr><tr><td>gulp-clean-css</td><td>压缩css文件</td></tr><tr><td>gulp-less</td><td>用于将less格式文件转换成css文件</td></tr></tbody></table></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token keyword">const</span> $ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-load-plugins'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> open <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'js'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/js/*.js'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'index.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/js/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token punctuation">{</span>suffix<span class="token punctuation">:</span><span class="token string">'.min'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/js/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">livereload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>connect<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'less'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/less/*.less'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'src/css/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">livereload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>connect<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'css'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'less'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/css/*.css'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'build.css'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">cssClean</span><span class="token punctuation">(</span><span class="token punctuation">{</span>compatibility<span class="token punctuation">:</span><span class="token string">'ie8'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token punctuation">{</span>suffix<span class="token punctuation">:</span><span class="token string">'.min'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/css/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">livereload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>connect<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">htmlMin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>collapseWhitespace<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">livereload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>connect<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'watch'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>  $<span class="token punctuation">.</span>livereload<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'src/js/*.js'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'src/css/*.css'</span><span class="token punctuation">,</span><span class="token string">'src/less/*.less'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'css'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'server'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token punctuation">.</span>connect<span class="token punctuation">.</span><span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        root<span class="token punctuation">:</span><span class="token string">'dist/'</span><span class="token punctuation">,</span>        port<span class="token punctuation">:</span><span class="token string">'2333'</span><span class="token punctuation">,</span>        livereload<span class="token punctuation">:</span><span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'http://localhost:2333/'</span><span class="token punctuation">)</span>    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'src/js/*.js'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'src/css/*.css'</span><span class="token punctuation">,</span><span class="token string">'src/less/*.less'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'css'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span><span class="token string">'css'</span><span class="token punctuation">,</span><span class="token string">'less'</span><span class="token punctuation">,</span><span class="token string">'html'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="gulp4"><a href="#gulp4" class="headerlink" title="gulp4"></a>gulp4</h2><blockquote><p>常见插件</p></blockquote><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"del"</span><span class="token operator">:</span> <span class="token string">"^6.0.0"</span><span class="token punctuation">,</span><span class="token property">"gulp-uglify"</span><span class="token operator">:</span> <span class="token string">"^3.0.2"</span><span class="token punctuation">,</span><span class="token property">"gulp-autoprefixer"</span><span class="token operator">:</span> <span class="token string">"^7.0.1"</span><span class="token punctuation">,</span><span class="token property">"gulp-babel"</span><span class="token operator">:</span> <span class="token string">"^8.0.0"</span><span class="token punctuation">,</span><span class="token property">"gulp-cssmin"</span><span class="token operator">:</span> <span class="token string">"^0.2.0"</span><span class="token punctuation">,</span><span class="token property">"gulp-file-include"</span><span class="token operator">:</span> <span class="token string">"^2.3.0"</span><span class="token punctuation">,</span><span class="token property">"gulp-htmlmin"</span><span class="token operator">:</span> <span class="token string">"^5.0.1"</span><span class="token punctuation">,</span><span class="token property">"gulp-sass"</span><span class="token operator">:</span> <span class="token string">"^4.1.0"</span><span class="token punctuation">,</span><span class="token property">"gulp-webserver"</span><span class="token operator">:</span> <span class="token string">"^0.9.1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>插件</th><th>作用</th></tr></thead><tbody><tr><td>del</td><td>删除指定路径的文件文件</td></tr><tr><td>gulp-autoprefixer</td><td>css文件处理中自动添加前缀，例如–webkit</td></tr><tr><td>gulp-babel</td><td>转换es6语法</td></tr><tr><td>gulp-cssmin</td><td>压缩css文件</td></tr><tr><td>gulp-file-include</td><td>html处理之前，可以整合自定义的html代码片段</td></tr><tr><td>gulp-htmlmin</td><td>压缩html文件</td></tr><tr><td>gulp-sass</td><td>转化sass成css</td></tr><tr><td>gulp-webserver</td><td>创建本地服务</td></tr></tbody></table><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token keyword">const</span> del <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'del'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> server <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-connect'</span><span class="token punctuation">)</span><span class="token keyword">const</span> $ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-load-plugins'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> jsHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/js/*.js'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'index.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        presets<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'@babel/env'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/js/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> sassHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/sass/*.scss'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">autoprefixer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">sass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'src/css/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> cssHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/css/*.css'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'index.css'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">autoprefixer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// .pipe($.autoprefixer({</span>    <span class="token comment" spellcheck="true">//     browsers:'last 2 version'</span>    <span class="token comment" spellcheck="true">// }))</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">cssmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/css/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> htmlHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">fileInclude</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        prefix<span class="token punctuation">:</span><span class="token string">'@@'</span><span class="token punctuation">,</span>        basepath<span class="token punctuation">:</span><span class="token string">'src/components/'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">htmlmin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        collapseWhitespace<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        removeStyleLinkTypeAttributes<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        remvoeScriptTypeAttribute<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        removeAttributeQuotes<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//去掉不必要的属性双引号</span>        collapseBooleanAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//合并boolean属性</span>        removeEmptyAttribute<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//原生html空属性属性</span>        minifyCss<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        minifyJs<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> watchHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'src/js/*.js'</span><span class="token punctuation">,</span>jsHandler<span class="token punctuation">)</span>    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'src/components/*.html'</span><span class="token punctuation">,</span>htmlHandler<span class="token punctuation">)</span>    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'*.html'</span><span class="token punctuation">,</span>htmlHandler<span class="token punctuation">)</span>    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'src/sass/*.scss'</span><span class="token punctuation">,</span>sassHandler<span class="token punctuation">)</span>    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'src/css/*.css'</span><span class="token punctuation">,</span>cssHandler<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> serverHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./dist'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">webserver</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        host<span class="token punctuation">:</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>        port<span class="token punctuation">:</span><span class="token string">"5000"</span><span class="token punctuation">,</span>        livereload<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        open<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        proxies<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                source<span class="token punctuation">:</span><span class="token string">'/dt'</span><span class="token punctuation">,</span>                target<span class="token punctuation">:</span><span class="token string">'https://www.duitang.com/napi/ad/banner/list/'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> delDistHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./dist/'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>sass <span class="token operator">=</span> sassHandlermodule<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token operator">=</span> gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>    delDistHandler<span class="token punctuation">,</span>    gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span>htmlHandler<span class="token punctuation">)</span><span class="token punctuation">,</span>    gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>sassHandler<span class="token punctuation">,</span>cssHandler<span class="token punctuation">)</span><span class="token punctuation">,</span>    jsHandler<span class="token punctuation">,</span>    serverHandler<span class="token punctuation">,</span>    watchHandler<span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;gulp介绍&quot;&gt;&lt;a href=&quot;#gulp介绍&quot; class=&quot;headerlink&quot; title=&quot;gulp介绍&quot;&gt;&lt;/a&gt;gulp介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;1、gulp是一种类似于webpack的自动化构建工具，所有的操作均基于“流”，其</summary>
      
    
    
    
    <category term="node" scheme="https://hyong1232.github.io/categories/node/"/>
    
    
    <category term="gulp" scheme="https://hyong1232.github.io/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>promise小结</title>
    <link href="https://hyong1232.github.io/2021/04/02/promise-xiao-jie/"/>
    <id>https://hyong1232.github.io/2021/04/02/promise-xiao-jie/</id>
    <published>2021-04-02T01:54:47.000Z</published>
    <updated>2021-04-13T06:01:28.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Promise介绍"><a href="#Promise介绍" class="headerlink" title="Promise介绍"></a>Promise介绍</h2><blockquote><p>Promise是es6中对异步函数处理的一种新的解决方案（旧的方式：回调函数），可以处理异步操作（excuter），并获得处理的结果（then），有两种状态等待（PENDIGN）和处理完毕（ONRESOLVED/ONREJECTED）</p></blockquote><h2 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then"></a>Promise.prototype.then</h2><blockquote><p>Promise对象的处理完毕的回调函数。在then函数中返回值有三种情况：<br>1、异常或reject值，此时Promise对象的状态是onrejected<br>2、其他任意值（数字，字符串等），此时Promise状态是onresolved<br>3、新的Promise对象，则执行这个新的对象并将执行结果作为原promise的结果返回</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>rej<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// rej('failed')</span>    <span class="token function">res</span><span class="token punctuation">(</span><span class="token string">'sucess'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// return Promise.resolve(3)</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolve'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>reason<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'rejct'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>reason<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义实现promise及其方法"><a href="#自定义实现promise及其方法" class="headerlink" title="自定义实现promise及其方法"></a>自定义实现promise及其方法</h2><h3 id="实现promise构造函数以及延迟改变状态"><a href="#实现promise构造函数以及延迟改变状态" class="headerlink" title="实现promise构造函数以及延迟改变状态"></a>实现promise构造函数以及延迟改变状态</h3><pre class="line-numbers language-js"><code class="language-js"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ul><li><p>多个返回值判定</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ===>> onRejected1 1 ,onResolved2 undefined   </span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ===>> onResolved1 1 ,onResolved2 undefined      </span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolved1'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>reason<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onRejected1'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolved2'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>reason<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onRejected2'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>catch和then链式交替连接</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token number">3</span>  <span class="token comment" spellcheck="true">// ===>>> onRejected1 3 , onResolved2 undefined , onResolved3 undefined , onResolved4 undefined</span>  <span class="token comment" spellcheck="true">// reject() ===>>> onRejected1 undefined , onResolved2 undefined , onResolved3 undefined , onResolved4 undefined</span>  <span class="token comment" spellcheck="true">//resolve()  ===>>> onResolved1 undefined , onResolved2 undefined , onResolved3 undefined , onResolved4 undefined</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolved1'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>reason<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onRejected1'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolved2'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolved3'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>reason<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onRejected0'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolved4'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>reason<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onRejected4'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1、then的链式调用return/throw 的结果，会作为下一个状态调用函数的结果传入then的回调函数中。<br>2、catch和then的优先级是一样的会按照<strong>串联顺序</strong>依次执行。<br>3、如果then函数中没有第二个参数，则在promise状态由PENDING转为ONREJECTED时会<strong>跳过没有ONREJECTED状态处理函数的then链</strong>寻找有的then或catch回调</p></li><li><p>嵌套setTimeout</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> p1 <span class="token operator">=</span> _<span class="token operator">=</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>rej<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>rej<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span>_<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>          <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3 7 4 1 2 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>与settimeout同时出现</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>rej<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>  <span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>_<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>rej<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>      <span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>_<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>_<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>_<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>rej<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span>  <span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>_<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//1 7 2 3 8 4 6 5 0 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Promise介绍&quot;&gt;&lt;a href=&quot;#Promise介绍&quot; class=&quot;headerlink&quot; title=&quot;Promise介绍&quot;&gt;&lt;/a&gt;Promise介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Promise是es6中对异步函数处理的一种新的解决方案（</summary>
      
    
    
    
    <category term="es6" scheme="https://hyong1232.github.io/categories/es6/"/>
    
    
    <category term="promise" scheme="https://hyong1232.github.io/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>es6变量解构</title>
    <link href="https://hyong1232.github.io/2021/03/15/es6-bian-liang-jie-gou/"/>
    <id>https://hyong1232.github.io/2021/03/15/es6-bian-liang-jie-gou/</id>
    <published>2021-03-15T02:06:21.000Z</published>
    <updated>2021-03-15T07:42:00.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组机构赋值"><a href="#数组机构赋值" class="headerlink" title="数组机构赋值"></a>数组机构赋值</h2><blockquote><p>匹配赋值，即只要等号右边的结构与左边相同或包含左侧结构，且右侧有iterator接口，即可成功，复制失败则左侧值为undefined。</p></blockquote><ul><li><p>左侧结构小于右侧</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a=1,b=2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>右侧结构小于左侧</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a=1,b=undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>函数惰性赋值,即当有对应的解构赋值时是不会触发函数求值的。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'run function ...'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//a=1,b=undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>特殊情况set和generator函数也是可以正常解构赋值的。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//set赋值</span><span class="token keyword">var</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//a=1,b=2</span><span class="token comment" spellcheck="true">//generator赋值</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">fibs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//加分号</span>      <span class="token keyword">yield</span> a<span class="token punctuation">;</span>      <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token punctuation">[</span>one<span class="token punctuation">,</span>two<span class="token punctuation">,</span>three<span class="token punctuation">,</span>four<span class="token punctuation">,</span>five<span class="token punctuation">,</span>six<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fibs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//six 5</span><span class="token template-string"><span class="token string">``</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>`</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数组机构赋值&quot;&gt;&lt;a href=&quot;#数组机构赋值&quot; class=&quot;headerlink&quot; title=&quot;数组机构赋值&quot;&gt;&lt;/a&gt;数组机构赋值&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;匹配赋值，即只要等号右边的结构与左边相同或包含左侧结构，且右侧有iterator接</summary>
      
    
    
    
    <category term="es6" scheme="https://hyong1232.github.io/categories/es6/"/>
    
    
    <category term="变量解构" scheme="https://hyong1232.github.io/tags/%E5%8F%98%E9%87%8F%E8%A7%A3%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>序列化</title>
    <link href="https://hyong1232.github.io/2021/03/14/xu-lie-hua/"/>
    <id>https://hyong1232.github.io/2021/03/14/xu-lie-hua/</id>
    <published>2021-03-14T15:32:12.000Z</published>
    <updated>2021-03-16T03:17:08.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序列化用途及应用场景"><a href="#序列化用途及应用场景" class="headerlink" title="序列化用途及应用场景"></a>序列化用途及应用场景</h2><blockquote><p>序列化和反序列化是java为了使数据结构或对象转换成可取用格式（文本字节，缓存内容，或网络发送），以便可以实现数据存储和数据传输的一种方式。主要应用在<strong>数据存储</strong>和<strong>网络通讯</strong>（c/s）<br>1)序列化：将对象转换为字节的过程。<br>2)反序列化：将字节转换为对象的过程。</p></blockquote><p><strong>特别的</strong>:在当前软件行业中有时也会将对象转换为字符串的过程理解为序列化,例如将对象转换为json格式的字符串。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><blockquote><p>在对象的序列化的过程中，主要是实现<strong>Serializable接口</strong>或它的子类接口<strong>Externalizable接口</strong>来实现的。其中Externalizable接口需要自己指定需要序列化的成员变量。</p></blockquote><h3 id="实现implements-Serializable接口"><a href="#实现implements-Serializable接口" class="headerlink" title="实现implements Serializable接口"></a>实现implements Serializable接口</h3><ul><li><p>这种方式可以使用<strong>transient</strong>关键字来设置某些成员变量或结构不被序列化。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">transient</span> String gender<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>继承此接口可以不用设置序列化的版本，编译后会自动根据类名、接口名、成员方法及属性等来生成一个64位的哈希字段值作为版本号，如果后后面修改这个对象，有可能影响<strong>反序列化</strong>。</p></li><li><p>可以通过自定义要序列化的对象的readObject和writeObject，并在方法体内自定义加密方式的方法来进行序列化的加密。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//自定义解密过程</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>ObjectInputStream ois<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>  ois<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Decoder decoder <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decode <span class="token operator">=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//自定义加序列化加密过程</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span>ObjectOutputStream oos<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>  Encoder encoder <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encode <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span><span class="token punctuation">;</span>  oos<span class="token punctuation">.</span><span class="token function">defaultWriteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>注意：</strong>方法名称参数需要同上一致，否则不成功调用方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * version 1     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 接口名、类名、成员方法等生成的64位哈希值     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 5462132935608928093L<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> String gender<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", gender="</span> <span class="token operator">+</span> gender <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> String gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span>String gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\code\\java\\testDoc/test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"杰克"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\code\\java\\testDoc/test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student rs <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">encodeSerialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">controlSerialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">controlSerialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\code\\java\\testDoc/test2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"露西"</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\code\\java\\testDoc/test2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student ro <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ro<span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">encodeSerialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\code\\java\\testDoc/test1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"杰克"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\code\\java\\testDoc/test1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student ro <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ro<span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现implements-Externalizable接口"><a href="#实现implements-Externalizable接口" class="headerlink" title="实现implements Externalizable接口"></a>实现implements Externalizable接口</h3><blockquote><p>实现Externalizable接口需要自定义要序列化的成员变量，重写readExternal和writeExternal方法，并在方法中指定要序列化的成员变量。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ExterDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Externalizable</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String gender<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"ExterDemo [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">ExterDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">ExterDemo</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span>String gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//实现writerExternal方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeExternal</span><span class="token punctuation">(</span>ObjectOutput out<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//实现readExternal方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readExternal</span><span class="token punctuation">(</span>ObjectInput in<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExternalizableTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\code\\java\\testDoc/test2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExterDemo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"阳光"</span><span class="token punctuation">,</span><span class="token string">"沙滩"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\code\\java\\testDoc/test2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExterDemo ro <span class="token operator">=</span> <span class="token punctuation">(</span>ExterDemo<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ro<span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ul><li>指定不同类的序列化成员变量的方法不同，int是readInt，String是readUTF等等。</li><li>在指定的方法时读写的方法要匹配，例如readByte就不能和writeUTF匹配。</li><li>如果声明了有参构造，必须声明无参构造，否则在进行序列化读取强转时会报错。</li></ul><p>控制序列化的粒度即控制对象内容是否序列化两种方式transient关键字和实现Externalizable接口。</p><h2 id="Jackson中的应用"><a href="#Jackson中的应用" class="headerlink" title="Jackson中的应用"></a>Jackson中的应用</h2><blockquote><p>使用jackson-databind中的ObjectMapper对象可以实现字符串与对象的转换等功能。</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">JsonDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 3327227108329210774L<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">JsonDemo</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">JsonDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getSerialversionuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> serialVersionUID<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"JsonDemo [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacksonTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        JsonDemo jd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonDemo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"皮特"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String jds <span class="token operator">=</span> om<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>jd<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jds<span class="token punctuation">)</span><span class="token punctuation">;</span>        JsonDemo readValue <span class="token operator">=</span> om<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>jds<span class="token punctuation">,</span> JsonDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>readValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong><br>1、如果声明了有参构造，必须声明无参构造，否则在进行序列化读取强转时会报错。<br>2、必须设置成员变量的getter/setter方法，否则writeValueAsString方法报错。</p><h2 id="hessian中的应用"><a href="#hessian中的应用" class="headerlink" title="hessian中的应用"></a>hessian中的应用</h2><blockquote><p>caucho公司的hessian4.0.6x版本</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>caucho<span class="token punctuation">.</span>hessian<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Hessian2Input<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>caucho<span class="token punctuation">.</span>hessian<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Hessian2Output<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Fruit</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * version 1     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 3120159858711792276L<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Fruit</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Fruit [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HessianDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Fruit f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Hessian2Output h2o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hessian2Output</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\code\\java\\testDoc/hessianTetx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h2o<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        h2o<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h2o<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Hessian2Input h2i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hessian2Input</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\\\code\\\\java\\\\testDoc/hessianTetx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Fruit ro <span class="token operator">=</span> <span class="token punctuation">(</span>Fruit<span class="token punctuation">)</span> h2i<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span>Fruit<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Fruit ro = (Fruit) h2i.readObject();</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ro<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;序列化用途及应用场景&quot;&gt;&lt;a href=&quot;#序列化用途及应用场景&quot; class=&quot;headerlink&quot; title=&quot;序列化用途及应用场景&quot;&gt;&lt;/a&gt;序列化用途及应用场景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;序列化和反序列化是java为了使数据结构或对象转换</summary>
      
    
    
    
    <category term="java" scheme="https://hyong1232.github.io/categories/java/"/>
    
    
    <category term="序列化" scheme="https://hyong1232.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>generic泛型</title>
    <link href="https://hyong1232.github.io/2021/02/27/generic-fan-xing/"/>
    <id>https://hyong1232.github.io/2021/02/27/generic-fan-xing/</id>
    <published>2021-02-27T10:28:45.000Z</published>
    <updated>2021-06-03T12:49:25.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li><p>泛型没有以下继承结构</p><pre class="line-numbers language-java"><code class="language-java">ArrayList<span class="token operator">&lt;</span>Number<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token comment" spellcheck="true">//错误</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token comment" spellcheck="true">//正确</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不包含基本类型int/short/byte…</p></li><li><p>不能获取泛型类Customer<String>.class，因为类型擦除，获取到的都是Object.class</p></li><li><p>因为类型擦除的缘故，泛型的类对象都是object，然后由编译器进行强转来完成的类型转换。</p></li><li><p>不能实例化泛型对象==&gt;&gt;都是new Object()</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等同于</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确写法是：</span><span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不能覆盖object类原有的方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//这样写是错误的❌</span><span class="token keyword">public</span> Boolean <span class="token function">equals</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token operator">==</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//避免和object类的方法冲突</span><span class="token keyword">public</span> Boolean <span class="token function">same</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token operator">==</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不能进行泛型间的转型，只能是类之间的转型——没有泛型的直接继承，可以用？进行继承或<strong>super</strong>关键字进行继承转换</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//正确</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误,没有这种写法</span>ArrayList<span class="token operator">&lt;</span>Number<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确</span>ArrayList<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Integer<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ArrayList<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>泛型的PECS原则：Produce Extends Consumer Super(就是只能把子类（包含类型范围小）的值获取赋给父类（类型给范围大）)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> test<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">PairFactory</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">private</span> T one<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">PairFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">PairFactory</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>one <span class="token operator">=</span> t<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> T <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> one<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>one <span class="token operator">=</span> t<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"one:"</span><span class="token operator">+</span>one<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PECSDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>PairFactory<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> p1<span class="token punctuation">,</span>PairFactory<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> p2<span class="token punctuation">)</span><span class="token punctuation">{</span>      E n <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      p2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      PairFactory<span class="token operator">&lt;</span>Integer<span class="token operator">></span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PairFactory</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      PairFactory<span class="token operator">&lt;</span>Number<span class="token operator">></span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PairFactory</span><span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">copy</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不能直接创建泛型数组，要通过反射新建，然后强制转型(FIFO算法实例)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// FIFO-->>first input first output</span><span class="token comment" spellcheck="true">// array数组存储</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Array<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FIFODemo</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> E<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> capcity <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 通过反射新建数组，然后强制转型成对应数组</span>  <span class="token keyword">public</span> <span class="token function">FIFODemo</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>E<span class="token operator">></span> e<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"the lenth of container must > 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>              e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      arr <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> capcity<span class="token punctuation">)</span> <span class="token punctuation">{</span>          capcity <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>          arr <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> capcity<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>      index<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  E <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      E e <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> e<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      FIFODemo<span class="token operator">&lt;</span>String<span class="token operator">></span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FIFODemo</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fd<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fd<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fd<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fd<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fd<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fd<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="泛型与可变参数"><a href="#泛型与可变参数" class="headerlink" title="泛型与可变参数"></a>泛型与可变参数</h2></li><li><p>字节码对象获取方法、执行方法及相关应用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@CallerSensitive</span><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>  <span class="token keyword">throws</span> IllegalAccessException<span class="token punctuation">,</span> IllegalArgumentException<span class="token punctuation">,</span>      InvocationTargetException<span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>override<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Reflection<span class="token punctuation">.</span><span class="token function">quickCheckMemberAccess</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> caller <span class="token operator">=</span> Reflection<span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">checkAccess</span><span class="token punctuation">(</span>caller<span class="token punctuation">,</span> clazz<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  MethodAccessor ma <span class="token operator">=</span> methodAccessor<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// read volatile</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ma <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ma <span class="token operator">=</span> <span class="token function">acquireMethodAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> ma<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@CallerSensitive</span><span class="token keyword">public</span> Method <span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>  <span class="token keyword">throws</span> NoSuchMethodException<span class="token punctuation">,</span> SecurityException <span class="token punctuation">{</span>  <span class="token function">checkMemberAccess</span><span class="token punctuation">(</span>Member<span class="token punctuation">.</span>DECLARED<span class="token punctuation">,</span> Reflection<span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Method method <span class="token operator">=</span> <span class="token function">searchMethods</span><span class="token punctuation">(</span><span class="token function">privateGetDeclaredMethods</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> parameterTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token function">argumentTypesToString</span><span class="token punctuation">(</span>parameterTypes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> method<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>  ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    list.add(100);//直接添加100不行，要在运行时通过反射调用方法添加</span>  Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Method m <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不能直接通过instanceof判定父类的泛型类型</p><pre class="line-numbers language-java"><code class="language-java">m1 <span class="token keyword">instanceof</span> <span class="token class-name">person</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token comment" spellcheck="true">//错误❌</span>m1 <span class="token keyword">instanceof</span> <span class="token class-name">person</span><span class="token comment" spellcheck="true">//正确✔</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>如果在方法内部创建了泛型数组，最好不要将它返回给外部使用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token operator">&lt;</span>K<span class="token operator">></span> K<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">pickTwo</span><span class="token punctuation">(</span>K k1<span class="token punctuation">,</span> K k2<span class="token punctuation">,</span> K k3<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">asArray</span><span class="token punctuation">(</span>k1<span class="token punctuation">,</span> k2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">asArray</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> objs<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> objs<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为擦拭法，在pickTwo()方法内部，编译器无法检测K[]的正确类型，因此返回了Object[]。</p></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="获取父类的泛型类型"><a href="#获取父类的泛型类型" class="headerlink" title="获取父类的泛型类型"></a>获取父类的泛型类型</h3><blockquote><p>java类型图</p></blockquote><pre class="line-numbers language-seq"><code class="language-seq">                      ┌────┐                      │Type│                      └────┘                         ▲                         │   ┌────────────┬────────┴─────────┬───────────────┐   │            │                  │               │┌─────┐┌─────────────────┐┌────────────────┐┌────────────┐│Class││ParameterizedType││GenericArrayType││WildcardType│└─────┘└─────────────────┘└────────────────┘└────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">Class<span class="token operator">&lt;</span>Man<span class="token operator">></span> c <span class="token operator">=</span> Man<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>Type genericSuperclass <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getGenericSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>genericSuperclass <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Type<span class="token punctuation">[</span><span class="token punctuation">]</span> actualTypeArguments <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ParameterizedType<span class="token punctuation">)</span> genericSuperclass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> classType <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> actualTypeArguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体的操作步骤：获取对象的字节码对象===&gt;&gt;&gt;获取父类泛型类型，并判定是否是ParameterizedType类型===&gt;&gt;&gt;获取正式的参数类型数组===&gt;&gt;&gt;获取对应字节码对象。</p><h3 id="类、方法、接口的泛型应用"><a href="#类、方法、接口的泛型应用" class="headerlink" title="类、方法、接口的泛型应用"></a>类、方法、接口的泛型应用</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> generic<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ClsDemo</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    T <span class="token function">getInstance</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span>E <span class="token function">getIns</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">ObjFactory</span><span class="token operator">&lt;</span>I<span class="token punctuation">,</span>R<span class="token operator">></span><span class="token punctuation">{</span>    R <span class="token function">getInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>I<span class="token operator">></span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    R <span class="token function">getInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>I<span class="token operator">></span> i<span class="token punctuation">,</span>String s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CreateInstance</span> <span class="token keyword">implements</span> <span class="token class-name">ObjFactory</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">getInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>String<span class="token operator">></span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String is <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            is <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> is<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">getInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>String<span class="token operator">></span> i<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClsMthIntCompareDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String i <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">CreateInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        String is2 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">ObjFactory</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> Object <span class="token function">getInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>String<span class="token operator">></span> i<span class="token punctuation">,</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String is <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Constructor<span class="token operator">&lt;</span>String<span class="token operator">></span> constructor <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    is <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> is<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> Object <span class="token function">getInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>String<span class="token operator">></span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"xixi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>is2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线程安全的ArrayList"><a href="#线程安全的ArrayList" class="headerlink" title="线程安全的ArrayList"></a>线程安全的ArrayList</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Sync</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * version 1     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基于LinkedList实现的Lru算法存储"><a href="#基于LinkedList实现的Lru算法存储" class="headerlink" title="基于LinkedList实现的Lru算法存储"></a>基于LinkedList实现的Lru算法存储</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LruCache</span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * version 1     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxCap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LruCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxCap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>maxCap<span class="token punctuation">,</span><span class="token number">0.75f</span> <span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxCap <span class="token operator">=</span> maxCap<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxCap <span class="token operator">&lt;</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;泛型没有以下继承结构&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-java&quot;&gt;&lt;code </summary>
      
    
    
    
    <category term="java" scheme="https://hyong1232.github.io/categories/java/"/>
    
    
    <category term="泛型" scheme="https://hyong1232.github.io/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架整合</title>
    <link href="https://hyong1232.github.io/2021/02/21/ssm-kuang-jia-zheng-he/"/>
    <id>https://hyong1232.github.io/2021/02/21/ssm-kuang-jia-zheng-he/</id>
    <published>2021-02-21T05:59:04.000Z</published>
    <updated>2021-05-08T06:36:57.441Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p>配置路径：添加WEB-INF/web.xml文件，配置springmvc-config.xml和applicationContext.xml配置mybatis-config.xml,配置对应Mapper.xml文件</p></blockquote><h3 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h3><blockquote><p>主要配置四个地方：tomcat的默认servlet匹配静态资源、资源编码CharacterEncodingFilter、DispatcherServlet以及默认错误页面</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span>    <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>yonghe-ssm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>default.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>default.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>default.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 默认错误处理页面 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/WEB-INF/pages/error.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/WEB-INF/pages/error.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- DispatcherServlet配置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置对应mvc其他配置的位置，整合spring的配置文件 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:spring/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 默认servlet配置静态资源访问 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.gif<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.svg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 字符编码CharacterEncodingFilter配置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置spring文件"><a href="#配置spring文件" class="headerlink" title="配置spring文件"></a>配置spring文件</h3><blockquote><p>主要有两个文件spring的配置文件applicatoinContext和springMVC的配置文件springMVC-config的文件</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml">+ springmvc-config.xml<span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd                        http://www.springframework.org/schema/beans                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd                        http://www.springframework.org/schema/context                          http://www.springframework.org/schema/context/spring-context-4.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 1.配置前端控制器放行静态资源(html/css/js等，否则静态资源将无法访问) --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 2.启用默认配置, 配置注解驱动，用于识别注解（比如@Controller） --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 3.配置需要扫描的包：spring自动去扫描 base-package 下的类，        如果扫描到的类上有 @Controller、@Service、@Component等注解，        将会自动将类注册为bean      --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tedu.controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 4.配置内部资源视图解析器        prefix:配置路径前缀        suffix:配置文件后缀     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>                    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>applicationContext.xml<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd  http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd  http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 引入jdbc的属性文件 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 将SqlSessionFactory的创建交给spring完成 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis/mybatis-config.xml<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis/Mapper/*.xml<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- druid连接池对象配置 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${driverClassName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 定义mapper接口扫描器      如果bean标签上没有id,默认id值是当前类的类名,首字母小写      扫描 com.tedu.dao包下的所有接口,由框架负责提供接口的子类      由spring容器负责创建接口的子类实例(spring会将创建好的接口子类实例存到map中)   --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 扫描所有XxxMapper接口，将接口实例的创建交给spring容器 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span>           <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tedu.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 同上，service接口扫描器 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>service<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="配置mybatis"><a href="#配置mybatis" class="headerlink" title="配置mybatis"></a>配置mybatis</h3><ul><li><p>mybatis-config.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token comment" spellcheck="true">&lt;!-- MyBatis的全局配置文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 将开发环境配置和导入mapper文件的配置移除,在spring的配置文件中进行配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>mapper配置模板</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!-- 门店表的映射文件    namespace值为对应接口的全路径 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tedu.dao.DoorMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 1.查询所有门店信息，id值为对应接口中方法的名字      resultType指定将查询的结果封装到哪个pojo对象中   --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tedu.pojo.Door<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from tb_door  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 2.根据id删除门店信息 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteById<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      delete from tb_door where id=#{id}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 3.新增门店信息 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      insert into tb_door value      (null,#{name},#{tel},#{addr})  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 4.根据id查询门店信息 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tedu.pojo.Door<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from tb_door where id=#{id}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 5.根据id修改门店信息 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateById<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      update tb_door set name=#{name},      tel=#{tel},addr=#{addr}      where id=#{id}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>使用要新建pojo下的实例和mapper对应的sql文件dao下的对应文件，然后新建service对应接口以及实现类，最后在controller类中调用对应的service实现类的方法即可。</p></blockquote></li></ul><h3 id="contoller类"><a href="#contoller类" class="headerlink" title="contoller类"></a>contoller类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> controller<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>propertyeditors<span class="token punctuation">.</span>CustomDateEditor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>Model<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>ServletRequestDataBinder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>InitBinder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> pojo<span class="token punctuation">.</span>Door<span class="token punctuation">;</span><span class="token keyword">import</span> pojo<span class="token punctuation">.</span>Order<span class="token punctuation">;</span><span class="token keyword">import</span> service<span class="token punctuation">.</span>DoorServiceImpl<span class="token punctuation">;</span><span class="token keyword">import</span> service<span class="token punctuation">.</span>OrderServiceImpl<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OrderServiceImpl orderServ<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DoorServiceImpl doorServ<span class="token punctuation">;</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orderList"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">orderList</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Order<span class="token operator">></span> ol <span class="token operator">=</span> orderServ<span class="token punctuation">.</span><span class="token function">orderFindAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Door<span class="token operator">></span> dl <span class="token operator">=</span> doorServ<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">,</span>ol<span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"dl"</span><span class="token punctuation">,</span>dl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"order_list"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orderUpdate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">orderUpdate</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        orderServ<span class="token punctuation">.</span><span class="token function">orderUpdateById</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"forward:/orderList"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toOrderAdd"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">toOrderAdd</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Door<span class="token operator">></span> list <span class="token operator">=</span> doorServ<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"door"</span><span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"order_add"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orderInfo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">orderInfo</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Order ol <span class="token operator">=</span> orderServ<span class="token punctuation">.</span><span class="token function">orderFindById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Door<span class="token operator">></span> dl <span class="token operator">=</span> doorServ<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"ol"</span><span class="token punctuation">,</span>ol<span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"dl"</span><span class="token punctuation">,</span>dl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"order_update"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orderDelete"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">orderDelete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        orderServ<span class="token punctuation">.</span><span class="token function">orderDeleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/orderList"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orderAdd"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">orderAdd</span><span class="token punctuation">(</span>Order order<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer rows <span class="token operator">=</span> orderServ<span class="token punctuation">.</span><span class="token function">orderAdd</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">orderList</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@InitBinder</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">InitBinder</span><span class="token punctuation">(</span>ServletRequestDataBinder binder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        binder<span class="token punctuation">.</span><span class="token function">registerCustomEditor</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">CustomDateEditor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="service类"><a href="#service类" class="headerlink" title="service类"></a>service类</h3><ul><li><p>接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> service<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> pojo<span class="token punctuation">.</span>Order<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">orderFindAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> Order <span class="token function">orderFindById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> Integer <span class="token function">orderDeleteById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> Integer <span class="token function">orderUpdateById</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> Integer <span class="token function">orderAdd</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> service<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> dao<span class="token punctuation">.</span>OrderMapper<span class="token punctuation">;</span><span class="token keyword">import</span> pojo<span class="token punctuation">.</span>Order<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> OrderMapper dao<span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">orderFindAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>Order<span class="token operator">></span> list <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">orderFindById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> list<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> Order <span class="token function">orderFindById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Order list <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">orderFindById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> list<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> Integer <span class="token function">orderDeleteById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Integer rows <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">orderDeleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> rows<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> Integer <span class="token function">orderUpdateById</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Integer rows <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">orderUpdateById</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> rows<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> Integer <span class="token function">orderAdd</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Integer rows <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">orderAdd</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> rows<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dao对应接口"><a href="#dao对应接口" class="headerlink" title="dao对应接口"></a>dao对应接口</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> controller<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>propertyeditors<span class="token punctuation">.</span>CustomDateEditor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>Model<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>ServletRequestDataBinder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>InitBinder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> pojo<span class="token punctuation">.</span>Door<span class="token punctuation">;</span><span class="token keyword">import</span> pojo<span class="token punctuation">.</span>Order<span class="token punctuation">;</span><span class="token keyword">import</span> service<span class="token punctuation">.</span>DoorServiceImpl<span class="token punctuation">;</span><span class="token keyword">import</span> service<span class="token punctuation">.</span>OrderServiceImpl<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> OrderServiceImpl orderServ<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> DoorServiceImpl doorServ<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orderList"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">orderList</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>Order<span class="token operator">></span> ol <span class="token operator">=</span> orderServ<span class="token punctuation">.</span><span class="token function">orderFindAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      List<span class="token operator">&lt;</span>Door<span class="token operator">></span> dl <span class="token operator">=</span> doorServ<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">,</span>ol<span class="token punctuation">)</span><span class="token punctuation">;</span>      model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"dl"</span><span class="token punctuation">,</span>dl<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"order_list"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orderUpdate"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">orderUpdate</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>      orderServ<span class="token punctuation">.</span><span class="token function">orderUpdateById</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"forward:/orderList"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toOrderAdd"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">toOrderAdd</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>Door<span class="token operator">></span> list <span class="token operator">=</span> doorServ<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"door"</span><span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"order_add"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orderInfo"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">orderInfo</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Order ol <span class="token operator">=</span> orderServ<span class="token punctuation">.</span><span class="token function">orderFindById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      List<span class="token operator">&lt;</span>Door<span class="token operator">></span> dl <span class="token operator">=</span> doorServ<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"ol"</span><span class="token punctuation">,</span>ol<span class="token punctuation">)</span><span class="token punctuation">;</span>      model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"dl"</span><span class="token punctuation">,</span>dl<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"order_update"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orderDelete"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">orderDelete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>      orderServ<span class="token punctuation">.</span><span class="token function">orderDeleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"redirect:/orderList"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orderAdd"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">orderAdd</span><span class="token punctuation">(</span>Order order<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Integer rows <span class="token operator">=</span> orderServ<span class="token punctuation">.</span><span class="token function">orderAdd</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">orderList</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@InitBinder</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">InitBinder</span><span class="token punctuation">(</span>ServletRequestDataBinder binder<span class="token punctuation">)</span> <span class="token punctuation">{</span>      binder<span class="token punctuation">.</span><span class="token function">registerCustomEditor</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>              <span class="token keyword">new</span> <span class="token class-name">CustomDateEditor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="mapper对应xml"><a href="#mapper对应xml" class="headerlink" title="mapper对应xml"></a>mapper对应xml</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao.OrderMapper<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cols<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>o.id,door_id doorId,order_no orderNo,order_type orderType,pnum,cashier,order_time orderTime,pay_time payTime,pay_type payType,price<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderFindById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Order<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cols<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> from tb_order o left join tb_door d on o.door_id=d.id        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             having o.id=#{id}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderDeleteById<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from tb_order         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                id=#{id}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderUpdateById<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update tb_order         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> doorId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                door_id=#{doorId},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> orderNo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                order_no=#{orderNo},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> orderType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                order_type=#{orderType},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> pnum<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                pnum=#{pnum},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> cashier<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                cashier=#{cashier},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> orderTime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                order_time=#{orderTime},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> payType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                pay_type=#{payType},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> payTime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                pay_time=#{payTime},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> price<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                price=#{price},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                id=#{id}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderAdd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into tb_order values(null,#{doorId},#{orderNo},#{orderType},        #{pnum},#{cashier},#{orderTime},#{payTime},#{payType},#{price});    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="框架整合"><a href="#框架整合" class="headerlink" title="框架整合"></a>框架整合</h2><blockquote><p>个人理解整合spring和springmvc以及mybatis主要就是将mybatis的SqlSessionFactory的创建，springmvc的视图解析器internalResourceViewResolver交给spring来管理。并且要配置相关包注册扫描：</p></blockquote><ul><li><p>spring配置的头文件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">default-lazy-init</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>     <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>util</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/util<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>     http://www.springframework.org/schema/beans     http://www.springframework.org/schema/beans/spring-beans.xsd     http://www.springframework.org/schema/mvc     http://www.springframework.org/schema/mvc/spring-mvc.xsd     http://www.springframework.org/schema/tx     http://www.springframework.org/schema/tx/spring-tx.xsd     http://www.springframework.org/schema/aop     http://www.springframework.org/schema/aop/spring-aop.xsd     http://www.springframework.org/schema/util     http://www.springframework.org/schema/util/spring-util.xsd     http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数据存储相关：<br>  1、包扫描配合@Repository注解（对dao的实现类要手动添加，MapperScannerConfigurer不会自动添加）<br>  2、mapper自动扫描器MapperScannerConfigurer<br>  3、SqlSessionFactory创建（依靠SqlSessionFactoryBean类）<br>  4、数据库线程池druid<br>  5、线程池相关配置property对象的引入</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">util:</span>properties</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cfg<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:db.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">util:</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{cfg.jdbcDriver}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{cfg.jdbcUrl}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{cfg.jdbcUser}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{cfg.jdbcPassword}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath*:mapper/sys/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>daoScanner<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.db.sys.**.dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.db.sys.dao.Impl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>业务层相关：服务层包扫描配合@Service注解</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.db.sys.service<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>web访问相关：<br>  1、包扫描==》Controller类<br>  2、视图解析器InternalResourceViewResolver配置<br>  3、静态资源访问mvc:default-servlet-handler==》》tomcat默认配置原因，对html文件的转发问题，需要添加此配置。<br>  4、访问返回资源格式转发及mvc请求转发mvc:annotation-driven，会自动注册jackson格式转换，RequestMappingHandlerMapping以及RequestMappingHandlerAdapter便于DispatcherServlet前端控制器的资源转发。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.db.sys.controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="/images/ssm/springmvcRunDiagram.png" alt="springmvc控制示意图"><br><img src="/images/ssm/allConfiguration.png" alt="spring配置总体流程"><br><strong>注意：</strong>框架总体来讲就是接口耦合，然后由spring来注入默认的实现类</p><ul><li>最后将配置导入一个总体的spring配置文件spring-config，由此文件将spring配置交给web.xml，由前端控制器来控制资源的配套使用。<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spring-web.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spring-service.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spring-reporitory.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解"></a>常见注解</h3><table><thead><tr><th>注解</th><th>作用</th><th>作用域</th></tr></thead><tbody><tr><td>@RequestMapping(String path)</td><td>注册@Controller类的handler类映射key</td><td>类——父路径，方法都会加上此path，方法</td></tr><tr><td>@PostMapping</td><td>注册Post方式的请求mapper映射key</td><td>方法</td></tr><tr><td>@GetMapping</td><td>注册get方式的请求key</td><td>方法</td></tr><tr><td>@ResponseBody</td><td>方法返回值作为服务返回值，不转发到视图解析器</td><td>方法</td></tr><tr><td>@ResController</td><td>@Controller+@ResponseBody结合，类下所有方法都不转发到视图解析器，方法返回值作为结果</td><td>类</td></tr><tr><td>@Qualifier(Sting beanKey)</td><td>与@Autowired结合使用，指定同一个接口多个实现类的情况下，具体注入的实体类</td><td>类、方法、成员变量</td></tr><tr><td>@RequestParam(String ParamName)</td><td>自动解析请求带的同名参数至对应类型的方法形参上</td><td>方法形参</td></tr><tr><td>@ControllerAdvice</td><td>处理整个Controller类上的异常（理解为拦截器？），配合@ExceptionHandler使用</td><td>类</td></tr><tr><td>@ExceptiontionHandler(Class<Exception> cls)</td><td>统一处理某种类型的异常（根据cls来）</td><td>方法</td></tr><tr><td>@Param(String mapkey)</td><td>将此形参的值封装至mapkey为key的参数map中</td><td>方法形参前</td></tr></tbody></table></li></ul><p><strong>总结：</strong><br>1、框架接口耦合，spring自动DI实现类<br>2、业务层接口自定义，可调用多个dao接口实现业务<br>3、定义业务实体类，封装业务查询到的结果<br>4、定义返回值实体类，封装查询业务值（包含状态码，massage，数据等信息）<br>5、定义Contoller类的全局异常处理类，统一处理异常<br>6、根据业务自定义异常，便于捕获自定义特殊异常</p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="报错找不到bean"><a href="#报错找不到bean" class="headerlink" title="报错找不到bean"></a>报错找不到bean</h3><blockquote><p>1、可能是注册的类名与获取的不一致<br>  2、可能是做接口依赖，实现DI时注入的实现类不是申明的实现类===》没有继承声明类。</p></blockquote><h3 id="mybatis报没有getter错误"><a href="#mybatis报没有getter错误" class="headerlink" title="mybatis报没有getter错误"></a>mybatis报没有getter错误</h3><blockquote><p>检查对应实体类entity中的属性名称是否和xml配置文件的列名称相同</p></blockquote><h3 id="mybatis报Parameter过多。"><a href="#mybatis报Parameter过多。" class="headerlink" title="mybatis报Parameter过多。"></a>mybatis报Parameter过多。</h3><blockquote><p>Parameter index out of range (11 &gt; number of parameters, which is 10).===》》》检查xml的sql语句中是否有注释，去掉即可。</p></blockquote><h3 id="对象的getter、setter"><a href="#对象的getter、setter" class="headerlink" title="对象的getter、setter"></a>对象的getter、setter</h3><p>序列化对象和json转换时，需要用到getter、setter，因此需要提前设定好，不能为空。</p><h3 id="dao和xml文件"><a href="#dao和xml文件" class="headerlink" title="dao和xml文件"></a>dao和xml文件</h3><blockquote><p>mapper.xml文件的名称和dao接口名称可以不一致，（要根据xml的namespace来），但是获取bean对象必须的名称首字母要小写===》》设定的mapperScannerConfigurer自动将首字母小写注册成管理的bean对象。</p></blockquote><h3 id="单个参数提示没有getter-setter"><a href="#单个参数提示没有getter-setter" class="headerlink" title="单个参数提示没有getter/setter"></a>单个参数提示没有getter/setter</h3><blockquote><p>添加@Param(参数名称)</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Order <span class="token function">orderFindById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> Integer <span class="token function">orderDeleteById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="sql的下划线变量名和java的驼峰"><a href="#sql的下划线变量名和java的驼峰" class="headerlink" title="sql的下划线变量名和java的驼峰"></a>sql的下划线变量名和java的驼峰</h3><blockquote><p>修改对应mapper:读取和存储使用别名取值。</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 读取 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cols<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>o.id,door_id doorId,order_no orderNo,order_type orderType,pnum,cashier,order_time orderTime,pay_time payTime,pay_type payType,price<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderFindById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Order<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cols<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> from tb_order o left join tb_door d on o.door_id=d.id    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            having o.id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 存贮 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderUpdateById<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update tb_order     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> doorId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            door_id=#{doorId},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> orderNo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            order_no=#{orderNo},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> orderType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            order_type=#{orderType},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> pnum<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            pnum=#{pnum},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> cashier<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            cashier=#{cashier},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> orderTime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            order_time=#{orderTime},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> payType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            pay_type=#{payType},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> payTime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            pay_time=#{payTime},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> price<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            price=#{price},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            id=#{id}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通用（默认）路径设置"><a href="#通用（默认）路径设置" class="headerlink" title="通用（默认）路径设置"></a>通用（默认）路径设置</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"{page}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">page</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String page<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> page<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sql错误access-denied-for-user-‘root’-’localhost’"><a href="#sql错误access-denied-for-user-‘root’-’localhost’" class="headerlink" title="sql错误access denied for user ‘root’@’localhost’"></a>sql错误access denied for user ‘root’@’localhost’</h3><blockquote><p>多半是数据库的连接时用户名或密码错误，检查jdbc的配置文件中<strong>username、password关键词</strong>，修改名称即可</p></blockquote><h3 id="no-such-bean-inXXX，not-Availa。。。"><a href="#no-such-bean-inXXX，not-Availa。。。" class="headerlink" title="no such bean inXXX，not Availa。。。"></a>no such bean inXXX，not Availa。。。</h3><blockquote><p>检查名称是否注册正确（第一个字母小写），检查是否配置了扫描该包。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;配置路径：添加WEB-INF/web.xml文件，配置springmvc-config.xml和applicati</summary>
      
    
    
    
    <category term="java" scheme="https://hyong1232.github.io/categories/java/"/>
    
    
    <category term="SSM框架整合" scheme="https://hyong1232.github.io/tags/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>springMVC小结</title>
    <link href="https://hyong1232.github.io/2021/02/21/springmvc-xiao-jie/"/>
    <id>https://hyong1232.github.io/2021/02/21/springmvc-xiao-jie/</id>
    <published>2021-02-21T05:58:29.000Z</published>
    <updated>2021-05-05T06:59:33.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>springMVC是spring的一个基于servlet的一个web框架模块，用于开发web应用，主要由Dispatcher Servlet、ModelAndView、ViewRouter三部分组成，解决了多个接口对应多个servlet的问题，一个servlet对应所有接口访问。</p></blockquote><h2 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.noah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springMVCDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 添加json依赖的依赖jackson，便于返回json数据 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.codehaus.jackson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core-asl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.codehaus.jackson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-mapper-asl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 单元测试 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- springMVC的jar包 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- servlet 和 jsp的jar包 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><blockquote><p>在webapps下新建配置文件和文件夹：/WEB-INF/web.xml，并添加以下配置</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span>    <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 导航栏标题 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>springMVCDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 首页 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>default.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>default.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>default.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置DispatcherServlet和其他mvc相关配置位置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc-config.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置CharacterEncodingFilter的编码格式，防止post提交的乱码 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>mvc配置,在source文件夹下创建即可<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc                      http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd                      http://www.springframework.org/schema/beans                      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd                      http://www.springframework.org/schema/context                        http://www.springframework.org/schema/context/spring-context-4.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 1.配置前端控制器放行静态资源(html/css/js等，否则静态资源将无法访问) --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 2.配置注解驱动，用于识别注解（比如@Controller） --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 3.配置需要扫描的包：spring自动去扫描 base-package 下的类，      如果扫描到的类上有 @Controller、@Service、@Component等注解，      将会自动将类注册为bean    --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 4.配置内部资源视图解析器      prefix:配置路径前缀      suffix:配置文件后缀   --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><blockquote><p>通过@controller注解表名类在controller层，@RequestMapping(“/路径名称”)对应路径访问的处理方法。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> controller<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>propertyeditors<span class="token punctuation">.</span>CustomDateEditor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>Model<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>ModelMap<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>ServletRequestDataBinder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>InitBinder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">;</span><span class="token keyword">import</span> pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">detalHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"spring-mvc request successfully!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ModelMap msp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/entry"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">detalRequestEntry</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user:"</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"forward:/hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/post"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">detalPostEncoding</span><span class="token punctuation">(</span>String user<span class="token punctuation">,</span>String like<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user:"</span><span class="token operator">+</span>user<span class="token operator">+</span><span class="token string">"like:"</span><span class="token operator">+</span>like<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/date"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">detalDateFormat</span><span class="token punctuation">(</span>Date date<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Date:"</span><span class="token operator">+</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/request"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">detalRequest</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span> <span class="token string">"通过request添加属性值成功！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/model"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">detalModel</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"model"</span><span class="token punctuation">,</span> <span class="token string">"通过mvc的model传递属性值至jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@InitBinder</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">InitBinder</span><span class="token punctuation">(</span>ServletRequestDataBinder binder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        binder<span class="token punctuation">.</span><span class="token function">registerCustomEditor</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                 <span class="token keyword">new</span> <span class="token class-name">CustomDateEditor</span><span class="token punctuation">(</span>                        <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/json"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">detalResponseBodyJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        User u = new User(1002, "张三");</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="转发到jsp的四种方式"><a href="#转发到jsp的四种方式" class="headerlink" title="转发到jsp的四种方式"></a>转发到jsp的四种方式</h2><h3 id="默认方式"><a href="#默认方式" class="headerlink" title="默认方式"></a>默认方式</h3><blockquote><p>return String默认就是查找对应String名称的jsp来进行数据的处理</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">detalHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"spring-mvc request successfully!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ModelMap msp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="redirect-路径名"><a href="#redirect-路径名" class="headerlink" title="redirect:/+路径名"></a>redirect:/+路径名</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/post"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">detalPostEncoding</span><span class="token punctuation">(</span>String user<span class="token punctuation">,</span>String like<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user:"</span><span class="token operator">+</span>user<span class="token operator">+</span><span class="token string">"like:"</span><span class="token operator">+</span>like<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>post乱码问题可通过配置web.xml的CharacterEncodingFilter类解决</p><h3 id="forward-路径名"><a href="#forward-路径名" class="headerlink" title="forward:/+路径名"></a>forward:/+路径名</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/entry"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">detalRequestEntry</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user:"</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"forward:/hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转发到对应方法"><a href="#转发到对应方法" class="headerlink" title="转发到对应方法"></a>转发到对应方法</h3><blockquote><p>可以return对应方法。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/doorList"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">doorList</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Door<span class="token operator">></span> list <span class="token operator">=</span> doorService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Door door <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>door<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"door_list"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/doorAdd"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">doorAdd</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>String addr<span class="token punctuation">,</span>String tel<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Door doorItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Door</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> name<span class="token punctuation">,</span> tel<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer rows <span class="token operator">=</span> doorService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>doorItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//转发到对应方法</span>    <span class="token keyword">return</span> <span class="token function">doorList</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注解方式使用mvc"><a href="#注解方式使用mvc" class="headerlink" title="注解方式使用mvc"></a>注解方式使用mvc</h2><blockquote><p>springmvc的加载方式有两种，一种是通过配置文件xml，另一种注解方式，利用了mvc的文件加载在配置了没有web.xml时，默认读取spring-web依赖文件下的META-INF/services/javax.servlet.ServletContainerInitializer类的特性。</p></blockquote><p><img src="/images/springMVC/ServletContainerInitializer.png" alt="ServletContainerInitializer文件位置"><br><img src="/images/springMVC/twoLoadType.png" alt="springmvc的两种加载配置方式"></p><ul><li>xml配置文件：WEB-INF下web.xml配置DispatcherServlet和对应的映射路径，读取配置文件springmvc-config中的配置，例如：controller包管理、静态资源访问控制、视图解析器ViewResolver、mvc自动注册注解配置等。</li></ul><p><img src="/images/springMVC/springmvcRunDetail.png" alt="mvc的解析大体过程"></p><ul><li>注解加载的方式，利用了mvc的文件加载在配置了没有web.xml时，默认读取spring-web依赖文件下的META-INF/services/javax.servlet.ServletContainerInitializer类，此类会自动加载Spring框架的SpringServletContainerInitializer类，而这个initializer又会自动加载WebApplicationInitializer以及它的实现类的特性，我们只需要继承WebApplicationInitializer类即可完成替代web.xml文件。</li></ul><p><img src="/images/springMVC/springmvcAnnotationTypeRun.png" alt="注解方式使用mvc大致过程"></p><p>1、首先在pom.xml文件中设置忽略web.xml文件的检查（可以为空）,即设置buil标签（与dependencies平级）。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-war-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filteringDeploymentDescriptors</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filteringDeploymentDescriptors</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、添加容器类，以此类来替代sprigmvc-config.xml文件的作用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"controller"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">springmvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureViewResolvers</span><span class="token punctuation">(</span>ViewResolverRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">jsp</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/pages/"</span><span class="token punctuation">,</span> <span class="token string">".html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、添加自定义WebApplicationInitializer实现类（因为AbstractAnnotationConfigDispathcherServletInitializer类实现了大部分的WebAplicationInitializer类的方法，所以继承它），重写url-handler处理，springmvc-config文件配置，以及spring上下文的配置方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppWebApplicationInitalizer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>springmvcConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"*.do"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="Date类型的-连接符传值报错"><a href="#Date类型的-连接符传值报错" class="headerlink" title="Date类型的-连接符传值报错"></a>Date类型的-连接符传值报错</h3><blockquote><p>添加@InitBinder，创建自定义时间解析日期</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@InitBinder</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">InitBinder</span><span class="token punctuation">(</span>ServletRequestDateBinder binder<span class="token punctuation">)</span><span class="token punctuation">{</span>    binder<span class="token punctuation">.</span><span class="token function">registerCustomEditor</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">.</span>calss<span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CustomDateEditor</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong><br>1、日期格式的设定要和传入的格式相同，否则报错，例如只穿年月日，就只要设定年月日的格式，否则报错。<br>2、默认的时间间隔标识符为/</p><h3 id="返回json数据报错"><a href="#返回json数据报错" class="headerlink" title="返回json数据报错"></a>返回json数据报错</h3><blockquote><p>未添加json转换数据====&gt;&gt;添加jackson转换jar包即可</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.codehaus.jackson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core-asl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.codehaus.jackson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-mapper-asl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/json"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">detalResponseBodyJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ArrayList<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;springMVC是spring的一个基于servlet的一个web框架模块，用于开发web应用，主要由Dispa</summary>
      
    
    
    
    <category term="java" scheme="https://hyong1232.github.io/categories/java/"/>
    
    
    <category term="springMVC" scheme="https://hyong1232.github.io/tags/springMVC/"/>
    
  </entry>
  
  <entry>
    <title>spring使用</title>
    <link href="https://hyong1232.github.io/2021/02/21/spring-shi-yong/"/>
    <id>https://hyong1232.github.io/2021/02/21/spring-shi-yong/</id>
    <published>2021-02-21T05:58:03.000Z</published>
    <updated>2021-05-01T07:38:19.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring简介"><a href="#spring简介" class="headerlink" title="spring简介"></a>spring简介</h2><p>Spring框架就像一个家族，有众多衍生产品例如boot、security、jpa等等。但他们的基础都是Spring的ioc和aop。ioc提供了依赖注入的容器，aop解决了面向横切面的编程；</p><p><img src="/images/spring/springWork.png" alt="spring工作示意图"><br><img src="/images/spring/springProduct.png" alt="spring产品架构"><br><img src="/images/spring/springFramwork.png" alt="spring技术架构"><br><img src="/images/spring/springApi.png" alt="springApi示意图"></p><h2 id="添加项目依赖"><a href="#添加项目依赖" class="headerlink" title="添加项目依赖"></a>添加项目依赖</h2><ul><li>直接复制相应jar包</li><li>通过maven修改pom.xml配置文件<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.noah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>SpringDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 单元测试 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 整合log4j --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- Servlet/JSP/JSTL --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 整合spring框架（包含springmvc） 这个jar文件包含springmvc开发时的核心类, 同时也会将依赖的相关jar文件引入进来(spring的核心jar文件也包含在内) --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--这个jar文件包含对Spring对JDBC数据访问进行封装的所有类 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 整合mybatis框架 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- mysql驱动 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- druid连接池 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h2><blockquote><p>将创建和销毁对象的控制权交给spring容器来完成，用户不必再自行创建和销毁对象，只要在对应的配置文件中配置好即可。<br>优点是可以解耦模块的依赖程度.<br>主要通过文件遍历读取和反射实现对象管理</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>single<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Stu<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--     &lt;bean id="stu" scope="prototype" class="pojo.Stu" > --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1005<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userInfo<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userInfo<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userInfo<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.userInfo<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在maven工程的source下新建applicationContext.xml即可。</p><h2 id="DI依赖注入"><a href="#DI依赖注入" class="headerlink" title="DI依赖注入"></a>DI依赖注入</h2><blockquote><p>在创建了对象之后要进行对象的属性的相关配置就用到了依赖注入，依赖注入属性的方式有两种。</p></blockquote><ul><li>通过构造方法注入依赖<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userInfo<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.userInfo<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- &lt;property name="name" value="" >&lt;/property> --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>捷克夹<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>通过对象属性的getter/setter方法来实现<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Stu<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--     &lt;bean id="stu" scope="prototype" class="pojo.Stu" > --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1005<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userInfo<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userInfo<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>1、bean标签的属性name对应要管理对象的属性名称，value对应要设置的属性名称，ref表示引用另一个管理的bean标签对象。<br>2、通过spring管理的javaBean对象标签上的scope属性代表了管理模式，singleton表示单例模式，即只创建一个对象，这样有线程安全的问题，对于公共数据要加锁。<br>3、通过设置bean标签的scope为prototype可以改变单例模式，变成引用一次创建一次对象，会有资源浪费的问题。</li></ul><h2 id="注解方式实现Ioc管理"><a href="#注解方式实现Ioc管理" class="headerlink" title="注解方式实现Ioc管理"></a>注解方式实现Ioc管理</h2><blockquote><p>由AnnotationConfigApplicationContext类创建对象，获取IOC容器管理的对象。</p></blockquote><table><thead><tr><th>注解</th><th>作用对象</th><th>释义</th></tr></thead><tbody><tr><td>@Controller</td><td>类</td><td>标记类为Controller类，业务bean对象，交给spring的Ioc容器管理</td></tr><tr><td>@Service[(String name)]</td><td>类</td><td>标记类为service类，数据操作bean对象爱国你，交给spring的Ioc容器管理</td></tr><tr><td>@Repository[(String name)]</td><td>类</td><td>标记类为Repository类，数据存储bean对象，交给spring的Ioc容器管理</td></tr><tr><td>@Component[(String name)]</td><td>类</td><td>标记类为Component类，普通bean对象，交给spring的Ioc容器管理</td></tr><tr><td>@Bean(valu = “name”,init-method=””,…property)</td><td>方法</td><td>将方法的返回值对象交给spring的Ioc容器管理</td></tr><tr><td>@Autowired</td><td>set方法、构造方法、成员变量、其他方法</td><td>自动将所需要的值从IOC容器中查找到并注入标记的对象中</td></tr><tr><td>@PostContruct</td><td>方法</td><td>表示将标记的方法放置在构造函数之后自动执行，相当于xml的init-method标记的方法</td></tr><tr><td>@ComponentScan</td><td>类</td><td>加载配置类上，默认的值表示要扫描的包路径（String []，可以是单个String）</td></tr><tr><td>@lazy</td><td>方法</td><td>与@Bean注解结合表示是否要懒加载，默认值是true</td></tr></tbody></table><ul><li>整合外部资源@Bean注解<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"entries"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Lazy</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token punctuation">,</span>initMethod <span class="token operator">=</span> <span class="token string">"init"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//等效于@Controller\@Service等注解</span>  <span class="token keyword">public</span> DruidDataSource <span class="token function">generateDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      DruidDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///jt_db?characterEncoding=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>注意：</strong>可以不用与@ComponentScan结合使用</p><ul><li><p>自定义存储类@ComponentScan+@Component+@postConstruct，<strong>存储类的读写要考虑线程安全的问题（单例模式，加锁）</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"cache"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LruCacheDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Cache</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> cache<span class="token punctuation">;</span>  <span class="token keyword">private</span> Integer maxCap <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    不能使用有参构造</span><span class="token comment" spellcheck="true">//    public LruCacheDemo(int maxCap){</span><span class="token comment" spellcheck="true">//        this.maxCap = maxCap;</span><span class="token comment" spellcheck="true">//    }</span>  <span class="token annotation punctuation">@PostConstruct</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span>maxCap<span class="token punctuation">,</span> <span class="token number">0.75f</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>maxCap<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>      cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"LruCacheDemo{"</span> <span class="token operator">+</span>              <span class="token string">"cache="</span> <span class="token operator">+</span> cache <span class="token operator">+</span>              <span class="token string">'}'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自定义操作数据类@ComponentScan+@Repository+@Autowired</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">"searchDao"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultSearchDao</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> Cache cache<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> DataSource datasource<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"DefaultSearchDao{"</span> <span class="token operator">+</span>              <span class="token string">"cache="</span> <span class="token operator">+</span> cache <span class="token operator">+</span>              <span class="token string">", datasource="</span> <span class="token operator">+</span> datasource <span class="token operator">+</span>              <span class="token string">'}'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCache</span><span class="token punctuation">(</span>Cache cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> cache<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDatasource</span><span class="token punctuation">(</span>DataSource datasource<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>datasource <span class="token operator">=</span> datasource<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="springIOC核心原理"><a href="#springIOC核心原理" class="headerlink" title="springIOC核心原理"></a>springIOC核心原理</h2><ul><li>Bean对象创建过程xml方式<blockquote><p>通过ResourceLoader加载读取的流，与new SqlSessionFactory.Build()以及DocumentBuildFactory.newInstance().newDocumentBuilder().parse()类似。然后通过BeandefinitionReader,将封装定义信息至map&lt;String key,Object BeanDefinition&gt;，并将此map交给Beanfactory对象。</p></blockquote></li></ul><p><img src="/images/spring/Beanfactory.png" alt="spring初始化过程"></p><ul><li>IOC容器map两大map对象</li></ul><p><img src="/images/spring/xmlCreate.png" alt="xml方式"><br><img src="/images/spring/annotationCreate.png" alt="注解方式"></p><ul><li>Bean对象的创建方式：实现了FactoryBean接口的使用getObject方法创建，未实现FacotryBean接口则使用构造方法。</li></ul><p><img src="/images/spring/beanCreatMethod.png" alt="Bean对象创建方式"></p><p><strong>说明：</strong>一般在创建一些相对复杂的工厂对象时，通常会写一个工厂bean对象，然后基于工厂bean对象创建具体的工厂对象，例如SqlSessionFactoryBean,ShiroFilterFactoryBean，ProxyFactoryBean等。</p><ul><li>IOC依赖注入项目中的体现</li></ul><p><img src="/images/spring/projectDIDiagram.png" alt="项目中的依赖注入体现"></p><p><strong>注意：</strong>在项目中为了解耦合，对象直接通过接口进行通信，即对象耦合于接口(@Autowired自动注入)</p><p><img src="/images/spring/ObjectInterfaceCommunication.png" alt="对象和接口的耦合"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;spring简介&quot;&gt;&lt;a href=&quot;#spring简介&quot; class=&quot;headerlink&quot; title=&quot;spring简介&quot;&gt;&lt;/a&gt;spring简介&lt;/h2&gt;&lt;p&gt;Spring框架就像一个家族，有众多衍生产品例如boot、security、jpa等等。但他</summary>
      
    
    
    
    <category term="java" scheme="https://hyong1232.github.io/categories/java/"/>
    
    
    <category term="spring" scheme="https://hyong1232.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>mybatis小结</title>
    <link href="https://hyong1232.github.io/2021/02/16/mybatis-xiao-jie/"/>
    <id>https://hyong1232.github.io/2021/02/16/mybatis-xiao-jie/</id>
    <published>2021-02-16T02:43:34.000Z</published>
    <updated>2021-05-05T07:02:11.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>mybatis的使用主要分为两种两种方式：1、xml+java逻辑2、在java文件里面使用注解。<br>这两种方式各有好坏，xml的好处是可以实现代码和sql分离，避免重新编译发布。注解则相对简单，坏处是注解在代码内部,如需要修改则要修改java源码，需要重新编译发布到服务器上。</p></blockquote><ul><li><p>xml文件方式使用mybatis</p><h3 id="添加对应的依赖包"><a href="#添加对应的依赖包" class="headerlink" title="添加对应的依赖包"></a>添加对应的依赖包</h3><blockquote><p>maven项目直接在pom.xml里的dependencies==&gt;&gt;dependency添加对应依赖选项</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>project xmlns<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0"</span>  xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>  xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>modelVersion<span class="token operator">></span><span class="token number">4.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>modelVersion<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>noah<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>MybatisTest<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>SNAPSHOT<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>  <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>      <span class="token operator">&lt;</span>dependency<span class="token operator">></span>          <span class="token operator">&lt;</span>groupId<span class="token operator">></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>          <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>          <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.1</span><span class="token punctuation">.</span><span class="token number">32</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>dependency<span class="token operator">></span>          <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>mybatis<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>          <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mybatis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>          <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.2</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>dependency<span class="token operator">></span>          <span class="token operator">&lt;</span>groupId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>          <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>          <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.10</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>dependency<span class="token operator">></span>          <span class="token operator">&lt;</span>groupId<span class="token operator">></span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>          <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>          <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">17</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在项目根目录添加sqlMapConfig-xml文件"><a href="#在项目根目录添加sqlMapConfig-xml文件" class="headerlink" title="在项目根目录添加sqlMapConfig.xml文件"></a>在项目根目录添加sqlMapConfig.xml文件</h3><blockquote><p>java项目在src下，maven项目在src/main/resources下</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE configuration  PUBLIC <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>  <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>configuration<span class="token operator">></span>  <span class="token operator">&lt;</span>properties resource<span class="token operator">=</span><span class="token string">"jdbc.properties"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">></span>  <span class="token operator">&lt;</span>environments <span class="token keyword">default</span><span class="token operator">=</span><span class="token string">"develop"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>environment id<span class="token operator">=</span><span class="token string">"develop"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>transactionManager type<span class="token operator">=</span><span class="token string">"JDBC"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>transactionManager<span class="token operator">></span>          <span class="token operator">&lt;</span>dataSource type<span class="token operator">=</span><span class="token string">"Pooled"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driver"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.driver}"</span><span class="token operator">/</span><span class="token operator">></span>              <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.url}"</span><span class="token operator">/</span><span class="token operator">></span>              <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.username}"</span><span class="token operator">/</span><span class="token operator">></span>              <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.password}"</span><span class="token operator">/</span><span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driver"</span> value<span class="token operator">=</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token operator">/</span><span class="token operator">></span>              <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"jdbc:mysql:///jt_db?characterEncoding=utf-8&amp;amp;serverTimezone=GMT"</span><span class="token operator">/</span><span class="token operator">></span>              <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">/</span><span class="token operator">></span>              <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">/</span><span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>dataSource<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>environment<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>environments<span class="token operator">></span>  <span class="token operator">&lt;</span>mappers<span class="token operator">></span>      <span class="token operator">&lt;</span>mapper resource<span class="token operator">=</span><span class="token string">"Mapper/StuMapper.xml"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>mappers<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建要操作的表的对应实体类"><a href="#创建要操作的表的对应实体类" class="headerlink" title="创建要操作的表的对应实体类"></a>创建要操作的表的对应实体类</h3><blockquote><p>类的成员变量要和表的列名相同（尽量使用<strong>包装类</strong>声明，避免未赋值时0默认作为默认值），maven项目放置到java目录下</p></blockquote><h3 id="创建实体对应的xml文件"><a href="#创建实体对应的xml文件" class="headerlink" title="创建实体对应的xml文件"></a>创建实体对应的xml文件</h3><blockquote><p>文件名称为：实体+Mapper.xml（maven项目放置到resources目录下，java项目和对应实体在同一个包下）</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE mapper  PUBLIC <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>  <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"dao.StuMapper"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>sql id<span class="token operator">=</span><span class="token string">"cols"</span><span class="token operator">></span>      id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>addr<span class="token punctuation">,</span>score  <span class="token operator">&lt;</span><span class="token operator">/</span>sql<span class="token operator">></span>  <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findSome"</span> resultType<span class="token operator">=</span><span class="token string">"entries.Stu"</span><span class="token operator">></span>      select <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"cols"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>include<span class="token operator">></span> from stu      <span class="token operator">&lt;</span>where<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"null != target"</span><span class="token operator">></span>              name like <span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"%"</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>target<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"%"</span><span class="token punctuation">)</span>          <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>  <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findAll"</span>  resultType<span class="token operator">=</span><span class="token string">"entries.Stu"</span> <span class="token operator">></span>      select       <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"cols"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>include<span class="token operator">></span>      from stu  <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>  <span class="token operator">&lt;</span>update id<span class="token operator">=</span><span class="token string">"addRecords"</span><span class="token operator">></span>      insert into stu <span class="token function">values</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span>#<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>gender<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>addr<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>score<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>update<span class="token operator">></span>  <span class="token operator">&lt;</span>update id<span class="token operator">=</span><span class="token string">"modifyRecords"</span><span class="token operator">></span>      update stu set name<span class="token operator">=</span>#<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span>gender<span class="token operator">=</span>#<span class="token punctuation">{</span>gender<span class="token punctuation">}</span> where id<span class="token operator">=</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>update<span class="token operator">></span>  <span class="token operator">&lt;</span>delete id<span class="token operator">=</span><span class="token string">"deleteRecords"</span><span class="token operator">></span>      delete from stu where id<span class="token operator">=</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>delete<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> select $<span class="token punctuation">{</span>search<span class="token punctuation">}</span> from stu where name like <span class="token string">"%"</span>#<span class="token punctuation">{</span>orderType<span class="token punctuation">}</span><span class="token string">"%"</span> <span class="token operator">--</span><span class="token operator">></span>       select $<span class="token punctuation">{</span>search<span class="token punctuation">}</span> from stu where score between #<span class="token punctuation">{</span>start<span class="token punctuation">}</span> and #<span class="token punctuation">{</span>end<span class="token punctuation">}</span> order by $<span class="token punctuation">{</span>order<span class="token punctuation">}</span> $<span class="token punctuation">{</span>orderType<span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>         select $<span class="token punctuation">{</span>search<span class="token punctuation">}</span> from stu where score between #<span class="token punctuation">{</span>start<span class="token punctuation">}</span> and #<span class="token punctuation">{</span>end<span class="token punctuation">}</span> order by <span class="token function">concat</span><span class="token punctuation">(</span>#<span class="token punctuation">{</span>order<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">" "</span> <span class="token punctuation">,</span>#<span class="token punctuation">{</span>orderType<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>  <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findScore"</span> resultType<span class="token operator">=</span><span class="token string">"entries.Stu"</span><span class="token operator">></span>      select <span class="token operator">*</span> from stu       <span class="token operator">&lt;</span>where<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"null != minScore"</span><span class="token operator">></span>              score <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>CDATA<span class="token punctuation">[</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span> #<span class="token punctuation">{</span>minScore<span class="token punctuation">}</span>          <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"null != maxScore"</span><span class="token operator">></span>              and score <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>CDATA<span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span> #<span class="token punctuation">{</span>maxScore<span class="token punctuation">}</span>          <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>  <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"updateRecords"</span> resultType<span class="token operator">=</span><span class="token string">"entries.Stu"</span> <span class="token operator">></span>      update stu       <span class="token operator">&lt;</span>set<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"null != name"</span><span class="token operator">></span>              name<span class="token operator">=</span>#<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"null != gender"</span><span class="token operator">></span>              gender<span class="token operator">=</span>#<span class="token punctuation">{</span>gender<span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>set<span class="token operator">></span>      where id<span class="token operator">=</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>  <span class="token operator">&lt;</span>delete id<span class="token operator">=</span><span class="token string">"deleteMultiRecords"</span><span class="token operator">></span>      delete from stu       <span class="token operator">&lt;</span>where<span class="token operator">></span>          id in          <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">"array"</span> item<span class="token operator">=</span><span class="token string">"item"</span>  open<span class="token operator">=</span><span class="token string">"("</span> close<span class="token operator">=</span><span class="token string">")"</span> separator<span class="token operator">=</span><span class="token string">","</span> <span class="token operator">></span>              #<span class="token punctuation">{</span>item<span class="token punctuation">}</span>          <span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>delete<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加java逻辑程序"><a href="#添加java逻辑程序" class="headerlink" title="添加java逻辑程序"></a>添加java逻辑程序</h3></li><li><p>获取sqlSessionFactory对象</p></li><li><p>通过SqlSessionFactory对象获取sqlSession对象</p></li><li><p>通过sqlSession对象的update、select等方法执行sql</p></li><li><p>如果是修改了表的内容需要使用sqlSession对象提交修改内容</p><pre class="line-numbers language-java"><code class="language-java">InputStream is <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"sqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>SqlSession ss <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Stu<span class="token operator">></span> list <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"dao.StuMapper.findAll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Stu stu <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="添加junit和log4j以及jdbc配置文件"><a href="#添加junit和log4j以及jdbc配置文件" class="headerlink" title="添加junit和log4j以及jdbc配置文件"></a>添加junit和log4j以及jdbc配置文件</h3><ul><li>在pom.xml中添加对应的包文件，见上方pom文件</li><li>在项目上右键buildpath==&gt;&gt;add library==&gt;&gt;junit4（5容易出问题）</li><li>在项目的resources文件夹下新建log4j.properties和jdbc.properties文件，添加以下配置文件<pre class="line-numbers language-xml"><code class="language-xml"># jdbc配置文件jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql:///jt_db?characterEncoding=utf-8&amp;serverTimezone=GMTjdbc.username=rootjdbc.password=root# log4j配置文件# Global logging configurationlog4j.rootLogger=DEBUG, stdout# Console output...log4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%5p [%t]  %m%n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>修改sqlMapConfig.xml文件，使用${}（非el也非占位符）添加properties标签，修改dateSource标签值标签<pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driver"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.driver}"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.url}"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.username}"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.password}"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="FAQ常见问题"><a href="#FAQ常见问题" class="headerlink" title="FAQ常见问题"></a>FAQ常见问题</h3></li><li>xml配置文件不出现提示<br>1、找对应的dtd文件下载地址，并下载dtd文件。</li></ul><p><img src="/images/dtdUrl.png" alt="获取dtd文件下载路径"></p><p>2、添加到xml catalog：window==&gt;&gt;properties==&gt;&gt;xml catalog==&gt;&gt;add==&gt;&gt;catalog entry将下载的对应dtd文件添加<br>3、然后将key type选为url，key值为之前下载dtd文件的路径不要http或https头，保存并应用即可。<br><img src="/images/dtdSetting.png" alt="eclipse添加dtd文件提示"></p><ul><li>&lt;和&gt;、&amp;等符号在xml文件中辨识失败。<table><thead><tr><th>符号</th><th>替换的符号</th></tr></thead><tbody><tr><td>&amp;</td><td>&amp;amp;</td></tr><tr><td>&lt;|&gt;</td><td>&lt;![ADATA[&lt;|&gt;]&gt;]</td></tr></tbody></table></li></ul><h2 id="和"><a href="#和" class="headerlink" title="${}和#{}"></a>${}和#{}</h2><blockquote><p>都可以实现sql内容变量的替换，${}是直接替换占位内容，#{}是替换成’替换内容’的形式<br>#{}较${}安全，使用jdbc的preparedStatement对象进行预编译，防止sql注入，尽量使用#{},用concat函数or””连接实现替换${}。<br>${}常见用于不可预编译的sql对象，例如动态表名、排序规则等。</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml">select ${search} from stu where name like "%"#{orderType}"%"select ${search} from stu where score between #{start} and #{end} order by ${order} ${orderType}select ${search} from stu where score between #{start} and #{end} order by concat(#{order}," " ,#{orderType})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="传入参数"><a href="#传入参数" class="headerlink" title="传入参数"></a>传入参数</h3><blockquote><p>#{}/${}参数可以接受三种形式，即字符串（不推荐，有时失效），map以及实体类对象（有getter和setter方法）</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//字符串方式</span><span class="token keyword">int</span> rows <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>mapperLocationStr<span class="token operator">+</span><span class="token string">"deleteRecords"</span><span class="token punctuation">,</span><span class="token string">"1002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//map方式</span>StuMapper mapper <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StuMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"target"</span><span class="token punctuation">,</span> <span class="token string">"刘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Stu<span class="token operator">></span> list <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findSome</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实体类方式</span>Stu stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stu</span><span class="token punctuation">(</span><span class="token string">"刘能"</span><span class="token punctuation">,</span><span class="token number">1004</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token number">86d</span><span class="token punctuation">,</span> <span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> rows <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>mapperLocationStr<span class="token operator">+</span><span class="token string">"addRecords"</span><span class="token punctuation">,</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h2><blockquote><p>可以根据传入参收动态改变sql的内容的标签方法。</p></blockquote><h3 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h3><blockquote><p>test属性内可以使用条件判定</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> minScore<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    score <span class="token cdata">&lt;![CDATA[>]]></span> #{minScore}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="where标签"><a href="#where标签" class="headerlink" title="where标签"></a>where标签</h3><blockquote><p>代替sql关键字where，可以自动添加，删除连接条件关键字</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml">select * from stu <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> minScore<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        score <span class="token cdata">&lt;![CDATA[>]]></span> #{minScore}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> maxScore<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and score <span class="token cdata">&lt;![CDATA[&lt;]]></span> #{maxScore}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set标签"><a href="#set标签" class="headerlink" title="set标签"></a>set标签</h3><blockquote><p>代替sql关键字set，自动判定连接符,<strong>连接符要西在列名称后面</strong></p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateRecords<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entries.Stu<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    update stu     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            name=#{name},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> gender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            gender=#{gender},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    where id=#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sql及其他标签应用"><a href="#sql及其他标签应用" class="headerlink" title="sql及其他标签应用"></a>sql及其他标签应用</h3><blockquote><p>提供一些公共的可重复引用的sql片段,id在此文件中唯一不可重复，与include标签配合使用，替换sql片段。</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cols<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    id,name,gender,addr,score<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findSome<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entries.Stu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cols<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> from stu    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> target<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            name like concat("%",#{target},"%")        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加mapper对应接口"><a href="#添加mapper对应接口" class="headerlink" title="添加mapper对应接口"></a>添加mapper对应接口</h2><blockquote><p>实际上在用mybatis操作sql进行数据库操作时，很多操作都是重复的，比如获取facotry和查找执行xml对应sql等<br>可以使用spring矿建代替我们进行sqlSessionFactory对象获取以及使用mapper接口代替我们进行查找sql并执行的操作。</p></blockquote><h3 id="创建mapper对应接口"><a href="#创建mapper对应接口" class="headerlink" title="创建mapper对应接口"></a>创建mapper对应接口</h3><blockquote><p>maven项目中在java文件夹目录下创建对应接口文件，java项目在src下即可,文件名要和对应的maper.xml文件相同。</p></blockquote><h3 id="修改对应xml文件"><a href="#修改对应xml文件" class="headerlink" title="修改对应xml文件"></a>修改对应xml文件</h3><blockquote><p>将对应xml文件的mapper标签的namespace属性为接口的全路径名称（maven项目到java根目录，java项目到src根目录）</p></blockquote><h3 id="替换sqlSeesion指定sql方法"><a href="#替换sqlSeesion指定sql方法" class="headerlink" title="替换sqlSeesion指定sql方法"></a>替换sqlSeesion指定sql方法</h3><blockquote><p>使用接口调用代替sqlSession直接执行sql方法。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession ss <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//获取对应接口类对象的实现，返回mapper对象（实现了接口的对象实例）</span>    StuMapper mapper <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StuMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"target"</span><span class="token punctuation">,</span> <span class="token string">"刘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Stu<span class="token operator">></span> list <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findSome</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        List&lt;Stu> list = ss.selectList(mapperLocationStr+"findSome", map);</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Stu stu <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Before</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        InputStream is <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"sqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>@Before注解：在@Test方法执行前先执行</li></ul><h2 id="mybatis架构"><a href="#mybatis架构" class="headerlink" title="mybatis架构"></a>mybatis架构</h2><blockquote><p>从不同角度分为三个架构，即应用架构，产品架构，及技术架构</p></blockquote><h3 id="应用架构"><a href="#应用架构" class="headerlink" title="应用架构"></a>应用架构</h3><blockquote><p>有啥作用？简化了jdbc的繁琐操作，封装了连接创建、分离了sql与代码、并且自动封装参数和sql查询结构到对应的对象中。<br>怎样实现的？<br>    1、通过缓存、线程池、日志等提高了数据库操作效率<br>    2、常用api较单一、学习成本较低、易上手<br>    3、自动读取xml（动态sql），解耦sql，可复用性强。</p></blockquote><p><img src="/images/mybatis/mybatisApplicationDiagram.png" alt="应用简图"><br><img src="/images/mybatis/mybatisProductDiagram.png" alt="产品简图"></p><h3 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h3><blockquote><p>mybatis就是封装jdbc的创建数据库连接，statement对象创建、sql执行结构返回等操作。</p></blockquote><p><img src="/images/mybatis/processDiagram.png" alt="总体结构图"></p><p><img src="/images/mybatis/resouceConfig.png" alt="配置资源转换图"><br><img src="/images/mybatis/factoryCreate.png" alt="sqlSessionFactory创建"><br><img src="/images/mybatis/sqlSessionCreate.png" alt="sqlSession创建"><br><img src="/images/mybatis/sqlSessionUseType.png" alt="sqlSession应用方式"></p><p>注意：mybatis的设计模式使用的都是<strong>接口耦合</strong>，即实现由具体类实现，但是返回的参数类型都是接口，这样便于后期实现类的变化。</p><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><blockquote><p>主要分析mybatis的会话工厂创建、会话对象底层实现、缓存的应用配置。</p></blockquote><ul><li><p>工厂对象的创建主要使用了xmlConifigBuilder和xmlMapperBuilder将mybatis的配置信息和sql分别封装到Environment对象和MappedStatement对象，最终将这两类信息封装到configuration对象传给sqlSession对象，用以配置缓存，创建sql连接，封装sql和Statement等操作。<br><img src="/images/mybatis/sqlSessionFactoryCreate.png" alt="sqlSessionFactory创建过程"><br>当然，我们可以不适用xml配置的方式自己创建sqlSessionFactory对象,并将创建好的对象通过抽象方法传递。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisConfig</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      ComboPooledDataSource pooledDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      JdbcTransactionFactory transactionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTransactionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Environment development <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Environment</span><span class="token punctuation">(</span><span class="token string">"development"</span><span class="token punctuation">,</span> transactionFactory<span class="token punctuation">,</span> pooledDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>      Configuration configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span>development<span class="token punctuation">)</span><span class="token punctuation">;</span>      configuration<span class="token punctuation">.</span><span class="token function">addMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>      SqlSession sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> sqlSession<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>sqlSession 对象运行主要由executor接口的实现类simpleExecutor、batExecutor等具体实现，executor会执行创建缓存、sql连接、封装sql和statement对象并交由statementHandler处理sql操作的任务。<br><img src="/images/mybatis/sqlSessionRunDetail.png" alt="sqlSession对象运行原理"></p></li><li><p>基于Mapper接口的应用方式比直接调用操作数据库方法的过程（上面）多了一个创建代理对象的过程，这个代理对象会调用exector执行相应操作。<br><img src="/images/mybatis/mapperRunDetail.png" alt="mapper应用方式"></p></li><li><p>缓存分为一级缓存，二级缓存。一级缓存默认会跟随sqlSession创建、关闭而创建、关闭，且不能共享。二级缓存则可以多个sqlSession之间共享。mybatis默认将一级、二级缓存打开，但是使用需要再config和对应mappper的xml文件中配置。</p></li></ul><p><img src="/images/mybatis/level1Cache.png" alt="mybatis一级缓存应用"></p><ul><li><p>只有当上一个相同的sql操作的sqlSession关闭之后，才会把结果存入二级缓存。<br><img src="/images/mybatis/level2Cache.png" alt="二级缓存使用详情"></p></li><li><p>关于缓存配置，一般使用二级缓存可在对应的mapper.xml文件中配置,指定缓存大小和更新方法等。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cols<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>id,username,password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span>          <span class="token attr-name">eviction</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FIFO<span class="token punctuation">"</span></span>          <span class="token attr-name">flushInterval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span>          <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>512<span class="token punctuation">"</span></span>          <span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entries.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cols<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> from user      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> #{target}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              id = #{target}          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中readOnly只读的要求<strong>被缓存的对象实现序列化接口</strong>（Serializable），因为只读操作实际上就是通过序列化复制元数据。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 J</summary>
      
    
    
    
    <category term="java" scheme="https://hyong1232.github.io/categories/java/"/>
    
    
    <category term="mybatis" scheme="https://hyong1232.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>cookie和session</title>
    <link href="https://hyong1232.github.io/2021/02/14/cookie-he-session/"/>
    <id>https://hyong1232.github.io/2021/02/14/cookie-he-session/</id>
    <published>2021-02-14T02:17:33.000Z</published>
    <updated>2021-02-14T02:57:53.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><blockquote><p>特点：存储在客户端本地，最大不能超过4k大小，同一个域下最好不能超过20/30/50个cookie<br>安全性比session差一些，存储时间可以手动调节，存储对服务器的影响不大。</p></blockquote><h3 id="创建cookie"><a href="#创建cookie" class="headerlink" title="创建cookie"></a>创建cookie</h3><pre class="line-numbers language-java"><code class="language-java">Cookie c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改cookie属性"><a href="#修改cookie属性" class="headerlink" title="修改cookie属性"></a>修改cookie属性</h3><pre class="line-numbers language-java"><code class="language-java">c<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"newValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="添加cookie到浏览器存储"><a href="#添加cookie到浏览器存储" class="headerlink" title="添加cookie到浏览器存储"></a>添加cookie到浏览器存储</h3><pre class="line-numbers language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除cookie"><a href="#删除cookie" class="headerlink" title="删除cookie"></a>删除cookie</h3><ul><li>方法一（推荐）覆盖并设置过期时间为0<pre class="line-numbers language-java"><code class="language-java">Cookie c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>方法二，遍历request.cookies得到的cookie数组，找到指定cookie并设置其时间为0<pre class="line-numbers language-java"><code class="language-java">Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Cookie c<span class="token operator">:</span> cs<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      c<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cookie存储中文问题"><a href="#cookie存储中文问题" class="headerlink" title="cookie存储中文问题"></a>cookie存储中文问题</h3><blockquote><p>cookie本身只支持存储Ascii字符编码类型的，所用要用到URLEncoder和URLDecoder两个类的方法。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//存储</span>c<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"杨超"</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//展示</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>URLDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><blockquote><p>特点：保存在服务器端，安全性比cookie高，影响服务器性能，不能做大规模存储。<br>首次使用用会创建一个session对象，默认30分钟没有再次使用则关闭session，正常关闭服务器且session没有超过设定时间会将session序列化转存到硬盘上。再次打开服务器还是可以读取到原来的session。<br>首次创建成功会生产唯一的sessionId，并通过响应头set-cookie返回给浏览器存储，以后浏览器访问服务器都会自动携带cookie，即有sessionId，服务器就能通过sessionId找到对应session内容。</p></blockquote><h3 id="创建-获取sesssion"><a href="#创建-获取sesssion" class="headerlink" title="创建/获取sesssion"></a>创建/获取sesssion</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//服务器已经有session返回存在的，没有就创建一个。</span>HttpSession hs <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//服务存在session则返回session，否则返回null</span>HttpSession hs <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取-设置-修改session属性"><a href="#获取-设置-修改session属性" class="headerlink" title="获取/设置/修改session属性"></a>获取/设置/修改session属性</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取属性值（没有对应属性返回null)</span>hs<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"attri"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加新值</span>hs<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"attri"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改原有值</span>hs<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"attri"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除属性值</span>hs<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"attri"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除session"><a href="#删除session" class="headerlink" title="删除session"></a>删除session</h3><ul><li>使用invalidate方法<pre class="line-numbers language-java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>配置web.xml,设定超时时间（不能使用算术运算赋值）<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">></span></span>3600000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>关闭服务器，正常关闭序列化存储到磁盘，否则丢失session</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;cookie&quot;&gt;&lt;a href=&quot;#cookie&quot; class=&quot;headerlink&quot; title=&quot;cookie&quot;&gt;&lt;/a&gt;cookie&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;特点：存储在客户端本地，最大不能超过4k大小，同一个域下最好不能超过20/30/5</summary>
      
    
    
    
    <category term="cookie" scheme="https://hyong1232.github.io/categories/cookie/"/>
    
    <category term="session" scheme="https://hyong1232.github.io/categories/session/"/>
    
    
    <category term="cookie" scheme="https://hyong1232.github.io/tags/cookie/"/>
    
    <category term="session" scheme="https://hyong1232.github.io/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>js基本数据类型</title>
    <link href="https://hyong1232.github.io/2021/02/13/js-ji-ben-shu-ju-lei-xing/"/>
    <id>https://hyong1232.github.io/2021/02/13/js-ji-ben-shu-ju-lei-xing/</id>
    <published>2021-02-13T04:50:58.000Z</published>
    <updated>2021-02-13T05:19:59.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>基本类型（基本数值、基本数据类型）是一种既非对象也无方法的数据。在 JavaScript 中，共有7种基本类型：string，number，bigint，boolean，null，undefined，symbol (ECMAScript 2016新增)。</p></blockquote><h2 id="暂存死区"><a href="#暂存死区" class="headerlink" title="暂存死区"></a>暂存死区</h2><blockquote><p>与通过  var 声明的有初始化值 undefined 的变量不同，通过 let 声明的变量直到它们的定义被执行时才初始化。在变量初始化前访问该变量会导致 ReferenceError。该变量处在一个自块顶部到初始化处理的“暂存死区”中。</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">do_something</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span>  <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="instanceOf和typeOf"><a href="#instanceOf和typeOf" class="headerlink" title="instanceOf和typeOf"></a>instanceOf和typeOf</h2><blockquote><p>常用比较数据类型的判定方式有两种，一种是使用typeof判定数据类型，一种是使用instanceof判定数据类型。</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">typeof</span> <span class="token string">'string'</span><span class="token operator">==</span><span class="token operator">></span><span class="token operator">></span><span class="token string">'string'</span><span class="token keyword">typeof</span> <span class="token number">12</span><span class="token operator">==</span><span class="token operator">></span><span class="token operator">></span><span class="token string">'number'</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token operator">==</span><span class="token operator">></span><span class="token operator">></span><span class="token string">'boolean'</span><span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'any'</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span><span class="token operator">></span>'symbol<span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token operator">==</span><span class="token operator">></span><span class="token operator">></span><span class="token string">'object'</span><span class="token keyword">typeof</span> undefined<span class="token operator">==</span><span class="token operator">></span><span class="token operator">></span><span class="token string">'undefined'</span><span class="token keyword">typeof</span> 12234124123412n<span class="token operator">==</span><span class="token operator">></span><span class="token string">'bigint'</span><span class="token comment" spellcheck="true">//bigint类型用于表示大于number类型所能表示的最大数值（253 - 1）</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span><span class="token operator">></span><span class="token operator">></span> <span class="token string">'object'</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span><span class="token operator">></span><span class="token operator">></span> <span class="token string">'object'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用typeof判定数值类型容易遇上<a href="#%E6%9A%82%E5%AD%98%E6%AD%BB%E5%8C%BA">暂存死区</a>问题<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">typeof</span> a<span class="token operator">==</span><span class="token operator">></span><span class="token operator">></span> referenceError<span class="token keyword">let</span> a <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>而使用instance的判定规则是<pre class="line-numbers language-js"><code class="language-js">A instance <span class="token keyword">of</span> B<span class="token comment" spellcheck="true">//等价于</span><span class="token keyword">instanceof</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> L <span class="token operator">=</span> A<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>  <span class="token keyword">var</span> R <span class="token operator">=</span> B<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">===</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//A的内部属性__proto__指向B的原型对象</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>即只要A的__proto__属性指向B的protorype原型对象，则认为A是B的实例对象。<pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;基本类型（基本数值、基本数据类型）是一种既非对象也无方法的数据。在 JavaScript 中，共有7种基本类型：s</summary>
      
    
    
    
    <category term="js" scheme="https://hyong1232.github.io/categories/js/"/>
    
    
    <category term="基本数据类型" scheme="https://hyong1232.github.io/tags/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
</feed>

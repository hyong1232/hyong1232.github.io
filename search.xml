<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Annotation注解</title>
    <url>/2021/01/03/annotation-zhu-jie/</url>
    <content><![CDATA[<h2 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h2><blockquote>
<p>注解是用来给类/方法/变量添加额外的信息或处理的方法的工具，通常通过配合使用java的反射来实现具体的功能。</p>
</blockquote>
<h2 id="2、自定义注解及使用"><a href="#2、自定义注解及使用" class="headerlink" title="2、自定义注解及使用"></a>2、自定义注解及使用</h2><h3 id="2、1自定义注解"><a href="#2、1自定义注解" class="headerlink" title="2、1自定义注解"></a>2、1自定义注解</h3><blockquote>
<p>使用关键字@interface（类似class或interface）即可自定义一个注解，通常在自定义个的注解上需要添加@Target注解和@Retation注解来指定自定义注解的适用范围和保留层级。</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">CustomerAnnotation</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>

    String <span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>

    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>注解</th>
<th>作用</th>
<th>参数</th>
</tr>
</thead>
<tbody><tr>
<td>@Target</td>
<td>限定注解适用的范围</td>
<td>ElementType.METHOD|FIELD|Constructor…</td>
</tr>
<tr>
<td>@Retation</td>
<td>指定注解保留的层级</td>
<td>RetentionPolicy.RUNTIME（保存至运行期）|SOURCE（字节文件，不会保存到运行期）|CLASS（保存到编译阶段）…</td>
</tr>
</tbody></table>
<ul>
<li>定义注解不设置默认值会要求使用时必须写，否则报错</li>
</ul>
<h3 id="2、2自定义注解使用"><a href="#2、2自定义注解使用" class="headerlink" title="2、2自定义注解使用"></a>2、2自定义注解使用</h3><blockquote>
<p>在指定类型上加上@+自定义注解名称，赋值使用=（变量的赋值方法）</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@CustomerAnnotation</span><span class="token punctuation">(</span><span class="token string">"测试方法a"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试方法a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@CustomerAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试方法b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@CustomerAnnotation</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试方法c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@CustomerAnnotation</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">"测试方法d"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试方法d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2、3自定义注解运行"><a href="#2、3自定义注解运行" class="headerlink" title="2、3自定义注解运行"></a>2、3自定义注解运行</h3><blockquote>
<p>自定义的注解要运行要自定义执行，通过反射实现特定功能</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">launch</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>TestCustomerAnnotation<span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        TestCustomerAnnotation isc <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> ml <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> ml<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>CustomerAnnotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                CustomerAnnotation annotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>CustomerAnnotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>
                        <span class="token string">"id:"</span> <span class="token operator">+</span> annotation<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" title:"</span> <span class="token operator">+</span> annotation<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" value:"</span> <span class="token operator">+</span> annotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>isc<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>api</th>
<th>释义</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>mehodObj/FieldObj/ClassObj.isAnnotationPresent(Class&lt;?&gt; Annotation.class)</td>
<td>判定指定对象上是否出现指定注解</td>
<td>出现指定注解返回true，否则false</td>
</tr>
<tr>
<td>mehodObj/FieldObj/ClassObj.getAnnotation(Class&lt;?&gt; Annotation.class)</td>
<td>获取指定对象上的指定注解</td>
<td>指定注解的类对象</td>
</tr>
<tr>
<td>AnnotationObj.paramName()</td>
<td>获取标注在对象上的指定param属性名的注解值</td>
<td>注解值</td>
</tr>
</tbody></table>
<ul>
<li>获取注解的属性值采用方法调用</li>
</ul>
<p><strong>注解默认的赋值（不写属性值名称会赋给注解的value值）</strong></p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul>
<li><p>通过自定义注解和反射以及文件操作完成加载指定路径的类文件。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
@<span class="token keyword">interface</span> <span class="token class-name">MyComponentScan</span><span class="token punctuation">{</span>
  String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@MyComponentScan</span><span class="token punctuation">(</span><span class="token string">"annotatonTest"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationFileloader</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> AnnotationFileloader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
      MyComponentScan an <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>MyComponentScan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      String packageName <span class="token operator">=</span> an<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      String url <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemResource</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
      File<span class="token punctuation">[</span><span class="token punctuation">]</span> lf <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> lf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>方法</th>
<th>释义</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>ClassLoader.getSystemResource(String packageName)</td>
<td>通过ClassLoader加载类对象，获取对应的资源路径</td>
<td>Url类型的类的对象</td>
</tr>
<tr>
<td>UrlObj.getPath()</td>
<td>获取Url对象的路径</td>
<td>String类型的类绝对路径</td>
</tr>
</tbody></table>
</li>
<li><p>通过<strong>注解</strong>和<strong>反射</strong>以及<strong>泛型</strong>模拟创建一个工厂类容器对象，存贮指定注解标注的类对象。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeansFactory</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">newInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
      MyService an <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>MyService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> an<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructor <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      Object ins <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>an<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ins<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span>T <span class="token function">getInstance</span><span class="token punctuation">(</span>String clsName<span class="token punctuation">,</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> cls<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
      Object obj <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clsName<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">newInstance</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>
          obj <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clsName<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用注解替代spring的xml配置文件做对象池的使用</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1、声明类使用service注解</span>
<span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"Students"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Students</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//2、声明扫描注解的类，并在注解中给出包路径</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"beans"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//3、新建AnnotationConfigApplicationContext对象（beans容器）</span>
AnnotationConfigApplicationContext acac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>SpringConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Students bean <span class="token operator">=</span> acac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"Students"</span><span class="token punctuation">,</span>Students<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Students bean1 <span class="token operator">=</span> acac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"Students"</span><span class="token punctuation">,</span>Students<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean<span class="token operator">==</span>bean1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>方法</th>
<th>释义</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>new AnnotationConfigApplicationContext(String/Class&lt;?&gt;…)</td>
<td>根据配置文件路径或配置对象的字节码文件创建beans池</td>
<td>bean的工厂对象</td>
</tr>
<tr>
<td>AnnotationConfigApplicationContextObj.getBeans(String ObjName,Class<Obj>)</td>
<td>从bean池中获取对应对象，没有就创建在获取</td>
<td>传入字节码对象类型的对象</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="3、Junit单元测试"><a href="#3、Junit单元测试" class="headerlink" title="3、Junit单元测试"></a>3、Junit单元测试</h2><blockquote>
<p>Junit是第三方的开发工具注解，需要引入他的jar包和它的运行解释器，eclipse继承了这些因此可以在项目-buildpath-addlibrary-Junit-选择需要的Junit版本，添加后即可使用</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//@Test注解用于测试方法功能完整性</span>
<span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a测试方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>@Test注解有两个个属性值long timeout和Exception Class&lt;? extends java.lang.Throwable&gt;用于限制测试的时间和异常处理类</li>
<li>光标位置在类上测试类，在方法上测试方法</li>
<li>必须是<strong>public</strong> <strong>void</strong>修饰的方法才能使用单元测试，否则报错。</li>
</ul>
<p>新增客户      客户新增<br>客户认领      客户认领<br>销售立项      销售立项<br>销售项目报价  销售报价<br>销售项目变更  竞争对手新增<br>投标结果反馈  项目丢失<br>              销售中标/弃标/丢标结果上报</p>
<p>销售立项 拒绝✔ 同意✔<br>投标结果反馈申请 拒绝✔ 同意✔<br>销售标价申请 拒绝✔<br>新增客户 同意✔</p>
<p>竞争对手 ❌<br>变更竞争对手 ❌<br>新增竞争对手 ❌<br>项目丢失 ❌</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Annotation</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap简单梳理</title>
    <url>/2020/10/09/hashmap-jian-dan-shu-li/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>第八天，决心改掉恶习，加油！</p>
<span id="more"></span>

<h2 id="HashMap常用api"><a href="#HashMap常用api" class="headerlink" title="HashMap常用api"></a>HashMap常用api</h2><table>
<thead>
<tr>
<th>api</th>
<th>释义</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>get(key)</td>
<td>获取指定键值对应的值，key为未保存的值时返回null值</td>
<td>正常指定键对应的值，key不存在返回null值</td>
</tr>
<tr>
<td>put(key,value)</td>
<td>添加指定的键值对，key和value均可为null值，重复保存相同的键而值不同则会覆盖</td>
<td>正常null，覆盖保存返回被覆盖的值</td>
</tr>
<tr>
<td>remove(key)</td>
<td>删除指定键值对，key为未保存的值时返回null值</td>
<td>被删除的值</td>
</tr>
<tr>
<td>size()</td>
<td>获取map存储的键值对个数</td>
<td>-</td>
</tr>
</tbody></table>
<h2 id="Hash运算过程"><a href="#Hash运算过程" class="headerlink" title="Hash运算过程"></a>Hash运算过程</h2><p>HashMap特性：</p>
<ul>
<li>内部由table数组组成，而每个键值对都会被封装成一个entry对象进行存储</li>
<li>初始化数组大小为16</li>
<li>增长大小为length*2+2</li>
<li>负载因子为0.75</li>
</ul>
<p>HashMap的存储过程简单可以总结成一下几步</p>
<blockquote>
<p>1、调用一个要存储键值对的key.hashCode()方法获取hash值，结合数组的长度计算出存放的效标位置<br> 2、将要存储的键值对封装成entry对象，并放入对应下标位置<br> 3、如果下标位置有值则用key.equals()方法比较键是否相等，若相等则替换值，否则将新键值对用链表方式连接起来。<br> 4、如果链表的长度超过了8则将链表转换成红黑树存储（jdk1.8）<br> 5、当量表的长度减少到6则又将红黑树转化成链表<br> 6、当table的负载因子（加载率）达到了0.75则扩大table的容量（2*length+2）</p>
</blockquote>
<h2 id="hash算法重写"><a href="#hash算法重写" class="headerlink" title="hash算法重写"></a>hash算法重写</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
   r <span class="token operator">=</span> r <span class="token operator">*</span> p <span class="token operator">+</span> x<span class="token punctuation">;</span>
   r <span class="token operator">=</span> r <span class="token operator">*</span> p <span class="token operator">+</span> y<span class="token punctuation">;</span>
   <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//尽量使hash值分散开</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Point</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       Point p <span class="token operator">=</span> <span class="token punctuation">(</span>Point<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
       <span class="token keyword">return</span> x <span class="token operator">==</span> p<span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> p<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="iterator迭代器"><a href="#iterator迭代器" class="headerlink" title="iterator迭代器"></a>iterator迭代器</h2><blockquote>
<p>常用api</p>
</blockquote>
<table>
<thead>
<tr>
<th>名称</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>next()</td>
<td>取出下一个数据元素</td>
</tr>
<tr>
<td>remove()</td>
<td>去除next方法取出的数据元素（要先取出数据元素，即调用next方法之后才能使用）</td>
</tr>
<tr>
<td>hasNext()</td>
<td>是否有下一个数据元素</td>
</tr>
</tbody></table>
<p><strong>注意</strong>不能在使用iterator便利店时使用集合本身进行增删操作！！！</p>
<h2 id="遍历map"><a href="#遍历map" class="headerlink" title="遍历map"></a>遍历map</h2><p>由于HashMap本身没有提供遍历自身的方法，需要借助key的迭代器来遍历或者直接遍历key的Set来实现</p>
<pre class="line-numbers language-java"><code class="language-java">HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">9527</span><span class="token punctuation">,</span> <span class="token string">"唐伯虎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Iterator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> it <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//遍历器实现</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//遍历Set实现</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>Integer in <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>collections</tag>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>Object.assign函数</title>
    <url>/2020/09/23/object-assign-han-shu/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>**Object.assign()**方法使用target的setter方法和origin对象的getter方法，复制对象可枚举的属性值，适用于很多的object操作。</p>
<span id="more"></span>

<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>1、复制对象值，并返回新创建新对象</p>
<pre class="line-numbers language-js"><code class="language-js">Objec
t<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token string">'a'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token string">'b'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>2、为对象添加新属性</p>
<pre class="line-numbers language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>orgin<span class="token punctuation">,</span><span class="token punctuation">{</span>add<span class="token punctuation">:</span><span class="token string">'add'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>3、为对象添加新方法</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    val<span class="token punctuation">:</span><span class="token string">'val'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token operator">...</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h3><p>1、由于Object.assign采用的是浅拷贝，因此源对象的属性值是对象时，只是复制了引用，再后面的复制中出现此对象的修改，则直接替换他的引用</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token punctuation">{</span>b<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>

obj1<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b <span class="token comment" spellcheck="true">// 2</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2、不能复制origin源对象的继承属性，只能同通过Object.getPrototypeOf(origin)+Object.create()+origin方法，将其继承的方法单独调出来，然后合并</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> originProto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>originProto<span class="token punctuation">)</span><span class="token punctuation">,</span> origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>3、target/orgin对象为非对象</p>
<ul>
<li> target为非对象，转换成对象，如果是null/undefined不可转换成对象的属性时，报错</li>
<li>origin为非对象时，自动转换，如果是null/undefined不可转换成对象的属性时，直接跳过</li>
</ul>
<p>4、数组处理</p>
<blockquote>
<p>将数组当成对象处理，键值为index下标</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>5、取值函数处理（关键字get开头）</p>
<blockquote>
<p>直接取值，不会获取取值函数合并</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">get</span> name <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">'jack'</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'jack'</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>es6</category>
      </categories>
      <tags>
        <tag>Object操作</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM框架项目使用总结</title>
    <url>/2021/05/10/ssm-kuang-jia-xiang-mu-shi-yong-zong-jie/</url>
    <content><![CDATA[<h2 id="Mapper写法"><a href="#Mapper写法" class="headerlink" title="Mapper写法"></a>Mapper写法</h2><ul>
<li>插入多条数据</li>
<li>查询多条数据</li>
<li>聚合查询select查询另一个sql</li>
<li>新增数据获取id的两种方式selectKey和useGeneratedKey</li>
</ul>
<h2 id="加密方式两种"><a href="#加密方式两种" class="headerlink" title="加密方式两种"></a>加密方式两种</h2>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>Stream流操作</title>
    <url>/2020/12/20/stream-liu-cao-zuo/</url>
    <content><![CDATA[<h2 id="FileInputStream和FileOutputStream"><a href="#FileInputStream和FileOutputStream" class="headerlink" title="FileInputStream和FileOutputStream"></a>FileInputStream和FileOutputStream</h2><blockquote>
<p>读写文件必要的工具类，只有有了这两个类的实例才可操作文件内容。</p>
</blockquote>
<ul>
<li>创建对象既可以是文件路径String也可以是文件对象（File类型对象）</li>
<li>如果文件不存在/没有权限访问/无法创建返回FileNotFoundException</li>
</ul>
<h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><blockquote>
<p>read(int)/(byte[],from,length)</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java">FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>
fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0x00000063</span>
fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">355</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0x00000163</span>
fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">0x00d6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">0x00d0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">105</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//随手关门</span>
fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><blockquote>
<p>write(int)/(byte[],from,length)</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java">FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> temp<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>temp <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//随手关门</span>
fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>一定要记得<strong>关闭资源</strong>，避免浪费系统资源</p>
</blockquote>
<h2 id="文件复制"><a href="#文件复制" class="headerlink" title="文件复制"></a>文件复制</h2><blockquote>
<p>使用byte数组来进行文件的操作速率会大幅的提升</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>File from<span class="token punctuation">,</span> File to<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
    FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>
    FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 单字节读写</span>
    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>temp <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// byte数组读写,8k是读写的经验值，能效最大化</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">8192</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 数组中读取的个数，防止最后一次多处理数值</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// 随手关门</span>
    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ObjectInputStream和ObjctOutputStream文件序列化"><a href="#ObjectInputStream和ObjctOutputStream文件序列化" class="headerlink" title="ObjectInputStream和ObjctOutputStream文件序列化"></a>ObjectInputStream和ObjctOutputStream文件序列化</h2><blockquote>
<p>此方法用于保存对象的内容和状态，便于以后的读取复用。</p>
</blockquote>
<ul>
<li>需要实现标识类Serializable，并添加序列化版本ID，反序列化时版本不一致会有异常</li>
<li>static类变量和transient临时变量不会被序列化</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 编译器根据类的定义信息自动生成的serialVersoinID</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 12l<span class="token punctuation">;</span>

    <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Student [age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", Score="</span> <span class="token operator">+</span> Score <span class="token operator">+</span> <span class="token string">", gender="</span> <span class="token operator">+</span> gender <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    String name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> Score<span class="token punctuation">;</span>
    <span class="token keyword">transient</span> String gender<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        Score <span class="token operator">=</span> score<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="writeObject-obj-序列化"><a href="#writeObject-obj-序列化" class="headerlink" title="writeObject(obj)序列化"></a>writeObject(obj)序列化</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serializObj</span><span class="token punctuation">(</span>Student s<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
    ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:/code/java/obj.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="readObject-obj-反序列化"><a href="#readObject-obj-反序列化" class="headerlink" title="readObject(obj)反序列化"></a>readObject(obj)反序列化</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverseSerializObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
    ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:/code/java/obj.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Student s <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Reader和Writer类的字符编码转换"><a href="#Reader和Writer类的字符编码转换" class="headerlink" title="Reader和Writer类的字符编码转换"></a>Reader和Writer类的字符编码转换</h2><ul>
<li>多用于对字符串进行编码转换，若不指定转换编码，则默认转换为系统的编码（win：gbk，ios/linux：utf-8）</li>
<li>write()方法有三个重载的方法分别为String/byte[]/int（只写入char，即后两位的数值，前面补零）</li>
<li>java的编码转换都是用的char的字符转换（char使用unicode编码）</li>
<li>gbk和utf-8的中文编码字节量分别是2和3个字节</li>
</ul>
<h3 id="一般的字符串编码"><a href="#一般的字符串编码" class="headerlink" title="一般的字符串编码"></a>一般的字符串编码</h3><blockquote>
<p>使用String类型的getBytes([charset])和构造方法new String(byte[],[charset])完成编码转换</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    String s <span class="token operator">=</span> <span class="token string">"abc中"</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> df <span class="token operator">=</span> <span class="token function">encodeStr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> utf8 <span class="token operator">=</span> <span class="token function">encodeStr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gbk <span class="token operator">=</span> <span class="token function">encodeStr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">decodeStr</span><span class="token punctuation">(</span>df<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">decodeStr</span><span class="token punctuation">(</span>utf8<span class="token punctuation">,</span> <span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">decodeStr</span><span class="token punctuation">(</span>gbk<span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">decodeStr</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span> String charset<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
    String s<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> charset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encodeStr</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String charset<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> charset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        b <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        b <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>charset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>charset <span class="token operator">+</span> <span class="token string">"转换后的字符："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="InputStreamReader和OutpuStreamWriter"><a href="#InputStreamReader和OutpuStreamWriter" class="headerlink" title="InputStreamReader和OutpuStreamWriter"></a>InputStreamReader和OutpuStreamWriter</h3><blockquote>
<p>主要使用构造方法定义转换字符串的类型</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">transferCN</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> String charset<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
    OutputStreamWriter osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'\u4e00'</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> <span class="token string">'\u9fa5'</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
        osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">encodeStr</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> String charset<span class="token punctuation">,</span> String str<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
    OutputStreamWriter osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="BufferReader和BufferWriter"><a href="#BufferReader和BufferWriter" class="headerlink" title="BufferReader和BufferWriter"></a>BufferReader和BufferWriter</h3><blockquote>
<p>使用BufferReader的readLine()方法可以整行读取，前面必须有InputStreamReader转换编码。</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bufferReadCN</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> String charset<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
    BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    String tempStr<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tempStr <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tempStr <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>babel使用介绍</title>
    <url>/2020/09/21/babel-shi-yong-jie-shao/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>babel+webpack作为es6必用的工具，配置和使用较为麻烦，小节了一下常见的使用和配置。</p>
<span id="more"></span>

<h3 id="配置在项目中使用"><a href="#配置在项目中使用" class="headerlink" title="配置在项目中使用"></a>配置在项目中使用</h3><blockquote>
<p>可使用配置文件.babelrc将常见配置写入文件中（放置在项目的根目录下），再webpack打包的过程中，会自动读取这个文件的配置，常见的配置写法如下:</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>
    <span class="token string">"presets"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'es2015'</span><span class="token punctuation">,</span><span class="token string">'env'</span><span class="token punctuation">,</span><span class="token string">'stage-0'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">"plugins"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'transform-runtime'</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>.babelrc文件整个就是一个对象，在对象{}中配置相应的属性即可</li>
<li>常用的presets规则以及转换插件需要自行下载（npm命令即可）</li>
</ul>
<p><strong>babel配置也可以在webpack的配置文件中配置，即在module下的rules数组对象的规则对象的use属性中添加options属性中添加即可</strong></p>
<pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">:</span><span class="token punctuation">{</span>
    rules<span class="token punctuation">:</span><span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            test<span class="token punctuation">:</span><span class="token regex">/\.js$/</span><span class="token punctuation">,</span>
            exclude<span class="token punctuation">:</span><span class="token regex">/node_modules/</span><span class="token punctuation">,</span>
            use<span class="token punctuation">:</span><span class="token punctuation">{</span>
                loader<span class="token punctuation">:</span><span class="token string">'babel-loader'</span><span class="token punctuation">,</span>
                options<span class="token punctuation">:</span><span class="token punctuation">{</span>
                    presets<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'env'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'transform-runtime'</span><span class="token punctuation">]</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>关于转换规则stage-0/1/2…在新的webpack中不在推荐使用，避免过多使用</strong></p>
<h3 id="命令行中直接转换"><a href="#命令行中直接转换" class="headerlink" title="命令行中直接转换"></a>命令行中直接转换</h3><blockquote>
<p>除了在项目中使用还可以直接在命令行转换es6的代码</p>
</blockquote>
<p>1、安装@babel/cli</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -D @babel/cli
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>2、基本用法</p>
<pre class="line-numbers language-bash"><code class="language-bash">//转换单个es6语法的文件到指定文件夹
npx babel es6.js --out-file out.js
//简写为
npx babel es6.js -o out.js

//转换文件夹至指定路径输出
npx babel es6dir -out-dir outdir
//简写为
npx babel es6dir -d outdir

//加上 -s参数生产source map文件
npx babel es6dir -d outdir -s
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>转换文件到目标文件/文件夹时，没有会自动创建</li>
<li>文件夹转换是将源文件夹中的文件依次转换到对应的输出，出错则停止转换</li>
<li>关于npx可见<blockquote><p>常见的npx使用方式</p>
<footer><strong>阮一峰</strong><cite><a href="https://www.ruanyifeng.com/blog/2019/02/npx.html">npx使用教程</a></cite></footer></blockquote></li>
<li>关于sourceMap可见<blockquote><p>sourceMap介绍</p>
<footer><strong>阮一峰</strong><cite><a href="http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html">JavaScript Source Map 详解</a></cite></footer></blockquote></li>
</ul>
<h3 id="babel-node的使用"><a href="#babel-node的使用" class="headerlink" title="@babel/node的使用"></a>@babel/node的使用</h3><blockquote>
<p>安装了这个包就可以在命令行直接执行es6命令，或者直接运行es6文件</p>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">//直接运行es6文件
npx node-node es6.js
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="babel-register"><a href="#babel-register" class="headerlink" title="@babel/register"></a>@babel/register</h3><blockquote>
<p>这个包的作用是在文件中对通过require加载的文件进行实时转换</p>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">//安装
<span class="token function">npm</span> i @babel/register -D
//使用（文件中）
require<span class="token punctuation">(</span><span class="token string">'@babel/register'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
require<span class="token punctuation">(</span><span class="token string">'./es6.js'</span><span class="token punctuation">)</span>
//上述代码会自动将加载的es6文件转换
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>此包仅在运行时有效（适用于开发时使用）</li>
<li>使用时要先加载此包，放在文件的顶部</li>
<li>当前文件不会自动转换，只会转换require加载的文件（加一个钩子）</li>
</ul>
<h3 id="polyfill"><a href="#polyfill" class="headerlink" title="polyfill"></a>polyfill</h3><blockquote>
<p>babel默认不会转换es6新的api，只会转换语法（syntax）例如Iterator、Generator、Set、Map、Proxy、Reflect、Symbol、Promies等全局对象，及部分全局对象的工具方法例如Array.from()方法。使用polyfill可解决这个问题</p>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">//安装<span class="token punctuation">(</span>regenerator是转换generator的包<span class="token punctuation">)</span>
<span class="token function">npm</span> i core-js regenerator-runtime -D
//使用（文件中）导入即可（require/import）
<span class="token function">import</span> <span class="token string">'core-js'</span>
<span class="token function">import</span> <span class="token string">'regenerator-runtime/runtime'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>es6</category>
      </categories>
      <tags>
        <tag>babel</tag>
      </tags>
  </entry>
  <entry>
    <title>angular入门</title>
    <url>/2021/06/12/angular-ru-men/</url>
    <content><![CDATA[<h2 id="常用cli命令"><a href="#常用cli命令" class="headerlink" title="常用cli命令"></a>常用cli命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>ng g module| m modulename path [–routing]</td>
<td>新建module（普通module|路由。。。）</td>
</tr>
<tr>
<td>ng g component | c componentname path</td>
<td>新建component</td>
</tr>
<tr>
<td>ng g</td>
<td></td>
</tr>
</tbody></table>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><pre class="line-numbers language-md"><code class="language-md">├─e2e --端到端测试
├─node_modules --第三方依赖包
├─src --业务源代码
│  ├─app  --项目文件
│  ├─assets --静态资源
│  ├─environments --环境资源
│  ├─main.ts -- 入口文件
│  ├─polyfill.ts -- 额外资源
│  ├─styles.less -- 全局样式 
│  └─test.ts -- 测试入口
│ 
├─.editorconfig --编辑器代码风格设置
├─.angular-cli.json --angular脚手架配置文件
├─.gitignore --git仓库提交忽略配置
├─package.json --项目包说明文件
├─karma.config.js --karma的测试配置文件
├─protractor.config.js --端到端测试配置文件（与e2e文件夹相关）
├─tsconfig.json --ts配置文件
└─tslint.json --ts代码格式校验配置（类似eslint）
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="angular指令"><a href="#angular指令" class="headerlink" title="angular指令"></a>angular指令</h2><ul>
<li>按键修饰符keyup.enter</li>
<li>双向绑定不默认提供==》》module种引入form</li>
<li>实例：利用toggleAll的get、set切换列表状态（标签内””使用$event获取input值：get函数的值会因为依赖属性值的改变而变化）</li>
<li>时间执行顺序：监听key事件 &gt;&gt; blur事件</li>
<li>window.onhashchange = function(){}</li>
<li>ngOnCheck：当组件数据改变时触发</li>
</ul>
<h3 id="表单校验"><a href="#表单校验" class="headerlink" title="表单校验"></a>表单校验</h3><ul>
<li>input绑定属性值:#name=”ngModule”</li>
<li>获取获取属性值</li>
<li>添加error提示校验div，if或hidde属性动态判定显示</li>
<li>阻止默认表单提交：form标签上：#form=”ngForm”==&gt;submit-button：[disabled]=”!form.form.valid”</li>
</ul>
<h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><ul>
<li>新建服务：ng g service service/serviceName</li>
<li>在要使用的组件中注入serviceClass，并使用</li>
<li></li>
</ul>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ul>
<li>安装路由模块：ng generate module app-routing –flat –module=app</li>
<li>进入app-routing.module.ts配置路由模块的路由表</li>
<li>首先从@angular/router包中引入RouterModule模块（forRoot方法：用于启动路由）和Routes对象（用于执行route类型）</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>comonjs与ES6的文件导入导出比较</title>
    <url>/2020/09/20/comonjs-yu-es6-de-wen-jian-dao-ru-dao-chu-bi-jiao/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>es6的模块化加载和node服务端的模块化加载，他们的关键字比较相近，而且在webpack打包的项目中，两种方式的模块化引用都是有效的，为了便于区分，小结了一下。</p>
<span id="more"></span>

<h2 id="CommonJS模块化加载"><a href="#CommonJS模块化加载" class="headerlink" title="CommonJS模块化加载"></a>CommonJS模块化加载</h2><blockquote>
<p>只有在运行时才会加载（同步加载），而且是加载整个路径的文件生成一个对象，然后再从这个对象中解构赋值给要查找的属性,例如：</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//等同于</span>
<span class="token keyword">let</span> _fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> a <span class="token operator">=</span>  _fs<span class="token punctuation">.</span>a
<span class="token keyword">let</span> b <span class="token operator">=</span>  _fs<span class="token punctuation">.</span>b
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>1、导出单个对象时，给modules.exports对象直接赋值即可<br>2、导出多个对象时，使用关键字exports，将其看成对象，增加属性（为属性赋值）<br><strong>exports关键字只是modules.epxorts的引用，直接给exports赋值不会改变导出结果</strong></p>
<h3 id="导入require（）函数"><a href="#导入require（）函数" class="headerlink" title="导入require（）函数"></a>导入require（）函数</h3><p>1、运行时加载且为同步加载。<br>2、优先从缓存加载，重复文件不回加载。<br>3、循环加载时不会将父文件完整加载，而是只加载到调用自身时为止的内容，避免循环产生。<br>4、路径可为运行时才可得到的结果。</p>
<h2 id="ES6模块化加载"><a href="#ES6模块化加载" class="headerlink" title="ES6模块化加载"></a>ES6模块化加载</h2><blockquote>
<p>静态化思想，<strong>编译时</strong>就确定模块关系，即在模块内就指定要加载模块，运行时使用import加载指定的模块 </p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//import {a,b} from 'fs'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>fs文件可以不写后缀需要在webpack中配置说明</strong></p>
<h3 id="export命令"><a href="#export命令" class="headerlink" title="export命令"></a>export命令</h3><blockquote>
<p>常见写法</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">'jack'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//相当于</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">'jack'</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//函数或类</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">exportFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">exportClass</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//使用as关键字为导出变量重命名,同一个导出变量可有多个不同名称的输出</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'jack'</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>a <span class="token keyword">as</span> summer<span class="token punctuation">,</span>a <span class="token keyword">as</span> peter<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>通过export与import关键字进行导入导出，实际上就是导出了代码的引用到对应位置，因此他的数据是可变的（实时的）</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//100ms之后导出的a的值会变成'change'</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'origin'</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span>_<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>a <span class="token operator">=</span> <span class="token string">'change'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>a<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>因为静态时确定模块导入/出关系，export关键字不可放在函数中，导出/导入表达式中不可有运行之后才有明确结果的变量成分</p>
</li>
<li><p>导出的结果为一个对象类型，若没有指定default导出，则不可单独导出其他类型</p>
</li>
</ul>
<h3 id="import关键字"><a href="#import关键字" class="headerlink" title="import关键字"></a>import关键字</h3><blockquote>
<p>常见写法</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./exprot.js'</span>
<span class="token comment" spellcheck="true">//可为导入的成员重新命名</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>a <span class="token keyword">as</span> c<span class="token punctuation">,</span>b <span class="token keyword">as</span> d<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./exprot.js'</span>
<span class="token comment" spellcheck="true">//导出变量如果不是对象，不可赋值（只读），是对象也不推荐赋值，影响代码维护</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> a<span class="token punctuation">}</span> form <span class="token string">'export.js'</span>
a <span class="token operator">=</span> XXX——错误（不推荐）的写法
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>多次调用一个导入文件，等同于引用一个导出的多个被选引用，会自动合并相同引用例如</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'my_module'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> bar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'my_module'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 等同于</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'my_module'</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>不要和CommonJS的模块加载混用，CommonJS是运行时加载会出问题</p>
</li>
</ul>
<h3 id="特殊导入-导出"><a href="#特殊导入-导出" class="headerlink" title="特殊导入/导出"></a>特殊导入/导出</h3><p>1、导入*——将整体导入成一个对象（但不可为对象属性赋值），可用as重命名</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> circle <span class="token keyword">from</span> <span class="token string">'./circle'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 下面两行都是不允许的</span>
circle<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>
circle<span class="token punctuation">.</span>area <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>2、默认导入关键字default——导出default名称的变量，导入时可自由命名，不用使用as</p>
<blockquote>
<p>常见写法</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//导出命名函数——同导出匿名函数一样，名称无用，导入时自用命名</span>
exprot <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//等同于</span>
exprot <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//导入时不用加{}</span>
<span class="token keyword">import</span> anyname <span class="token keyword">from</span> <span class="token string">'default.js'</span>

<span class="token comment" spellcheck="true">//上述操作等同于</span>
<span class="token keyword">var</span> something<span class="token operator">=</span> <span class="token string">'...'</span>
exprot <span class="token punctuation">{</span>something <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token punctuation">}</span> 
<span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token keyword">default</span> <span class="token keyword">as</span> anyname<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>默认导入/导出可与导出对象叠加使用<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//导出</span>
eport <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>···<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">each</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> iterator<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> each <span class="token keyword">as</span> forEach <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//导入</span>
<span class="token keyword">import</span> _<span class="token punctuation">,</span> <span class="token punctuation">{</span> each<span class="token punctuation">,</span> forEach <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'export.js'</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p>3、合并import+export做转发or重命名or模块继承（添加完善）</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//模块转发</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'my_module'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 可以简单理解为</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'my_module'</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//模块转发并重命名</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">as</span> ns <span class="token keyword">from</span> <span class="token string">"mod"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 等同于</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ns <span class="token keyword">from</span> <span class="token string">"mod"</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>ns<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//模块继承（*号表示非默认default导出的对象）</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'circle'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不包括default默认导出</span>
<span class="token keyword">export</span> <span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token number">2.71828182846</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">exp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//引用修改（加强）的模块</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> math <span class="token keyword">from</span> <span class="token string">'circleplus'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> exp <span class="token keyword">from</span> <span class="token string">'circleplus'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上面继承模块默认导出的对象引用（函数）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">exp</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="import（）函数"><a href="#import（）函数" class="headerlink" title="import（）函数"></a>import（）函数</h3><blockquote>
<p>es2020添加了类似require的动态加载模块功能，返回一个promise对象，而加载成功则引用模块作为对象参数返回给回调函数</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//常见写法</span>
Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./module1.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./module2.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./module3.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>module1<span class="token punctuation">,</span> module2<span class="token punctuation">,</span> module3<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
   ···
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//导入模块后直接解构获取值</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./myModule.js'</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span>export1<span class="token punctuation">,</span> export2<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// ...·</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//获取默认导出</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./myModule.js'</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>myModule <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myModule<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//默认导出的具名形式</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./myModule.js'</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">default</span><span class="token punctuation">:</span> theDefault<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>theDefault<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>总结特点：1、加载路径可变，动态加载引用2、可在函数内使用3、异步加载</p>
</blockquote>
]]></content>
      <categories>
        <category>es6</category>
        <category>node</category>
      </categories>
      <tags>
        <tag>CommonJS模块化加载</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2021/07/04/docker/</url>
    <content><![CDATA[<h3 id="docker介绍"><a href="#docker介绍" class="headerlink" title="docker介绍"></a>docker介绍</h3><ul>
<li><p>docker是什么？</p>
<blockquote>
<p>阮一峰老师说：Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。简单来讲就是使用虚拟容器技术，来封装<strong>应用程序和运行该程序运行所需要的依赖</strong>，来避免所谓<strong>“在我的电脑上可以运行”</strong>的尴尬局面。</p>
</blockquote>
</li>
<li><p>docker优势？</p>
<blockquote>
<p>1、使用docker减少环境配置，特别是布置大型的应用、多个（集群）的分布式业务能减少很多麻烦。<br>2、docker比linux虚拟机少了很多的冗余内容（guest os、Hypervisor）<br>3、docker可以保证环境一致的迁移使用<br><img src="/images/docker/dockerVMCompare.png" alt="VM和docker对比图"></p>
</blockquote>
</li>
<li><p>docker用途<br>（1）提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。<br>（2）提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。<br>（3）组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构</p>
</li>
</ul>
<h3 id="docker安装和配置"><a href="#docker安装和配置" class="headerlink" title="docker安装和配置"></a>docker安装和配置</h3><ul>
<li>安装<blockquote>
<p>官网对不同的操作系统的安装做了详尽的说明**<a href="https://docs.docker.com/engine/install/">docker官方安装说明</a>**</p>
</blockquote>
</li>
</ul>
<p><strong>实例：1、aliyuncentos安装docker</strong></p>
<ul>
<li><p>删除已有服务器上的docker相关文件</p>
<pre class="line-numbers language-shell"><code class="language-shell">sudo yum remove docker \
                docker-client \
                docker-client-latest \
                docker-common \
                docker-latest \
                docker-latest-logrotate \
                docker-logrotate \
                docker-engine
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>安装yum-utils&amp;&amp;配置docker仓库镜像<br>1、安装yum-utils</p>
<pre class="line-numbers language-shell"><code class="language-shell">yum install -y yum-utils
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>2、配置阿里云镜像</p>
<pre class="line-numbers language-shell"><code class="language-shell">sudo yum-config-manager \
  --add-repo \
  https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #使用阿里云centos的docker仓库地址
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>安装docker引擎</p>
<pre class="line-numbers language-shell"><code class="language-shell">sudo yum install docker-ce docker-ce-cli containerd.io
# 查看docker的版本列表&&安装指定版本docker
yum list docker-ce --showduplicates | sort -r
yum install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io
# 启动docker
systemctl start docker
# 运行docker镜像（container的命令，会自动去下载对应的image然后生成container实例并运行）
docker run hello-world
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>配置阿里云镜像加速</p>
<blockquote>
<p>阿里云自己有docker镜像加速服务**<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">阿里云容器镜像加速</a>**，其中centos的配置如下</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json <<-'EOF'
{
"registry-mirrors": ["https://mnqcynsm.mirror.aliyuncs.com"]
}
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用docker version||docker info查看安装的docker信息</p>
</li>
</ul>
<p><strong>实列2：tencent云ubuntu安装docker</strong><br>1、卸载旧版的docker和docker-engine</p>
<pre class="line-numbers language-shell"><code class="language-shell">$ sudo apt-get remove docker \
               docker-engine \
               docker.io
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>2、由于采用apt安装，因此我们首先需要添加使用 HTTPS 传输的软件包以及 CA 证书</p>
<pre class="line-numbers language-shell"><code class="language-shell">$ sudo apt-get update
$ sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3、确认所下软件的合法性，添加软件源的GPG密钥（建议使用国内）</p>
<pre class="line-numbers language-shell"><code class="language-shell"># 阿里云镜像GPG密钥
curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>4、向source.list文件中加入docker软件源(aliyun源)</p>
<pre class="line-numbers language-shell"><code class="language-shell">$ echo \
  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>5、更新apt软件包的缓存</p>
<pre class="line-numbers language-shell"><code class="language-shell">$ sudo apt-get update
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>6、大招：脚本自动安装</strong></p>
<pre class="line-numbers language-shell"><code class="language-shell"># $ curl -fsSL test.docker.com -o get-docker.sh
$ curl -fsSL get.docker.com -o get-docker.sh
$ sudo sh get-docker.sh --mirror Aliyun
# $ sudo sh get-docker.sh --mirror AzureChinaCloud
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上命令会启动脚本，自动的将一切准备工作做好，并且把 Docker 的稳定(stable)版本安装在系统中</p>
<p>7、普通用户添加到docker用户组</p>
<pre class="line-numbers language-shell"><code class="language-shell"># 建立docker用户组
$ sudo groupadd docker
# 添加当前用户到用户组中
$ sudo usermod -aG docker $USER
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>原因：默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组</p>
<p>8、配置镜像加速</p>
<pre class="line-numbers language-shell"><code class="language-shell">vi /etc/docker/daemon.json
# 添加以下镜像加速源：
{
  "registry-mirrors": [
    "https://hub-mirror.c.163.com",
    "https://mirror.baidubce.com",
    "https://mirror.css.tencentyun.com" #仅供腾讯云内部访问
  ]
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>9、重启daemon进程和docker</p>
<pre class="line-numbers language-shell"><code class="language-shell">systemctl daemon-reload
systemctl restart docker
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>10、检查是否配置成功</p>
<pre class="line-numbers language-shell"><code class="language-shell">docker info
# 若出现如下信息，表示配置成功
 Registry Mirrors:
  https://hub-mirror.c.163.com/
  https://mirror.baiduce.com/
  https://mirror.css.tencentyun.com/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="docker镜像image文件"><a href="#docker镜像image文件" class="headerlink" title="docker镜像image文件"></a>docker镜像image文件</h3><blockquote>
<p>image文件是一个用来创建可运行的docker实例的模板，它可以被继承使用（一般使用已有修改简便）。</p>
</blockquote>
<ul>
<li>常见命令</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>简写|特殊写法</th>
<th>释义</th>
<th>可选参数</th>
</tr>
</thead>
<tbody><tr>
<td>docker image ls [参数]</td>
<td>docker images</td>
<td>列出本地所有镜像</td>
<td>-a：所有镜像信息，-q：仅展示镜像id，-aq，所有镜像id</td>
</tr>
<tr>
<td>docker search imageName</td>
<td>-</td>
<td>搜索docker镜像</td>
<td>-f=[tag:stars]=3000:过滤端口小于3000的镜像</td>
</tr>
<tr>
<td>docker pull imageName:version</td>
<td>docker pull imageName</td>
<td>下载镜像默认最新的latest</td>
<td>-</td>
</tr>
<tr>
<td>docker rmi imageName1 imageName2 …</td>
<td>docker rmi -f $(docker images -aq)</td>
<td>移除指定镜像|所有的镜像</td>
<td>-f：强制移除</td>
</tr>
<tr>
<td>docker commit -a=’作者’ -m=’msg’ containerID/containerName 自定义镜像名称:版本</td>
<td>-</td>
<td>提交一个自定义的镜像文件</td>
<td>-</td>
</tr>
<tr>
<td><strong>docker的实现原理：</strong>使用union file system分层的管理包底层公用kernel的bootfs文件，使用不同的rootfs（对应不同的操作系统）精简了系统的大部分功能，保留基本的命令行等。</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="docker容器container"><a href="#docker容器container" class="headerlink" title="docker容器container"></a>docker容器container</h3><blockquote>
<p>通过image生成的可以运行的实例文件，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。，而且关闭容器并不会删除容器文件，只是容器停止运行而已。</p>
</blockquote>
<ul>
<li>常见容器命令<table>
<thead>
<tr>
<th>命令</th>
<th>简写|特殊写法</th>
<th>释义</th>
<th>可选参数</th>
</tr>
</thead>
<tbody><tr>
<td>docker container run [参数] imageName</td>
<td>-</td>
<td>创建一个容器实例并运行它</td>
<td>-p：端口映射（外：容器内），-it：shell命令行投影，–name：容器实例重命名，-d：后台运行（实例没有前台服务自动停止）</td>
</tr>
<tr>
<td>docker container kill [containID]</td>
<td>-</td>
<td>停止容器实例</td>
<td>-</td>
</tr>
<tr>
<td>docker container stop [containID]</td>
<td>-</td>
<td>停止容器实例</td>
<td>-</td>
</tr>
<tr>
<td>docker container ls [参数]</td>
<td>-</td>
<td>停止容器实例</td>
<td>-a：列出所有（包括终止运行的容器）</td>
</tr>
<tr>
<td>docker container rm [containID]</td>
<td>docker container run –rm -p 8000:3000 -it koa-demo /bin/bash</td>
<td>删除容器实例|在容器终止运行后自动删除容器</td>
<td>-</td>
</tr>
<tr>
<td>docker rm [参数] containID</td>
<td>docker rm -f $(docker container ps</td>
<td>docker container ls -aq)</td>
<td>删除container实例</td>
</tr>
<tr>
<td>docker kill containID</td>
<td>-</td>
<td>强制停止container实例</td>
<td>-</td>
</tr>
<tr>
<td>docker stop containID</td>
<td>-</td>
<td>停止container实例</td>
<td>-</td>
</tr>
<tr>
<td>docker start containID</td>
<td>-</td>
<td>启动container实例</td>
<td>-</td>
</tr>
<tr>
<td>docker restart containID</td>
<td>-</td>
<td>重启container实例</td>
<td>-</td>
</tr>
<tr>
<td>docker container ps [参数]</td>
<td>-</td>
<td>重启container实例</td>
<td>-a：所有container实例（包含停止的），-q：实例id（containerID）</td>
</tr>
<tr>
<td>docker top containID</td>
<td>-</td>
<td>显示进程|父进程运行信息</td>
<td>-</td>
</tr>
<tr>
<td>docker inspect containID</td>
<td>-</td>
<td>展示正在运行的实例具体信息</td>
<td>-</td>
</tr>
<tr>
<td>docker logs [参数] containID</td>
<td>-</td>
<td>显示日志</td>
<td>-n –tail：条数</td>
</tr>
<tr>
<td>docker cp containID|containName:docName targetPath</td>
<td>-</td>
<td>复制docker文件至指定路径</td>
<td>-</td>
</tr>
<tr>
<td>docker attach containID|containName</td>
<td>-</td>
<td>进入正在运行的container实例</td>
<td>-</td>
</tr>
<tr>
<td>docker exec -it containID|containName /bin/bash</td>
<td>-</td>
<td>进入正在运行的cotainer实例，并打开新的窗口（不影响正在运行）</td>
<td>-</td>
</tr>
<tr>
<td>docker stats containID|containName</td>
<td>-</td>
<td>展示container实例的内存使用情况</td>
<td>-</td>
</tr>
</tbody></table>
</li>
</ul>
<p><strong>-it：使用可命令交互的方式运行</strong></p>
<ul>
<li><p>安装es+kibana</p>
<pre class="line-numbers language-shell"><code class="language-shell"># 拉取elasticsearch的image镜像
docker pull elasticsearch
# 运行elasticsearch（注意配置运行内存）
docker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-Xms64m -Xms512m" elasticsearch:tag
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>安装可视化操作面板</p>
<pre class="line-numbers language-shell"><code class="language-shell"># 安装portainer
docker run -d -p 8080:9000 --restart=always -v /var/run/docker/.sock:/var/run/docker.sock --privileged=true portainer/portainer
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>根据端口号差进程，然后根据pid杀进程</p>
<pre class="line-numbers language-shell"><code class="language-shell">netstat -antup
nestat 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="容器数据卷volume"><a href="#容器数据卷volume" class="headerlink" title="容器数据卷volume"></a>容器数据卷volume</h3><blockquote>
<p>容器的数据保存要求可以<strong>容器间共享、持久化保存</strong>,容器数据卷应运而生。</p>
</blockquote>
<h4 id="命令行设置数据卷"><a href="#命令行设置数据卷" class="headerlink" title="命令行设置数据卷"></a>命令行设置数据卷</h4><ul>
<li>指定路径的映射<br>docker run -p 3306:3306 –name=’mysql’-e ‘MYSQL_ROOT_PASSWORD=root’ -v /home/mysql/conf:/etc/mysql/conf.d -v /home/msyql/data:/var/lib/mysql -d  mysql</li>
<li>具名映射<br>docker run –name=nginx -P -v juming:/etc/nginx -d nginx</li>
<li>匿名映射<br>docker run –name=nginx -P -v /etc/nginx -d nginx</li>
</ul>
<p><strong>注意：</strong><br>1、不指定路径的映射都默认将映射文件放置到/var/lib/docker/volumes/XXX/_data下<br>2、mysql要指定初始密码：-e MYSQL_ROOT_PASSWORD=root，映射/etc/mysql时启动docker就退出？？？</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>docker inspect containerID/containerName</td>
<td>查找mount的volume卷信息（名称）</td>
</tr>
<tr>
<td>docker volume ls</td>
<td>列出所有的volume信息</td>
</tr>
<tr>
<td>docker volume inspect volumeName</td>
<td>查看volume详细信息</td>
</tr>
</tbody></table>
<ul>
<li>通过commit提交运行的container实例生成自定义镜像（container也只是在image上加了一层自定义的files）<pre class="line-numbers language-shell"><code class="language-shell">docker 
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h4 id="dockerfile文件挂载数据卷"><a href="#dockerfile文件挂载数据卷" class="headerlink" title="dockerfile文件挂载数据卷"></a>dockerfile文件挂载数据卷</h4><ul>
<li>创建dockerfile文件<pre class="line-numbers language-shell"><code class="language-shell">FROM dockerImageName
VOLUME ['volume1','volume2']
CMD /bin/bash
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>生成镜像<pre class="line-numbers language-shell"><code class="language-shell"># 生成自定义docker image镜像
docker build -f dockerfilePath -t imageName imageStorageLocation(.表当前目录)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<h4 id="容器间共享数据卷"><a href="#容器间共享数据卷" class="headerlink" title="容器间共享数据卷"></a>容器间共享数据卷</h4><ul>
<li>使用–volumes-from containerId/containerName ：共享数据<pre class="line-numbers language-shell"><code class="language-shell"># 例如两个mysql数据库使用同一个数据卷
docker run -p 3306:3306 --name my01 -e MYSQL_ROOT_PASSWORD=root --volumes-from my -d my:1.0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<h4 id="dockerfile创建建镜像"><a href="#dockerfile创建建镜像" class="headerlink" title="dockerfile创建建镜像"></a>dockerfile创建建镜像</h4><p><img src="/images/docker/dockerImage.jpg" alt="dockerimage原理"><br><img src="/images/docker/dockerFileDirection.png" alt="dockerfile常见命令"><br><img src="/images/docker/dockerfileDirection01.png" alt="dockerfile常见命令总结"><br><img src="/images/docker/dockerDirections.png" alt="docker常见命令"></p>
<ul>
<li><p>cmd命令和entrypoint区别：dockerfile中的cmd命令只有最后一条会被执行，且在启动镜像时，添加的命令会替换掉他。entrypoint则不会被覆盖。</p>
</li>
<li><p>实例：tomcat+jdk+vim实现功能</p>
</li>
</ul>
<h4 id="发布docker到仓库"><a href="#发布docker到仓库" class="headerlink" title="发布docker到仓库"></a>发布docker到仓库</h4><p>docker login<br>docker logout<br>docker tag</p>
<h3 id="docker网络netwokr"><a href="#docker网络netwokr" class="headerlink" title="docker网络netwokr"></a>docker网络netwokr</h3><ul>
<li><p>原理：evth-pair桥接bridge技术</p>
</li>
<li><p>默认网络docker0，名字ping不通–link+名称设置可ping通</p>
</li>
<li><p>自建网络 docker network create </p>
</li>
<li><p>创建redis集群</p>
<pre class="line-numbers language-shell"><code class="language-shell"># 创建redis集群
for port in $(seq 1 6); \
do \
mkdir -p /mydata/redis/node-${port}/conf
touch /mydata/redis/node-${port}/conf/redis.conf
cat  EOF /mydata/redis/node-${port}/conf/redis.conf
port 6379 
bind 0.0.0.0
cluster-enabled yes 
cluster-config-file nodes.conf
cluster-node-timeout 5000
cluster-announce-ip 172.38.0.1${port}
cluster-announce-port 6379
cluster-announce-bus-port 16379
appendonly yes
EOF
done
# 启动容器实例
docker run -p 6371:6379 -p 16371:16379 --name redis-1 \
  -v /mydata/redis/node-1/data:/data \
  -v /mydata/redis/node-1/conf/redis.conf:/etc/redis/redis.conf \
  -d --net redis --ip 172.38.0.11 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf
# 创建redisjiqun
redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>springboot微服务</p>
</li>
</ul>
<h3 id="bug全集"><a href="#bug全集" class="headerlink" title="bug全集"></a>bug全集</h3><ul>
<li><p>volume数据卷挂载错误</p>
<pre class="line-numbers language-shell"><code class="language-shell">invalid mount {Destination:[volume1,volume2] Type:bind Source:/var/lib/docker/volumes/85a4574c659e9d2709852f32cd7070dba21351354e6ba98a28e49781c837ea12/_data Options:[rbind]}: mount destination [volume1,volume2] not absolute: unknown.
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>解决方案：卷前加/指定绝对路径：/volume1</p>
</li>
<li><p>nginx启动异常，-d一启动就自动退出</p>
<pre class="line-numbers language-shell"><code class="language-shell">[root@iZ0jl5de38snuehexgcjliZ ng]# docker run --name ng -P -v $PWD/home/ng/conf/nginx.conf:/etc/nginx/nginx.conf:rw -d ng:1.0
5e8a413844c7920d48f861ee2040b04505010da0e6dfbb6bc0500b6998d022b2
docker: Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: process_linux.go:545: container init caused: rootfs_linux.go:76: mounting "/home/ng/home/ng/conf/nginx.conf" to rootfs at "/etc/nginx/nginx.conf" caused: mount through procfd: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type.
[root@iZ0jl5de38snuehexgcjliZ ng]# docker run --name my-custom-nginx-container -v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx
40cceb90a914d99060409ac427242dd4207895b3d8a2d3fc598e06a0d3c007ba
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>解决方案：待解决</p>
</li>
<li><p>挂载springcloudjarweb文件报错,查看docker启动日志结果如下：</p>
<pre class="line-numbers language-shell"><code class="language-shell"># [root@iZ0jl5de38snuehexgcjliZ idea] docker logs -n --tail=1 web
# --server.port=8080: 1: --server.port=8080: [java,-jar,/app.jar]: not found
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>解决方案：<strong>超级大坑：</strong>在shell脚本里ENTRYPOINT的中括号要使用”双引号，否则报此错误错</p>
</li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>cookie和session</title>
    <url>/2021/02/14/cookie-he-session/</url>
    <content><![CDATA[<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><blockquote>
<p>特点：存储在客户端本地，最大不能超过4k大小，同一个域下最好不能超过20/30/50个cookie<br>安全性比session差一些，存储时间可以手动调节，存储对服务器的影响不大。</p>
</blockquote>
<h3 id="创建cookie"><a href="#创建cookie" class="headerlink" title="创建cookie"></a>创建cookie</h3><pre class="line-numbers language-java"><code class="language-java">Cookie c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="修改cookie属性"><a href="#修改cookie属性" class="headerlink" title="修改cookie属性"></a>修改cookie属性</h3><pre class="line-numbers language-java"><code class="language-java">c<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"newValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="添加cookie到浏览器存储"><a href="#添加cookie到浏览器存储" class="headerlink" title="添加cookie到浏览器存储"></a>添加cookie到浏览器存储</h3><pre class="line-numbers language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="删除cookie"><a href="#删除cookie" class="headerlink" title="删除cookie"></a>删除cookie</h3><ul>
<li>方法一（推荐）覆盖并设置过期时间为0<pre class="line-numbers language-java"><code class="language-java">Cookie c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
c<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>方法二，遍历request.cookies得到的cookie数组，找到指定cookie并设置其时间为0<pre class="line-numbers language-java"><code class="language-java">Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>Cookie c<span class="token operator">:</span> cs<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      c<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="cookie存储中文问题"><a href="#cookie存储中文问题" class="headerlink" title="cookie存储中文问题"></a>cookie存储中文问题</h3><blockquote>
<p>cookie本身只支持存储Ascii字符编码类型的，所用要用到URLEncoder和URLDecoder两个类的方法。</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//存储</span>
c<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"杨超"</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//展示</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>URLDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><blockquote>
<p>特点：保存在服务器端，安全性比cookie高，影响服务器性能，不能做大规模存储。<br>首次使用用会创建一个session对象，默认30分钟没有再次使用则关闭session，正常关闭服务器且session没有超过设定时间会将session序列化转存到硬盘上。再次打开服务器还是可以读取到原来的session。<br>首次创建成功会生产唯一的sessionId，并通过响应头set-cookie返回给浏览器存储，以后浏览器访问服务器都会自动携带cookie，即有sessionId，服务器就能通过sessionId找到对应session内容。</p>
</blockquote>
<h3 id="创建-获取sesssion"><a href="#创建-获取sesssion" class="headerlink" title="创建/获取sesssion"></a>创建/获取sesssion</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//服务器已经有session返回存在的，没有就创建一个。</span>
HttpSession hs <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//服务存在session则返回session，否则返回null</span>
HttpSession hs <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="获取-设置-修改session属性"><a href="#获取-设置-修改session属性" class="headerlink" title="获取/设置/修改session属性"></a>获取/设置/修改session属性</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取属性值（没有对应属性返回null)</span>
hs<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"attri"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//添加新值</span>
hs<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"attri"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//修改原有值</span>
hs<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"attri"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//删除属性值</span>
hs<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"attri"</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="删除session"><a href="#删除session" class="headerlink" title="删除session"></a>删除session</h3><ul>
<li>使用invalidate方法<pre class="line-numbers language-java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>配置web.xml,设定超时时间（不能使用算术运算赋值）<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">></span></span>3600000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>关闭服务器，正常关闭序列化存储到磁盘，否则丢失session</li>
</ul>
]]></content>
      <categories>
        <category>cookie</category>
        <category>session</category>
      </categories>
      <tags>
        <tag>cookie</tag>
        <tag>session</tag>
      </tags>
  </entry>
  <entry>
    <title>dom垂直居中</title>
    <url>/2020/12/08/dom-chui-zhi-ju-zhong/</url>
    <content><![CDATA[<h2 id="flex布局实现垂直居中"><a href="#flex布局实现垂直居中" class="headerlink" title="flex布局实现垂直居中"></a>flex布局实现垂直居中</h2><iframe id="cp_embed_YzGWgKX" src="//codepen.io/hyong1232/embed/YzGWgKX?height=360&theme-id=dark&slug-hash=YzGWgKX&default-tab=css,result" scrolling="no" frameborder="no" height="360" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>

<h2 id="position-transfrom实现垂直居中"><a href="#position-transfrom实现垂直居中" class="headerlink" title="position+transfrom实现垂直居中"></a>position+transfrom实现垂直居中</h2><iframe id="cp_embed_yLaazGz" src="//codepen.io/hyong1232/embed/yLaazGz?height=360&theme-id=dark&slug-hash=yLaazGz&default-tab=css,result" scrolling="no" frameborder="no" height="360" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>

<h2 id="margin实现垂直居中"><a href="#margin实现垂直居中" class="headerlink" title="margin实现垂直居中"></a>margin实现垂直居中</h2><iframe id="cp_embed_wvzzPEp" src="//codepen.io/hyong1232/embed/wvzzPEp?height=360&theme-id=dark&slug-hash=wvzzPEp&default-tab=css,result" scrolling="no" frameborder="no" height="360" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>

<h2 id="line-height-vertical实现垂直居中（仅适用于图片文字）"><a href="#line-height-vertical实现垂直居中（仅适用于图片文字）" class="headerlink" title="line-height+vertical实现垂直居中（仅适用于图片文字）"></a>line-height+vertical实现垂直居中（仅适用于图片文字）</h2><iframe id="cp_embed_bGwwaEx" src="//codepen.io/hyong1232/embed/bGwwaEx?height=360&theme-id=dark&slug-hash=bGwwaEx&default-tab=css,result" scrolling="no" frameborder="no" height="360" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>

<h2 id="display-table实现垂直居中"><a href="#display-table实现垂直居中" class="headerlink" title="display:table实现垂直居中"></a>display:table实现垂直居中</h2><iframe id="cp_embed_gOwwoLe" src="//codepen.io/hyong1232/embed/gOwwoLe?height=360&theme-id=dark&slug-hash=gOwwoLe&default-tab=css,result" scrolling="no" frameborder="no" height="360" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>

<h2 id="grid布局实现垂直居中"><a href="#grid布局实现垂直居中" class="headerlink" title="grid布局实现垂直居中"></a>grid布局实现垂直居中</h2><iframe id="cp_embed_PoGGEJB" src="//codepen.io/hyong1232/embed/PoGGEJB?height=360&theme-id=dark&slug-hash=PoGGEJB&default-tab=css,result" scrolling="no" frameborder="no" height="360" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css布局</tag>
        <tag>layout</tag>
      </tags>
  </entry>
  <entry>
    <title>es6变量解构</title>
    <url>/2021/03/15/es6-bian-liang-jie-gou/</url>
    <content><![CDATA[<h2 id="数组机构赋值"><a href="#数组机构赋值" class="headerlink" title="数组机构赋值"></a>数组机构赋值</h2><blockquote>
<p>匹配赋值，即只要等号右边的结构与左边相同或包含左侧结构，且右侧有iterator接口，即可成功，复制失败则左侧值为undefined。</p>
</blockquote>
<ul>
<li><p>左侧结构小于右侧</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a=1,b=2</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>右侧结构小于左侧</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a=1,b=undefined</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>函数惰性赋值,即当有对应的解构赋值时是不会触发函数求值的。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'run function ...'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//a=1,b=undefined</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>特殊情况set和generator函数也是可以正常解构赋值的。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//set赋值</span>
<span class="token keyword">var</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//a=1,b=2</span>
<span class="token comment" spellcheck="true">//generator赋值</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">fibs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">//加分号</span>
      <span class="token keyword">yield</span> a<span class="token punctuation">;</span>
      <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>one<span class="token punctuation">,</span>two<span class="token punctuation">,</span>three<span class="token punctuation">,</span>four<span class="token punctuation">,</span>five<span class="token punctuation">,</span>six<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fibs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//six 5</span>
<span class="token template-string"><span class="token string">``</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p>`</p>
]]></content>
      <categories>
        <category>es6</category>
      </categories>
      <tags>
        <tag>变量解构</tag>
      </tags>
  </entry>
  <entry>
    <title>es6编程风格</title>
    <url>/2020/09/23/es6-bian-cheng-feng-ge/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>由于现行js的使用版本不一致，导致老版js和es6混用，以及es6本身的使用不规范，造成代码的格式不标准，不便于代码的维护和修改，故参考行业先进规范以改正。</p>
<span id="more"></span>

<h2 id="变量定义关键字替换"><a href="#变量定义关键字替换" class="headerlink" title="变量定义关键字替换"></a>变量定义关键字替换</h2><p>1、使用let取代var</p>
<ul>
<li>没有了变量提升，更严谨（存在temporal dead zone暂时性死区）需要先定义再使用。</li>
</ul>
<p>2、使用const声明全局常量</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>统一使用单引号，有变量的成分就是用反引号。</p>
<h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><blockquote>
<p>尽量使用结构赋值，保证简洁明了</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//常用于</span>
<span class="token comment" spellcheck="true">//1、数组赋值</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>one<span class="token punctuation">,</span>two<span class="token punctuation">]</span> <span class="token operator">=</span> arr
<span class="token comment" spellcheck="true">//2、获取函数参数</span>
<span class="token keyword">function</span> <span class="token function">everyfunc</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>one<span class="token punctuation">,</span>two<span class="token punctuation">}</span> <span class="token operator">=</span> params
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//3、函数返回值&amp;&amp;获取函数返回值（尽量使用对象返回结构，便于添加和修改顺序）</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>one<span class="token punctuation">,</span>two<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getReturnFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">getReturnFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>one<span class="token punctuation">,</span>two<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>1、对象定义时，多行元素最后一个要加上‘,’，定义在一行上则不必</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>
    b<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2、尽量不要修改，静态化，修改使用Object.assign(target,…origin)（可以有多个源对象）修改。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span>
    one<span class="token punctuation">:</span><span class="token string">'one'</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span><span class="token punctuation">{</span>two<span class="token punctuation">:</span><span class="token string">'two'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token operator">></span>target<span class="token operator">=</span><span class="token punctuation">{</span>one<span class="token punctuation">:</span><span class="token string">'one'</span><span class="token punctuation">,</span>two<span class="token punctuation">:</span><span class="token string">'two'</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>3、如果定义时元素名称不确定，使用属性表达式，即‘[要运算的表达式]’作为元素名称。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">'jack'</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>4、对象内部方法省略function关键字，同名键名称省略</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    one<span class="token punctuation">,</span>
    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token operator">...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>1、复制数组使用扩展运算符</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> oldArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>oldArr<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>2、将类数组转换成数组使用Array.from(target)target需要是可迭代的对象（有length属性）</p>
<pre class="line-numbers language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>1、箭头函数</p>
<ul>
<li><p>简单的函数</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">*</span> x<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>绑定this值，代替使用（_self/that/_this）表示this</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// bad</span>
<span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> boundMethod <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// acceptable</span>
<span class="token keyword">const</span> boundMethod <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// best</span>
<span class="token keyword">const</span> boundMethod <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> method<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p>2、参数</p>
<ul>
<li><p>不用argument关键字，获取参数使用（…params）直接获取参数数组</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token punctuation">)</span><span class="token punctuation">{</span>
  params<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>在参数列表设置默认参数</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span><span class="token punctuation">(</span>params<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  anything<span class="token operator">...</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="使用Map代替Object对象的使用"><a href="#使用Map代替Object对象的使用" class="headerlink" title="使用Map代替Object对象的使用"></a>使用Map代替Object对象的使用</h2><blockquote>
<p>Map有key:value结构，有自己的遍历方法，object使用在具体业务特殊对象。</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>可迭代对象<span class="token punctuation">)</span>
<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//keys()便利key值</span>
<span class="token keyword">for</span> key <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//values()便利值</span>

<span class="token comment" spellcheck="true">//entries()获取值和key值（为数组则是下标数值）</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="class代替原有的直接操作Prototype属性，规范类定义使用"><a href="#class代替原有的直接操作Prototype属性，规范类定义使用" class="headerlink" title="class代替原有的直接操作Prototype属性，规范类定义使用"></a>class代替原有的直接操作Prototype属性，规范类定义使用</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// bad</span>
<span class="token keyword">const</span> inherits <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'inherits'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">PeekableQueue</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Queue<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">inherits</span><span class="token punctuation">(</span>PeekableQueue<span class="token punctuation">,</span> Queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
PeekableQueue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>peek <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// good</span>
<span class="token keyword">class</span> <span class="token class-name">PeekableQueue</span> <span class="token keyword">extends</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>
  <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="使用es6的模块化代替CommonJS的模块化引用"><a href="#使用es6的模块化代替CommonJS的模块化引用" class="headerlink" title="使用es6的模块化代替CommonJS的模块化引用"></a>使用es6的模块化代替CommonJS的模块化引用</h2>]]></content>
      <categories>
        <category>es6</category>
      </categories>
      <tags>
        <tag>代码规范</tag>
        <tag>编程风格</tag>
      </tags>
  </entry>
  <entry>
    <title>flex布局</title>
    <url>/2020/05/16/flex-bu-ju/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>感谢阮一峰先生的分享<a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">flex-examples</a> 仅供个人学习</strong><br>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。<span id="more"></span></p>
<blockquote>
<ul>
<li>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>任何一个容器都可以指定为 Flex 布局，行内元素也可以使用flex布局，跳帧位置。</li>
</ul>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*块级元素*/</span>
<span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/*行内元素*/</span>
<span class="token property">display</span><span class="token punctuation">:</span> inline-flex<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<ul>
<li>Webkit 内核的浏览器，必须加上-webkit前缀。</li>
</ul>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-flex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Safari */</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong><em>注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。</em></strong></p>
<blockquote>
<ul>
<li>flex布局的元素，称为flex container，他的所有子元素成为flex-items项目。</li>
</ul>
</blockquote>
<img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png" class="" title="flex-container">
<blockquote>
<p>其中main-axis称为主轴，across-axis称为交叉轴，所有flex-item默认沿着主轴排列。单个项目占据的主轴|交叉轴空间叫做main-size|across-size</p>
</blockquote>
<h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071003.jpg" class="" title="browser Support">

<h2 id="属性介绍"><a href="#属性介绍" class="headerlink" title="属性介绍"></a>属性介绍</h2><h3 id="flex-container属性"><a href="#flex-container属性" class="headerlink" title="flex-container属性"></a>flex-container属性</h3><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><blockquote>
<p>可选属性，决定主轴的方向，即项目的排列方向</p>
</blockquote>
<table>
<thead>
<tr>
<th>值</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>row（默认值）</td>
<td>主轴为水平方向，起点在左端</td>
</tr>
<tr>
<td>row-reverse</td>
<td>主轴为水平方向，起点在右端</td>
</tr>
<tr>
<td>column</td>
<td>主轴为垂直方向，起点在上沿</td>
</tr>
<tr>
<td>column-reverse</td>
<td>主轴为垂直方向，起点在下沿</td>
</tr>
</tbody></table>
<img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png" class="" title="flex-dirction布局样式">

<h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h4><blockquote>
<p>1、 默认情况下所有flex-item都排列在主轴上，此属性规定超过了主轴长度后的项目排列方式<br>2、可选属性：nowrap（默认）|wrap换行|wrap-reverse换行并且换行的flex-item排列在上面<br>如下图所示</p>
</blockquote>
<div style="display:flex;align-items:center;justify-content:center;">
    <div style="flex:1;"><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071007.png" class="" title="flex-wrap:nowrap布局样式"></div>
    <div style="flex:1;"><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071008.jpg" class="" title="flex-wrap:wrap布局样式"></div>
    <div style="flex:1;"><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071009.jpg" class="" title="flex-wrap:wrap-reverse布局样式"></div>
</div>
#### flex-flow
>是flex-direction和flex-wrap的简写形式
```css
flex-flow:<flex-direction> || <flex-wrap>
```

<h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><blockquote>
<p>1、定义了flex-item在主轴上的排列位置<br>2、可选属性：flex-start（默认）左对齐|flex-end右对齐|center居中|space-between两端对齐，项目间隔相等|space-around项目间隔相等，项目直接间隔是项目与flex-container边框间隔的2倍</p>
</blockquote>
<div style="display:flex;align-items:center;justify-content:center;">
    <div style="flex:1;">![flex-start](/images/flex/flex-start.PNG)
        <p class="image-caption">flex-start</p>
    </div>
    <div style="flex:1;">![flex-start](/images/flex/flex-end.PNG)
        <p class="image-caption">flex-end</p>
    </div>
    <div style="flex:1;">![flex-start](/images/flex/center.PNG)
        <p class="image-caption">cener</p>
    </div>
</div>
<div style="display:flex;align-items:center;justify-content:center;">
    <div style="flex:1;">![flex-start](/images/flex/space-between.PNG)
        <p class="image-caption">space-between</p>
    </div>
    <div style="flex:1;">![flex-start](/images/flex/space-around.PNG)
        <p class="image-caption">space-around</p>
    </div>
</div>

<h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><blockquote>
<p>1、定义了flex-item在交叉轴上的排列位置<br>2、可选属性：flex-start对齐交叉轴顶点|flex-end对齐交叉轴终点|center对齐交叉轴中心|stretch（默认）拉升高度至交叉轴高度|baseline所有的flex-items的第一行文字基线</p>
</blockquote>
<div style="display:flex;align-items:center;justify-content:center;">
    <div style="flex:1;">![flex-start](/images/flex/ai-flex-start.PNG)
        <p class="image-caption">align-items:flex-start</p>
    </div>
    <div style="flex:1;">![flex-start](/images/flex/ai-flex-end.PNG)
        <p class="image-caption">align-items:flex-end</p>
    </div>
    <div style="flex:1;">![flex-start](/images/flex/ai-center.PNG)
        <p class="image-caption">align-items:cener</p>
    </div>
</div>
<div style="display:flex;align-items:center;justify-content:center;">
    <div style="flex:1;">![flex-start](/images/flex/ai-stretch.PNG)
        <p class="image-caption">align-items:stretch</p>
    </div>
    <div style="flex:1;">![flex-start](/images/flex/ai-base-line.PNG)
        <p class="image-caption">align-items:baseline</p>
    </div>
</div>
#### align-content 
>1、定义多轴线（多行？）的对齐方式，单一轴线不起作用
>2、可选参数：flex-start|flex-end|center|space-bewteen|stretch|around

<img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png" class="" width="280" title="align-content样式图">

<h3 id="flex-items属性"><a href="#flex-items属性" class="headerlink" title="flex-items属性"></a>flex-items属性</h3><h4 id="order"><a href="#order" class="headerlink" title="order"></a>order</h4><blockquote>
<p>设置flex-item的显示位置，数字越小越靠前，类似于grid布局的grid-column|row-start|end属性设置</p>
</blockquote>
<p><img src="/images/flex/fi-order.PNG" alt="设置第四个order数值最小"></p>
<h4 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h4><blockquote>
<p>1、当以当主轴空间大于实际需要时，放大的比例，默认为0，即不放大<br>2、如果其他属性设置为1，当前设置为2，则当前项目是其他项目的两倍main-sie</p>
</blockquote>
<p><img src="/images/flex/fi-flex-grow.PNG" alt="flex-grow:2的flex-item"></p>
<h4 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h4><blockquote>
<p>1、定义当主轴空间不足时，flex-item的缩小比例<br>2、如果设置属性值为0，其他flex-item属性值为1则当空间不足时，不会缩小此flex-item</p>
</blockquote>
<p><img src="/images/flex/fi-flex-shrink.PNG" alt="browser-spport"></p>
<p class="image-caption">属性flex-shrink:0的flex-item不会缩小</p>

<h4 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h4><blockquote>
<p>1、规定再分配多余的空间之前，flex-item占据main-size的大小，浏览器根据占据的main-size计算是否长度充足<br>2、默认为auto，及项目本来大小，设置大小：n+px，flex-item将始终占据指定大小main-size</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*默认*/</span>
<span class="token property">flex-basis</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/*自定义*/</span>
<span class="token property">flex-basis</span><span class="token punctuation">:</span><span class="token number">300</span>px<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/images/flex/fi-flex-basis.PNG" alt="默认值auto，即为原本main-size"></p>
<h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><blockquote>
<p>1、是flex-grow&amp;flex-shrink&amp;flex-basis的简写形式<br>2、特殊样例 auto = 1 1 auto &amp;&amp; none = 0 0 auto</p>
</blockquote>
<h4 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h4><blockquote>
<p>1、默认是auto，即继承inherit父类即align-items的设置，但是可以单独设置样式来覆盖父类样式，没有父元素则属性值为stretch<br>2、可选属性值与align-items相同，用法相同，作用域只限于当前的flex-item</p>
</blockquote>
<p><img src="/images/flex/fi-align-self.PNG" alt="单独设置align-self:flex-end属性图"></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css布局</tag>
      </tags>
  </entry>
  <entry>
    <title>generic泛型</title>
    <url>/2021/02/27/generic-fan-xing/</url>
    <content><![CDATA[<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li><p>泛型没有以下继承结构</p>
<pre class="line-numbers language-java"><code class="language-java">ArrayList<span class="token operator">&lt;</span>Number<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span>
<span class="token comment" spellcheck="true">//错误</span>
List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span>
<span class="token comment" spellcheck="true">//正确</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>不包含基本类型int/short/byte…</p>
</li>
<li><p>不能获取泛型类Customer<String>.class，因为类型擦除，获取到的都是Object.class</p>
</li>
<li><p>因为类型擦除的缘故，泛型的类对象都是object，然后由编译器进行强转来完成的类型转换。</p>
</li>
<li><p>不能实例化泛型对象==&gt;&gt;都是new Object()</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//等同于</span>
<span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//正确写法是：</span>
<span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>不能覆盖object类原有的方法</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//这样写是错误的❌</span>
<span class="token keyword">public</span> Boolean <span class="token function">equals</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token operator">==</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//避免和object类的方法冲突</span>
<span class="token keyword">public</span> Boolean <span class="token function">same</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token operator">==</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>不能进行泛型间的转型，只能是类之间的转型——没有泛型的直接继承，可以用？进行继承或<strong>super</strong>关键字进行继承转换</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//正确</span>
List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//错误,没有这种写法</span>
ArrayList<span class="token operator">&lt;</span>Number<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//正确</span>
ArrayList<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Integer<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      ArrayList<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>泛型的PECS原则：Produce Extends Consumer Super(就是只能把子类（包含类型范围小）的值获取赋给父类（类型给范围大）)</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> test<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">PairFactory</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>
  <span class="token keyword">private</span> T one<span class="token punctuation">;</span>
  
  <span class="token keyword">public</span> <span class="token function">PairFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">PairFactory</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>one <span class="token operator">=</span> t<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> T <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> one<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>one <span class="token operator">=</span> t<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">"one:"</span><span class="token operator">+</span>one<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PECSDemo</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>PairFactory<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> p1<span class="token punctuation">,</span>PairFactory<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> p2<span class="token punctuation">)</span><span class="token punctuation">{</span>
      E n <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      p2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      PairFactory<span class="token operator">&lt;</span>Integer<span class="token operator">></span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PairFactory</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      PairFactory<span class="token operator">&lt;</span>Number<span class="token operator">></span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PairFactory</span><span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">copy</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>不能直接创建泛型数组，要通过反射新建，然后强制转型(FIFO算法实例)</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// FIFO-->>first input first output</span>
<span class="token comment" spellcheck="true">// array数组存储</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Array<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FIFODemo</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> E<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> capcity <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
  <span class="token comment" spellcheck="true">// 通过反射新建数组，然后强制转型成对应数组</span>
  <span class="token keyword">public</span> <span class="token function">FIFODemo</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>E<span class="token operator">></span> e<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"the lenth of container must > 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      arr <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> capcity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          capcity <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>
          arr <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> capcity<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
      index<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  E <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      E e <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> e<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      FIFODemo<span class="token operator">&lt;</span>String<span class="token operator">></span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FIFODemo</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      fd<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      fd<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      fd<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fd<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fd<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fd<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="泛型与可变参数"><a href="#泛型与可变参数" class="headerlink" title="泛型与可变参数"></a>泛型与可变参数</h2></li>
<li><p>字节码对象获取方法、执行方法及相关应用</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@CallerSensitive</span>
<span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>
  <span class="token keyword">throws</span> IllegalAccessException<span class="token punctuation">,</span> IllegalArgumentException<span class="token punctuation">,</span>
      InvocationTargetException
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>override<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Reflection<span class="token punctuation">.</span><span class="token function">quickCheckMemberAccess</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> caller <span class="token operator">=</span> Reflection<span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">checkAccess</span><span class="token punctuation">(</span>caller<span class="token punctuation">,</span> clazz<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  MethodAccessor ma <span class="token operator">=</span> methodAccessor<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// read volatile</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ma <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ma <span class="token operator">=</span> <span class="token function">acquireMethodAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> ma<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@CallerSensitive</span>
<span class="token keyword">public</span> Method <span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>
  <span class="token keyword">throws</span> NoSuchMethodException<span class="token punctuation">,</span> SecurityException <span class="token punctuation">{</span>
  <span class="token function">checkMemberAccess</span><span class="token punctuation">(</span>Member<span class="token punctuation">.</span>DECLARED<span class="token punctuation">,</span> Reflection<span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Method method <span class="token operator">=</span> <span class="token function">searchMethods</span><span class="token punctuation">(</span><span class="token function">privateGetDeclaredMethods</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> parameterTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token function">argumentTypesToString</span><span class="token punctuation">(</span>parameterTypes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> method<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
  ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//    list.add(100);//直接添加100不行，要在运行时通过反射调用方法添加</span>
  Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Method m <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>不能直接通过instanceof判定父类的泛型类型</p>
<pre class="line-numbers language-java"><code class="language-java">m1 <span class="token keyword">instanceof</span> <span class="token class-name">person</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token comment" spellcheck="true">//错误❌</span>
m1 <span class="token keyword">instanceof</span> <span class="token class-name">person</span><span class="token comment" spellcheck="true">//正确✔</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>如果在方法内部创建了泛型数组，最好不要将它返回给外部使用</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token operator">&lt;</span>K<span class="token operator">></span> K<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">pickTwo</span><span class="token punctuation">(</span>K k1<span class="token punctuation">,</span> K k2<span class="token punctuation">,</span> K k3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">asArray</span><span class="token punctuation">(</span>k1<span class="token punctuation">,</span> k2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">asArray</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> objs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> objs<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因为擦拭法，在pickTwo()方法内部，编译器无法检测K[]的正确类型，因此返回了Object[]。</p>
</li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="获取父类的泛型类型"><a href="#获取父类的泛型类型" class="headerlink" title="获取父类的泛型类型"></a>获取父类的泛型类型</h3><blockquote>
<p>java类型图</p>
</blockquote>
<pre class="line-numbers language-seq"><code class="language-seq">                      ┌────┐
                      │Type│
                      └────┘
                         ▲
                         │
   ┌────────────┬────────┴─────────┬───────────────┐
   │            │                  │               │
┌─────┐┌─────────────────┐┌────────────────┐┌────────────┐
│Class││ParameterizedType││GenericArrayType││WildcardType│
└─────┘└─────────────────┘└────────────────┘└────────────┘
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java">Class<span class="token operator">&lt;</span>Man<span class="token operator">></span> c <span class="token operator">=</span> Man<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
Type genericSuperclass <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getGenericSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>genericSuperclass <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Type<span class="token punctuation">[</span><span class="token punctuation">]</span> actualTypeArguments <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ParameterizedType<span class="token punctuation">)</span> genericSuperclass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> classType <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> actualTypeArguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classType<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>具体的操作步骤：获取对象的字节码对象===&gt;&gt;&gt;获取父类泛型类型，并判定是否是ParameterizedType类型===&gt;&gt;&gt;获取正式的参数类型数组===&gt;&gt;&gt;获取对应字节码对象。</p>
<h3 id="类、方法、接口的泛型应用"><a href="#类、方法、接口的泛型应用" class="headerlink" title="类、方法、接口的泛型应用"></a>类、方法、接口的泛型应用</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> generic<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">ClsDemo</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>
    T <span class="token function">getInstance</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span>E <span class="token function">getIns</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">ObjFactory</span><span class="token operator">&lt;</span>I<span class="token punctuation">,</span>R<span class="token operator">></span><span class="token punctuation">{</span>
    R <span class="token function">getInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>I<span class="token operator">></span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    R <span class="token function">getInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>I<span class="token operator">></span> i<span class="token punctuation">,</span>String s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">CreateInstance</span> <span class="token keyword">implements</span> <span class="token class-name">ObjFactory</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">{</span>

    <span class="token keyword">public</span> Object <span class="token function">getInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>String<span class="token operator">></span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String is <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            is <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> is<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Object <span class="token function">getInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>String<span class="token operator">></span> i<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClsMthIntCompareDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String i <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">CreateInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        String is2 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">ObjFactory</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">public</span> Object <span class="token function">getInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>String<span class="token operator">></span> i<span class="token punctuation">,</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                String is <span class="token operator">=</span> null<span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    Constructor<span class="token operator">&lt;</span>String<span class="token operator">></span> constructor <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    is <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> is<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">public</span> Object <span class="token function">getInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>String<span class="token operator">></span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> null<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"xixi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>is2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="线程安全的ArrayList"><a href="#线程安全的ArrayList" class="headerlink" title="线程安全的ArrayList"></a>线程安全的ArrayList</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Sync</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * version 1
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="基于LinkedList实现的Lru算法存储"><a href="#基于LinkedList实现的Lru算法存储" class="headerlink" title="基于LinkedList实现的Lru算法存储"></a>基于LinkedList实现的Lru算法存储</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LruCache</span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * version 1
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> maxCap<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">LruCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxCap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>maxCap<span class="token punctuation">,</span><span class="token number">0.75f</span> <span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxCap <span class="token operator">=</span> maxCap<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxCap <span class="token operator">&lt;</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>泛型</tag>
      </tags>
  </entry>
  <entry>
    <title>gird布局</title>
    <url>/2020/05/14/grid-bu-ju/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>感谢阮一峰先生的分享<a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">grid-layout-tutorial</a> 仅供个人学习。</strong></p>
<p>网格布局（Grid）是最强大的 CSS 布局方案。</p>
<p>它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。以前，只能通过复杂的 CSS 框架达到的效果，现在浏览器内置了。</p>
<span id="more"></span>

<img src="https://www.wangbase.com/blogimg/asset/201903/1_bg2019032501.png" class="" width="802" height="366" title="grid布局演示图片">

<p>如上图所示，grid布局是一种类二维布局的css布局方式，与flex布局一样，极大的方便了网页布局。</p>
<h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><p><img src="/images/browserSupport.PNG" alt="browser-spport"></p>
<p class="image-caption">支持的浏览器及其版本</p>

<h2 id="grid属性"><a href="#grid属性" class="headerlink" title="grid属性"></a>grid属性</h2><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><blockquote>
<p>可选参数 gird/inline-grid<br> 当参数为：gird时为块级元素、inline-grid则为行内元素</p>
</blockquote>
<h3 id="grid-template-columns"><a href="#grid-template-columns" class="headerlink" title="grid-template-columns"></a>grid-template-columns</h3><blockquote>
<p>规定grid的列宽<br>example:</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">grid-template-columns</span><span class="token punctuation">:</span><span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="grid-template-rows"><a href="#grid-template-rows" class="headerlink" title="grid-template-rows"></a>grid-template-rows</h3><blockquote>
<p>规定grid的行宽<br>example:</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">grid-template-rows</span><span class="token punctuation">:</span><span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>
<span class="token property">grid-template-rows</span><span class="token punctuation">:</span><span class="token number">33%</span> <span class="token number">33%</span> <span class="token number">33%</span><span class="token punctuation">;</span>
<span class="token property">grid-template-rows</span><span class="token punctuation">:</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span>,<span class="token number">33%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>grid函数设置宽高的函数</strong><br>这些函数都可以与百分比、px、fr特数字组合定义宽高</p>
<p>固定100px的结果如下图所示</p>
<img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032506.png" class="" width="220" height="320" title="固定px的grid示例">

<p>平分宽度|高度的可以设置== 百分比 ==，或者设置1fr-类似flex，结合repeat函数则为</p>
<h4 id="repeat-循环次数，循环体"><a href="#repeat-循环次数，循环体" class="headerlink" title="repeat(循环次数，循环体)"></a>repeat(循环次数，循环体)</h4><p>参数：循环体可以为特殊关键字n+fr，与flex类似。</p>
<blockquote>
<p>循环次数可为特殊关键字auto-fill，表示使用循环体格式自动填充满整个grid布局 。</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">grid-template-rows</span><span class="token punctuation">:</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span>,<span class="token number">1</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token property">grid-template-rows</span><span class="token punctuation">:</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span>,<span class="token number">33%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>特殊的循环体</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">100</span>px <span class="token number">20</span>px <span class="token number">80</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032507.png" class="" title="特殊循环体的repeat示例">

<h4 id="minmax-min-max-函数"><a href="#minmax-min-max-函数" class="headerlink" title="minmax(min,max)函数"></a>minmax(min,max)函数</h4><blockquote>
<p>参数：最大最小值，可以为px，fr，百分比<br>定义一个范围值，让宽高在这之中自适应</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">grid-template-rows</span><span class="token punctuation">:</span><span class="token function">minmax</span><span class="token punctuation">(</span><span class="token number">100</span>px,<span class="token number">1</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token property">grid-template-rows</span><span class="token punctuation">:</span><span class="token function">minmax</span><span class="token punctuation">(</span><span class="token number">100</span>px,<span class="token number">33%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="auto关键字"><a href="#auto关键字" class="headerlink" title="auto关键字"></a>auto关键字</h4><blockquote>
<p>可在宽高定义时，与百分比，px，fr混用</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto <span class="token number">100</span>px<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>表示grid布局中，左右为100px，中间为自适应宽度</p>
</blockquote>
<h4 id="auto-fill关键字"><a href="#auto-fill关键字" class="headerlink" title="auto-fill关键字"></a>auto-fill关键字</h4><blockquote>
<p>可以与百分比，fr，px混用，还可以代替repeat函数的循环次数，让他自适应，并换行，类似flex布局的</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">flex-wrap</span><span class="token punctuation">:</span>wrap<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>自动换行：</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill, <span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032508.png" class="" title="auto-fill关键字+repeat函数自动换行示例">

<h4 id="布局实用示例"><a href="#布局实用示例" class="headerlink" title="布局实用示例"></a>布局实用示例</h4><ul>
<li>3:7两栏式布局<pre class="line-numbers language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">70%</span> <span class="token number">30%</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>十二网格布局<pre class="line-numbers language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">12</span>,<span class="token number">1</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="grid-row-gap-amp-amp-grid-column-gap"><a href="#grid-row-gap-amp-amp-grid-column-gap" class="headerlink" title="grid-row-gap&amp;&amp;grid-column-gap"></a>grid-row-gap&amp;&amp;grid-column-gap</h3><blockquote>
<p>两者可以结合写成</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">gird-gap</span><span class="token punctuation">:</span>&lt;grid-row-gap> &lt;grid-column-gap>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>简写成gird-gap时，可以只写一个值，表示行间距与列间距相同</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">grid-gap</span><span class="token punctuation">:</span> <span class="token number">20</span>px
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>新标准省略grid-字符，简写为</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">gap</span><span class="token punctuation">:</span> <span class="token number">20</span>px
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032511.png" class="" width="280" title="gap间距为20px示例">

<h3 id="grid-auto-flow"><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a>grid-auto-flow</h3><blockquote>
<p>规定grid布局的排列顺序，可选参数：row/column，默认为row，即优先从左到右的依次排列<br>可选参数row dense/column dense规定除了指定行列的布局外，其他grid单元的布局顺序</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>grid<span class="token punctuation">;</span>
<span class="token property">grid-template-rows</span><span class="token punctuation">:</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span>,<span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token property">grid-template-columns</span><span class="token punctuation">:</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span>,<span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token property">grid-auto-flow</span><span class="token punctuation">:</span>row dense<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>指定grid-cell的列宽，左闭右开原则</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">grid-column-start</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token property">grid-column-end</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>grid-column-start/end设置的数字单位为grid-cell面积，左闭右开，结果如下图所示：</p>
</blockquote>
<img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032514.png" class="" width="280" title="指定单元格，其余row
布局示例">

<blockquote>
<p>如果单独设置grid的大小要注意不要超过grid定义的gird-cell个数，否则自适应，如下图所示：</p>
</blockquote>
<p><img src="/images/overgridnumber.PNG" alt="自定义grid-cell范围超过初始化定义图"></p>
<p>上图中7、8、9因为超过了初始设置的grid-cell范围，而自适应 <strong>解决办法</strong>：补足不足grid个数或调整布局 <strong>增加初始设置的行列即可</strong></p>
<h3 id="align-items-amp-amp-justliy-items-amp-amp-place-items"><a href="#align-items-amp-amp-justliy-items-amp-amp-place-items" class="headerlink" title="align-items&amp;&amp;justliy-items&amp;&amp;place-items"></a>align-items&amp;&amp;justliy-items&amp;&amp;place-items</h3><blockquote>
<p>规定grid-cell的位置，align表示高（上、中、下）、justlify表示宽（左、中、右）<br>可选属性：start|center|end|stretch——靠左|居中|靠右|自动填满<br>place-items是简写形式</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">place-items</span><span class="token punctuation">:</span>&lt;align-items> &lt;justify-items>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>如果不写第二个参数则默认两个属性值相同</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">align-items</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>
<span class="token property">justify-items</span><span class="token punctuation">:</span>strech<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/* 简写 */</span>
<span class="token property">place-items</span><span class="token punctuation">:</span>&lt;align-items> &lt;justify-items>
<span class="token property">place-items</span><span class="token punctuation">:</span>stretch center<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如下图所示<br><img src="/images/center-stretch.PNG" alt="place-items结果图"></p>
<h3 id="align-self-amp-amp-justify-self-amp-amp-place-self"><a href="#align-self-amp-amp-justify-self-amp-amp-place-self" class="headerlink" title="align-self&amp;&amp;justify-self&amp;&amp;place-self"></a>align-self&amp;&amp;justify-self&amp;&amp;place-self</h3><blockquote>
<p>与align|justify|place-items用法完全一致，但只作用于单个grid-cell</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>
  <span class="token property">place-self</span><span class="token punctuation">:</span>stretch center<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ef342a</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/images/place-self.PNG" alt="place-self单个grid-cell作用域"></p>
<h3 id="align-content-amp-amp-justify-content-amp-amp-place-content"><a href="#align-content-amp-amp-justify-content-amp-amp-place-content" class="headerlink" title="align-content&amp;&amp;justify-content&amp;&amp;place-content"></a>align-content&amp;&amp;justify-content&amp;&amp;place-content</h3><blockquote>
<p>规定整个项目在grid-container中的位置<br>可选属性：start|center|space-between|space-evenly|space-around——between间隔在项目之间</p>
</blockquote>
<div style="display:grid;grid-template-columns:repeat(3,1fr);grid-template-rows:160px;grid-auto-rows:0;gap:10px">
    <div style="grid-column-start:1;grid-row-start:1;"><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032522.png" class="" title="space-around"></div>
    <div style="grid-column-start:2;grid-row-start:1;"><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032523.png" class="" title="space-between"></div>
    <div style="grid-column-start:3;grid-row-start:1;"><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032524.png" class="" title="space-evenly"></div>
</div>

<h3 id="grid-auto-row-amp-amp-grid-auto-column"><a href="#grid-auto-row-amp-amp-grid-auto-column" class="headerlink" title="grid-auto-row&amp;&amp;grid-auto-column"></a>grid-auto-row&amp;&amp;grid-auto-column</h3><blockquote>
<p>规定如果定义的grid-cell不在初始定义的grid-cell数量之内，扩展的grid-cell的列宽、行高</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css">  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>
  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>
  <span class="token property">grid-auto-rows</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032525.png" class="" width="280" title="grid-auto-row为50px">

<h3 id="grid-template-amp-amp-grid"><a href="#grid-template-amp-amp-grid" class="headerlink" title="grid-template&amp;&amp;grid"></a>grid-template&amp;&amp;grid</h3><blockquote>
<p>grid-template属性是grid-template-columns、grid-template-rows和grid-template-areas这三个属性的合并简写形式。</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">grid-template</span><span class="token punctuation">:</span>&lt;grid-template-rows> &lt;grid-template-area> / &lt;grid-template-columns>
example
<span class="token property">grid-template</span><span class="token punctuation">:</span> [header-left] <span class="token string">"head head"</span> <span class="token number">30</span>px [header-right]
                [main-left]   <span class="token string">"nav  main"</span> <span class="token number">1</span>fr  [main-right]
                [footer-left] <span class="token string">"nav  foot"</span> <span class="token number">30</span>px [footer-right]
                / <span class="token number">120</span>px <span class="token number">1</span>fr<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>等同于</p>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">grid-template-rows</span><span class="token punctuation">:</span> [header-left] <span class="token number">30</span>px [header-right main-left] <span class="token number">1</span>fr [main-right footer-left] <span class="token number">30</span>px [footer-right]<span class="token punctuation">;</span>
<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">120</span>px <span class="token number">1</span>fr<span class="token punctuation">;</span>
<span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">"head head"</span> <span class="token string">"nav main"</span> <span class="token string">"nav foot"</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="/images/grid-template.PNG" alt="grid-template简写结果图"></p>
<blockquote>
<p>grid属性是grid-template-rows、grid-template-columns、grid-template-areas、 grid-auto-rows、grid-auto-columns、grid-auto-flow这六个属性的合并简写形式。<br>从易读易写的角度考虑，还是建议不要合并属性，所以这里就不详细介绍这个属性了。</p>
</blockquote>
<h2 id="grid-cell属性"><a href="#grid-cell属性" class="headerlink" title="grid-cell属性"></a>grid-cell属性</h2><h3 id="grid-column-start-end-amp-amp-grid-row-start-end"><a href="#grid-column-start-end-amp-amp-grid-row-start-end" class="headerlink" title="grid-column-start|end&amp;&amp;grid-row-start|end"></a>grid-column-start|end&amp;&amp;grid-row-start|end</h3><blockquote>
<p>1、属性值可为数字，与grid-auto-flow属性结合可以实现特定布局</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css">  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token property">grid-row-start</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token property">grid-row-end</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032527.png" class="" width="280" title="数字方式定义grid-cell起始位置">
<blockquote>
<p>2、span参数结合使用，表示跨过多少个grid-cell，即可用在start，也可用在end</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"> <span class="token property">grid-column-end</span><span class="token punctuation">:</span> span <span class="token number">2</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032528.png" class="" width="280" title="数字方式定义grid-cell起始位置">
<blockquote>
<p>3、如果因为设置属性产生了重叠，可通过设置z-index调整</p>
</blockquote>
<h3 id="grid-column-amp-amp-grid-row"><a href="#grid-column-amp-amp-grid-row" class="headerlink" title="grid-column&amp;&amp;grid-row"></a>grid-column&amp;&amp;grid-row</h3><blockquote>
<p>1、是grid-row-start|end和grid-column-start|end的简写</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"> <span class="token property">grid-row</span><span class="token punctuation">:</span>&lt;grid-row-start> &lt;grid-row-end><span class="token punctuation">;</span>
 <span class="token property">grid-columns</span><span class="token punctuation">:</span>&lt;grid-columns-start> &lt;grid-columns-end><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>2、可以与span（宽行）联合使用</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#b03532</span><span class="token punctuation">;</span>
  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/* 等同于 */</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#b03532</span><span class="token punctuation">;</span>
  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span> / span <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span> / span <span class="token number">2</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>3、可以不写/end，默认是跨了一行</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css">  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>上面代码表示第一个grid</p>
</blockquote>
<p><strong>简写时不可直接写span+n而不规定起/始位置！！！</strong></p>
<h3 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h3><blockquote>
<p>1、给grid命名并划分区域</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css">  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>
  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>
  <span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">'a b c'</span>
                       <span class="token string">'d e f'</span>
                       <span class="token string">'g h i'</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>上面代码表示将grid划分为a~i的九个区域，相同命名就是同一个区域，结合grid-area可指定grid-cell大小</p>
</blockquote>
<blockquote>
<p>2、不用利用的区域用’.’代替命名</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css">    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>
    <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>
    <span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">'a . c'</span>
                        <span class="token string">'d . f'</span>
                        <span class="token string">'g . i'</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>上面代码表示中间区域不使用,不属于任何区域</p>
</blockquote>
<blockquote>
<p>3、区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为 <strong>区域名-start</strong>，终止网格线自动命名为 <strong>区域名-end</strong>。如上面的a区域的起始网格线为a-start&amp;a-end</p>
</blockquote>
<h3 id="grid-area"><a href="#grid-area" class="headerlink" title="grid-area"></a>grid-area</h3><blockquote>
<p>1、与grid-template-area结合使用，指定grid-cell位置</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span></span><span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>
  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>
  <span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">'a b c'</span>
                     <span class="token string">'d e f'</span>
                     <span class="token string">'g h i'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ef342a</span><span class="token punctuation">;</span>
  <span class="token property">grid-area</span><span class="token punctuation">:</span> e<span class="token punctuation">;</span>
<span class="token punctuation">}</span>       
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如下图</p>
<img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032530.png" class="" width="280" title="grid-area指定grid-cell位置">

<blockquote>
<p>2、是grid-row|column-start|end的简写</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css">    <span class="token property">grid-area</span><span class="token punctuation">:</span> &lt;row-start> / &lt;column-start> / &lt;row-end> / &lt;column-end><span class="token punctuation">;</span>
    example
    <span class="token property">gird</span><span class="token punctuation">:</span><span class="token number">1</span>/<span class="token number">1</span>/<span class="token number">3</span>/<span class="token number">3</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如下图所示，简写结果 <strong>不支持span结合使用</strong><br><img src="/images/grid-area.PNG" alt="grid-area简写结果图"></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css布局</tag>
      </tags>
  </entry>
  <entry>
    <title>git-operations</title>
    <url>/2020/09/08/git-operations/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>感谢阮一峰先生的分享<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用git命令清单</a> 仅供个人学习。</strong><br>关于git的常见操作命令，和对版本，分支的处理还有git的工作流程的解释说明。</p>
<span id="more"></span>
<p>常用的6个git命令可以用下面的一张图表示：</p>
<img src="/images/git.png" class="" title="常用git命令图">

<table>
<thead>
<tr>
<th>名称</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>workspace</td>
<td>工作区，即自己写代码的文件夹</td>
</tr>
<tr>
<td>Index</td>
<td>暂存区，可以撤销保存，适用于大型项目文件的提交修改</td>
</tr>
<tr>
<td>Remote</td>
<td>可以是自己的服务器或者是github或者gitee这样的第三方工作仓库。</td>
</tr>
<tr>
<td>Repository</td>
<td>指的是自己的本地仓库，就是在以.git结尾的文件夹中的文件</td>
</tr>
</tbody></table>
<h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><p> 初始化一个代码库 </p>
<blockquote>
<p>本地初始化</p>
</blockquote>
<pre class="line-numbers language-git"><code class="language-git">git init [project-name]
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>本地新建一个代码库会新建一个.git隐藏文件</li>
</ul>
<blockquote>
<p>clone仓库中已有的代码到本地</p>
</blockquote>
<pre class="line-numbers language-git"><code class="language-git">git clone url [project-name] [--depth=num] 
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>其中num为想要拷取的代码仓库深度，为1则表示最近一次的更新的最新代码</li>
</ul>
<h2 id="暂存区操作"><a href="#暂存区操作" class="headerlink" title="暂存区操作"></a>暂存区操作</h2><p>1、添加文件到暂存区</p>
<pre class="line-numbers language-git"><code class="language-git">git add [file1] [file2] ...
git add [dir]
git add .
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>其中 . 代表所有修改了的文件，最常用</li>
</ul>
<p>2、将文件删除/从暂存区删除</p>
<pre class="line-numbers language-git"><code class="language-git">git rm [file1] [file2] ...
git rm --cached [filename]
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>其中–cached代表不删除工作区文件，只是从暂存区中删除</li>
<li>只有在暂存区中的文件对其执行删除操作才有效</li>
</ul>
<p>3、修改文件名称，并将修改信息存入暂存区</p>
<pre class="line-numbers language-git"><code class="language-git">git mv [file-origin-name] [file-new-name] 
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>文件要先在暂存区中</li>
</ul>
<h2 id="提交文件到本地仓库"><a href="#提交文件到本地仓库" class="headerlink" title="提交文件到本地仓库"></a>提交文件到本地仓库</h2><blockquote>
<p>提交操作都是需要写注释的，便于协作</p>
</blockquote>
<p>1、直接提交文件到仓库</p>
<pre class="line-numbers language-git"><code class="language-git"><span class="token comment" spellcheck="true">#提交所有有修改记录的文件到仓库</span>
git commit -m <span class="token string">"message"</span>

<span class="token comment" spellcheck="true">#指定要提交的提交文件</span>
git commit [file1] [file2]... -m <span class="token string">"message"</span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2、用本次提交覆盖上次的提交</p>
<pre class="line-numbers language-git"><code class="language-git"><span class="token comment" spellcheck="true">#覆盖上次提交到仓库的内容，仓库中的文件修改一本次为准</span>
git commit --amend -m <span class="token string">"message"</span>

<span class="token comment" spellcheck="true">#指定要覆盖的仓库文件</span>
git commit --amend [file1] [file2]... -m <span class="token string">"message"</span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3、其他提交</p>
<pre class="line-numbers language-git"><code class="language-git"><span class="token comment" spellcheck="true">#提交工作区自上次commit之后的变化，直接到仓库区(不包括新增文件/文件夹)</span>
git commit -a

<span class="token comment" spellcheck="true">#提交时显示所有diff信息</span>
git commit -v
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="提交文件至远程仓库"><a href="#提交文件至远程仓库" class="headerlink" title="提交文件至远程仓库"></a>提交文件至远程仓库</h2><table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>git fetch [remote]</td>
<td>更新指定远程仓库的所有修改到本地仓库中</td>
</tr>
<tr>
<td>git remote -v</td>
<td>显示所有的远程的别名&amp;地址</td>
</tr>
<tr>
<td>git remote show remote-name</td>
<td>显示别名仓库地址的信息</td>
</tr>
<tr>
<td>git remote add remote-name url</td>
<td>添加新的远程仓库地址，并命名</td>
</tr>
<tr>
<td>git pull [remote] [branch]</td>
<td>将远程仓库中的内容与指定分支合并</td>
</tr>
<tr>
<td>git push [remote] [branch]</td>
<td>将本地指定分支推送到远程仓库</td>
</tr>
<tr>
<td>git push [remote] –force</td>
<td>将本地分支强行推送到远程仓库，忽略冲突</td>
</tr>
<tr>
<td>git push [remote] –all</td>
<td>将所有分支推送到远程仓库</td>
</tr>
</tbody></table>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>1、新建分支&amp;切换工作区</p>
<pre class="line-numbers language-git"><code class="language-git"><span class="token comment" spellcheck="true">#新建分支</span>
git branch [branch-name]

<span class="token comment" spellcheck="true">#切换当前分支到指定分支</span>
git checkout [branch-name]

<span class="token comment" spellcheck="true">#新建分支并切换到该分支</span>
git checkout -b [branch-name]

<span class="token comment" spellcheck="true">#切换到最近切换的分支</span>
git checkout -
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2、查看分支</p>
<pre class="line-numbers language-git"><code class="language-git"><span class="token comment" spellcheck="true">#产看本地分支</span>
git branch

<span class="token comment" spellcheck="true">#查看远程分支</span>
git branch -r

<span class="token comment" spellcheck="true">#查看所有分支（本地加远程）</span>
git branch -a
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3、删除分支</p>
<pre class="line-numbers language-git"><code class="language-git"><span class="token comment" spellcheck="true">#删除本地分支</span>
git branch -d [branch-name]

<span class="token comment" spellcheck="true">#删除远程分支</span>
git branch [remote-name] --delete [branch-name]
git branch -dr [remote/branch]
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>4、合并分支</p>
<pre class="line-numbers language-git"><code class="language-git"><span class="token comment" spellcheck="true">#合并指定分支到当前分支</span>
git merge [branch]
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="远程分支相关"><a href="#远程分支相关" class="headerlink" title="远程分支相关"></a>远程分支相关</h4><pre class="line-numbers language-shell"><code class="language-shell"># 新建远程分支
git push origin localbranch:remotebranch
# 删除远程分支
git push origin :remotebranch
git push origin --delete remotebranch
git branch -dr origin/remotebranch
# 本地与远程建立追踪关系
git branch -u origin/remotebranch
git branch --set-upstream-to origin remotebranch
# 设置远程dev分支为默认分支
git remote set-head origin dev
# 合并保留临时分支 --no-ff
git merge --no-ff -m "" targetBranch
# 暂存workspace和index/stage
git stash
git stash list
git stash apply [stash@{num}]
git stash pop [stash@{num}]
# 创建本地分支，并于远程分支建立追踪关系
git checkout -b newBranch origin/remoteBranch
# 日志
git log --graph --pretty=oneline --abbrev-commit
git log --pretty=oneline --abbrev-commit
# 标签
git tag
git tag [tagName] [commitId]
git tag -d tagName
git tag -a tagName -m "description"
git push origin tagName
git push origin --tags
git push origin :refs/tags/tagName # 先删除本地，然后推送到远程
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git常用操作</tag>
      </tags>
  </entry>
  <entry>
    <title>gulp使用小结</title>
    <url>/2021/04/06/gulp-shi-yong-xiao-jie/</url>
    <content><![CDATA[<h2 id="gulp介绍"><a href="#gulp介绍" class="headerlink" title="gulp介绍"></a>gulp介绍</h2><blockquote>
<p>1、gulp是一种类似于webpack的自动化构建工具，所有的操作均基于“流”，其本身是基于node构建的，大部分的功能以插件的形式提供。<br>2、gulp可以用来进行js、css、html、图片等等文件的打包压缩，sass、less等文件格式的转码。<br>3、gulp可以实现本地文件的实时修改实时展示，在<strong>gulp4</strong>中扩展了代理、html组件等功能。</p>
</blockquote>
<h2 id="gulp常用api"><a href="#gulp常用api" class="headerlink" title="gulp常用api"></a>gulp常用api</h2><table>
<thead>
<tr>
<th>api</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>src(path:string)</td>
<td>在指定的文件上创建一个流</td>
</tr>
<tr>
<td>src().pipe(path:string)</td>
<td>在此方法内执行所有扩展操作（插件的）</td>
</tr>
<tr>
<td>dest(path:string)</td>
<td>输出处理好的文件到指定的路径</td>
</tr>
<tr>
<td>task(name:string,handler:functoin)</td>
<td>创建一个任务到gulp的任务系统</td>
</tr>
<tr>
<td>watch(path:string,handler:function)</td>
<td>监视指定路径的文件，产生变化时用handler处理</td>
</tr>
<tr>
<td>series(…taskk:function)</td>
<td>依次访问任务系统中的指定任务，同步执行</td>
</tr>
<tr>
<td>parallel(…task:function)</td>
<td>同时开启任务系统中的指定任务，异步完成执行</td>
</tr>
</tbody></table>
<h2 id="gulp3"><a href="#gulp3" class="headerlink" title="gulp3"></a>gulp3</h2><ul>
<li>常见插件<pre class="line-numbers language-json"><code class="language-json"><span class="token property">"gulp-clean-css"</span><span class="token operator">:</span> <span class="token string">"^4.3.0"</span><span class="token punctuation">,</span>
<span class="token property">"gulp-concat"</span><span class="token operator">:</span> <span class="token string">"^2.6.1"</span><span class="token punctuation">,</span>
<span class="token property">"gulp-connect"</span><span class="token operator">:</span> <span class="token string">"^5.7.0"</span><span class="token punctuation">,</span>
<span class="token property">"gulp-load-plugins"</span><span class="token operator">:</span> <span class="token string">"^2.0.6"</span><span class="token punctuation">,</span>
<span class="token property">"open"</span><span class="token operator">:</span> <span class="token string">"^8.0.5"</span><span class="token punctuation">,</span>
<span class="token property">"gulp-rename"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>
<span class="token property">"gulp-livereload"</span><span class="token operator">:</span> <span class="token string">"^4.0.2"</span><span class="token punctuation">,</span>
<span class="token property">"gulp-less"</span><span class="token operator">:</span> <span class="token string">"^4.0.1"</span><span class="token punctuation">,</span>
<span class="token property">"gulp-uglify"</span><span class="token operator">:</span> <span class="token string">"^3.0.2"</span><span class="token punctuation">,</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>插件</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>open</td>
<td>在浏览器上打开指定的文件</td>
</tr>
<tr>
<td>gulp-load-plugins</td>
<td>将gulp-开头的插件添加到一个对象上，调用返回这个对象</td>
</tr>
<tr>
<td>gulp-connect</td>
<td>开启gulp服务</td>
</tr>
<tr>
<td>gulp-livereload</td>
<td>刷新修改的文件，用于实时更新修改文件</td>
</tr>
<tr>
<td>gulp-rename</td>
<td>为还在流中的处理文件命名</td>
</tr>
<tr>
<td>gulp-concat</td>
<td>合并同类文件，例如css合并</td>
</tr>
<tr>
<td>gulp-uglify</td>
<td>压缩js文件</td>
</tr>
<tr>
<td>gulp-clean-css</td>
<td>压缩css文件</td>
</tr>
<tr>
<td>gulp-less</td>
<td>用于将less格式文件转换成css文件</td>
</tr>
</tbody></table>
</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> $ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-load-plugins'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> open <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span>

gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'js'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/js/*.js'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'index.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/js/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token punctuation">{</span>suffix<span class="token punctuation">:</span><span class="token string">'.min'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/js/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">livereload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>connect<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'less'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/less/*.less'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'src/css/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">livereload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>connect<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'css'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'less'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/css/*.css'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'build.css'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">cssClean</span><span class="token punctuation">(</span><span class="token punctuation">{</span>compatibility<span class="token punctuation">:</span><span class="token string">'ie8'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token punctuation">{</span>suffix<span class="token punctuation">:</span><span class="token string">'.min'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/css/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">livereload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>connect<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">htmlMin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>collapseWhitespace<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">livereload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>connect<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'watch'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">.</span>livereload<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'src/js/*.js'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  
  gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'src/css/*.css'</span><span class="token punctuation">,</span><span class="token string">'src/less/*.less'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'css'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span>

gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'server'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $<span class="token punctuation">.</span>connect<span class="token punctuation">.</span><span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        root<span class="token punctuation">:</span><span class="token string">'dist/'</span><span class="token punctuation">,</span>
        port<span class="token punctuation">:</span><span class="token string">'2333'</span><span class="token punctuation">,</span>
        livereload<span class="token punctuation">:</span><span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'http://localhost:2333/'</span><span class="token punctuation">)</span>
    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'src/js/*.js'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'src/css/*.css'</span><span class="token punctuation">,</span><span class="token string">'src/less/*.less'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'css'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span><span class="token string">'css'</span><span class="token punctuation">,</span><span class="token string">'less'</span><span class="token punctuation">,</span><span class="token string">'html'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="gulp4"><a href="#gulp4" class="headerlink" title="gulp4"></a>gulp4</h2><blockquote>
<p>常见插件</p>
</blockquote>
<pre class="line-numbers language-json"><code class="language-json"><span class="token property">"del"</span><span class="token operator">:</span> <span class="token string">"^6.0.0"</span><span class="token punctuation">,</span>
<span class="token property">"gulp-uglify"</span><span class="token operator">:</span> <span class="token string">"^3.0.2"</span><span class="token punctuation">,</span>
<span class="token property">"gulp-autoprefixer"</span><span class="token operator">:</span> <span class="token string">"^7.0.1"</span><span class="token punctuation">,</span>
<span class="token property">"gulp-babel"</span><span class="token operator">:</span> <span class="token string">"^8.0.0"</span><span class="token punctuation">,</span>
<span class="token property">"gulp-cssmin"</span><span class="token operator">:</span> <span class="token string">"^0.2.0"</span><span class="token punctuation">,</span>
<span class="token property">"gulp-file-include"</span><span class="token operator">:</span> <span class="token string">"^2.3.0"</span><span class="token punctuation">,</span>
<span class="token property">"gulp-htmlmin"</span><span class="token operator">:</span> <span class="token string">"^5.0.1"</span><span class="token punctuation">,</span>
<span class="token property">"gulp-sass"</span><span class="token operator">:</span> <span class="token string">"^4.1.0"</span><span class="token punctuation">,</span>
<span class="token property">"gulp-webserver"</span><span class="token operator">:</span> <span class="token string">"^0.9.1"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>插件</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>del</td>
<td>删除指定路径的文件文件</td>
</tr>
<tr>
<td>gulp-autoprefixer</td>
<td>css文件处理中自动添加前缀，例如–webkit</td>
</tr>
<tr>
<td>gulp-babel</td>
<td>转换es6语法</td>
</tr>
<tr>
<td>gulp-cssmin</td>
<td>压缩css文件</td>
</tr>
<tr>
<td>gulp-file-include</td>
<td>html处理之前，可以整合自定义的html代码片段</td>
</tr>
<tr>
<td>gulp-htmlmin</td>
<td>压缩html文件</td>
</tr>
<tr>
<td>gulp-sass</td>
<td>转化sass成css</td>
</tr>
<tr>
<td>gulp-webserver</td>
<td>创建本地服务</td>
</tr>
</tbody></table>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> del <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'del'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> server <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-connect'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> $ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-load-plugins'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">const</span> jsHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/js/*.js'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'index.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        presets<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'@babel/env'</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/js/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> sassHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/sass/*.scss'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">autoprefixer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">sass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'src/css/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> cssHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/css/*.css'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'index.css'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">autoprefixer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">// .pipe($.autoprefixer({</span>
    <span class="token comment" spellcheck="true">//     browsers:'last 2 version'</span>
    <span class="token comment" spellcheck="true">// }))</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">cssmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/css/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> htmlHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">fileInclude</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        prefix<span class="token punctuation">:</span><span class="token string">'@@'</span><span class="token punctuation">,</span>
        basepath<span class="token punctuation">:</span><span class="token string">'src/components/'</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">htmlmin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        collapseWhitespace<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
        removeStyleLinkTypeAttributes<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
        remvoeScriptTypeAttribute<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
        removeAttributeQuotes<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//去掉不必要的属性双引号</span>
        collapseBooleanAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//合并boolean属性</span>
        removeEmptyAttribute<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//原生html空属性属性</span>
        minifyCss<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
        minifyJs<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> watchHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'src/js/*.js'</span><span class="token punctuation">,</span>jsHandler<span class="token punctuation">)</span>
    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'src/components/*.html'</span><span class="token punctuation">,</span>htmlHandler<span class="token punctuation">)</span>
    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'*.html'</span><span class="token punctuation">,</span>htmlHandler<span class="token punctuation">)</span>
    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'src/sass/*.scss'</span><span class="token punctuation">,</span>sassHandler<span class="token punctuation">)</span>
    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'src/css/*.css'</span><span class="token punctuation">,</span>cssHandler<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> serverHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./dist'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">webserver</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        host<span class="token punctuation">:</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>
        port<span class="token punctuation">:</span><span class="token string">"5000"</span><span class="token punctuation">,</span>
        livereload<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
        open<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
        proxies<span class="token punctuation">:</span><span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                source<span class="token punctuation">:</span><span class="token string">'/dt'</span><span class="token punctuation">,</span>
                target<span class="token punctuation">:</span><span class="token string">'https://www.duitang.com/napi/ad/banner/list/'</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> delDistHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./dist/'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>sass <span class="token operator">=</span> sassHandler

module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token operator">=</span> gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>
    delDistHandler<span class="token punctuation">,</span>
    gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span>htmlHandler<span class="token punctuation">)</span><span class="token punctuation">,</span>
    gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>sassHandler<span class="token punctuation">,</span>cssHandler<span class="token punctuation">)</span><span class="token punctuation">,</span>
    jsHandler<span class="token punctuation">,</span>
    serverHandler<span class="token punctuation">,</span>
    watchHandler<span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>java-BigDecimal</title>
    <url>/2020/09/07/java-bigdecimal/</url>
    <content><![CDATA[<h2 id="java中的大数字运算"><a href="#java中的大数字运算" class="headerlink" title="java中的大数字运算"></a>java中的大数字运算</h2><h3 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h3><table>
<thead>
<tr>
<th>常用api</th>
<th>参数</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>a.multiply(b)</td>
<td>BigDecimal类对象</td>
<td>加法</td>
</tr>
<tr>
<td>a.subtract(b)</td>
<td>BigDecimal类对象</td>
<td>减法</td>
</tr>
<tr>
<td>a.multiply(b)</td>
<td>BigDecimal类对象</td>
<td>乘法</td>
</tr>
<tr>
<td>a.divide(b)</td>
<td>BigDecimal类对象,保留位数,舍入方式)</td>
<td>除法</td>
</tr>
<tr>
<td>(BigDecimal a).setScale</td>
<td>(保留位数,舍入方式)</td>
<td>BigDecimal类方法</td>
</tr>
</tbody></table>
<blockquote>
<p>BigDecimal类的舍入方式</p>
</blockquote>
<table>
<thead>
<tr>
<th>类型</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>BigDecimal.ROUND_HALF_EVEN</td>
<td>精确舍入</td>
</tr>
<tr>
<td>BigDecimal.ROUND_HALF_UP</td>
<td>四舍五入</td>
</tr>
<tr>
<td>BigDecimal.ROUND_HALF_DOWN</td>
<td>五舍六入</td>
</tr>
<tr>
<td>BigDecimal.ROUND_DOWN</td>
<td>向小数字取整</td>
</tr>
<tr>
<td>BigDecimal.ROUND_UP</td>
<td>向大数字取整</td>
</tr>
<tr>
<td>BigDecimal.ROUND_FLOOR</td>
<td>向下取整</td>
</tr>
<tr>
<td>BigDecimal.ROUND_CEILING</td>
<td>向上取整</td>
</tr>
</tbody></table>
<ul>
<li><strong>使用BigDecimal和BigInteger运算的结果是一个新的此类对象，使用int/doulb/…+Value()方法转换成不同数字变量</strong></li>
</ul>
<h3 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h3><table>
<thead>
<tr>
<th>常用api</th>
<th>参数</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>a.multiply(b)</td>
<td>BigInteger类对象</td>
<td>加法</td>
</tr>
<tr>
<td>a.subtract(b)</td>
<td>BigInteger类对象</td>
<td>减法</td>
</tr>
<tr>
<td>a.multiply(b)</td>
<td>BigInteger类对象</td>
<td>乘法</td>
</tr>
<tr>
<td>a.divide(b)</td>
<td>BigInteger类对象</td>
<td>除法</td>
</tr>
</tbody></table>
<blockquote>
<p>没有小数处理？暂不清楚其他api用法</p>
</blockquote>
<p>运算符优先级</p>
<blockquote>
<p>java大体分6种运算符，按照优先级顺序为:单目、算数、移位运算符、关系运算符、逻辑运算符、赋值运算符</p>
</blockquote>
<p>详见<a href="https://www.jianshu.com/p/9d2204712097">Java运算符优先级</a> </p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>BigDecimal</tag>
        <tag>BigInteger</tag>
      </tags>
  </entry>
  <entry>
    <title>java异常</title>
    <url>/2020/12/14/java-yi-chang/</url>
    <content><![CDATA[<h2 id="异常介绍"><a href="#异常介绍" class="headerlink" title="异常介绍"></a>异常介绍</h2><p>异常的特性：</p>
<ul>
<li>java异常方法默认都有一个throws RuntimeException，所以当程序有这种类型的异常或者他的子类异常出现时，通常我们不必自己添加异常管道。</li>
<li>如果不在程序中处理，异常将会一直抛出直到jvm，jvm会打印异常并退出程序。</li>
<li>处理异常只有两种方式，try-catch捕获和throws抛出</li>
</ul>
<h2 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h2><pre class="line-numbers language-md"><code class="language-md">throwable顶级父类
    |--Error不可修复，多见于系统级的问题（例如递归栈/内存溢出），保证程序安全退出即可
    |--Exception
        |--其他Exception   
        |--runtimeException
           |--ArithmeticException
           |--ArrayListIndexOutOfBoundsException
           |--。。。等等异常
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="try-catch方法"><a href="#try-catch方法" class="headerlink" title="try-catch方法"></a>try-catch方法</h2><p>特性：<br>1、使用try-catch方法可以捕获多个异常，但要注意大的异常类要在后面捕获。<br>2、finally代码块内的代码一定会执行，无论try代码块中有无ruturn还是break及其他终止程序的关键字，都会执行。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入两个数字："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    String inp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    String<span class="token punctuation">[</span><span class="token punctuation">]</span> sp <span class="token operator">=</span> inp<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>sp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>sp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArrayIndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//无论是否有return等关键字都会执行finally内的代码</span>
<span class="token comment" spellcheck="true">// 输出：</span>
<span class="token comment" spellcheck="true">// 输入两个数字：</span>
<span class="token comment" spellcheck="true">// 12</span>
<span class="token comment" spellcheck="true">// java.lang.ArrayIndexOutOfBoundsException: 1</span>
<span class="token comment" spellcheck="true">// finly</span>
<span class="token comment" spellcheck="true">//     at day1214.ExceptionTset.main(ExceptionTset.java:11)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="throws抛出异常"><a href="#throws抛出异常" class="headerlink" title="throws抛出异常"></a>throws抛出异常</h2><p>特性：<br>1、使用throws关键字加在方法后面可以抛出多个异常。<br>2、往往需要抛出异常的代码块是它内部引用的方法已经有异常抛出，所以要继续抛出异常。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个时间："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"时间格式错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件路径错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//抛出多个异常</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>
    String inp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy/MM/dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Date d <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>inp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E://code/java/"</span> <span class="token operator">+</span> d<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    f<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//SimpleDateFarmat的parse方法抛出了ParseException异常，因此上面要跑出此异常</span>
<span class="token keyword">public</span> Date <span class="token function">parse</span><span class="token punctuation">(</span>String source<span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException
<span class="token punctuation">{</span>
    ParsePosition pos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParsePosition</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Date result <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ParseException</span><span class="token punctuation">(</span><span class="token string">"Unparseable date: \""</span> <span class="token operator">+</span> source <span class="token operator">+</span> <span class="token string">"\""</span> <span class="token punctuation">,</span>
            pos<span class="token punctuation">.</span>errorIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="throw手动抛出异常"><a href="#throw手动抛出异常" class="headerlink" title="throw手动抛出异常"></a>throw手动抛出异常</h2><p>特性：<br>1、处理自定义的特殊情况，使用系统类型，自己抛出和捕获。<br>2、抛出的信息要准确描述特殊情况，打印的交互可以人性化一点。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入两个浮点数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> inp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> inp2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">f</span><span class="token punctuation">(</span>inp1<span class="token punctuation">,</span> inp2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//交互信息人性化</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不能除0是我们的错，请鞭笞我们吧！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">double</span> inp1<span class="token punctuation">,</span> <span class="token keyword">double</span> inp2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//自定义特殊情况异常抛出</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>inp2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ArithmeticException e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token string">"/by zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inp1 <span class="token operator">/</span> inp2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="异常的特殊处理"><a href="#异常的特殊处理" class="headerlink" title="异常的特殊处理"></a>异常的特殊处理</h2><blockquote>
<p>当重写父类方法时，可能遇到父类的异常管道除了默认的RuntimeException外没有其他管道的情况，而本方法使用了有其他类型的异常的方法，这时就需要封装异常为RuntimeException或其子类的异常来转换异常的类型，从而抛出异常。</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LinkedList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"2020-12-12"</span><span class="token punctuation">,</span> <span class="token string">"2020-12-18"</span><span class="token punctuation">,</span> <span class="token string">"2020-12-14"</span><span class="token punctuation">,</span> <span class="token string">"2020-12-16"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String s <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//重写的compare方法不支持parseException类型的管道的添加，封装抛出</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>String o1<span class="token punctuation">,</span> String o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                Date d1 <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                Date d2 <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> d1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="自定义异常的使用"><a href="#自定义异常的使用" class="headerlink" title="自定义异常的使用"></a>自定义异常的使用</h2><blockquote>
<p>在有特殊的程序需要我们单独处理时，可以自定异常的类型从而抛出，以便我们在后面的程序中处理，这时可以使用自定义的异常来处理。</p>
</blockquote>
<ul>
<li>创建自定义的异常的主要有三个部分即：1、继承的父类2、构造方法重写3、类名能表达异常的意义<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入用户名密码："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  String user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  String pwd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token function">login</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UserErrorException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PwdErrorException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//PwdErrorException继承的是Exception不是RuntimeException或他的子类，所以需要自己加抛出异常管道</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span>String user<span class="token punctuation">,</span> String pwd<span class="token punctuation">)</span> <span class="token keyword">throws</span> PwdErrorException <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UserErrorException</span><span class="token punctuation">(</span><span class="token string">"用户名错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PwdErrorException</span><span class="token punctuation">(</span><span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登陆成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Exception</tag>
      </tags>
  </entry>
  <entry>
    <title>java-bitOperation</title>
    <url>/2020/09/07/java-bitoperation/</url>
    <content><![CDATA[<h2 id="常见位运算"><a href="#常见位运算" class="headerlink" title="常见位运算"></a>常见位运算</h2><table>
<thead>
<tr>
<th>符号</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>位与，上面是1并且下面是1，结果才是1</td>
</tr>
<tr>
<td>|</td>
<td>位或，上面是1或者下面是1，结果才是1</td>
</tr>
<tr>
<td>^</td>
<td>异或，不同是1</td>
</tr>
<tr>
<td>~</td>
<td>求反，1变成0，0变成1</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>带符号的位右移</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>大夫好的左位移</td>
</tr>
<tr>
<td>&gt;&gt;&gt;</td>
<td>不带符号的右位移</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>javaIO使用</title>
    <url>/2020/12/19/javaio-shi-yong/</url>
    <content><![CDATA[<h2 id="File对象常用api"><a href="#File对象常用api" class="headerlink" title="File对象常用api"></a>File对象常用api</h2><table>
<thead>
<tr>
<th>名称</th>
<th>释义</th>
<th>返回值类型</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>exists()</td>
<td>是否存在文件文件对象</td>
<td>Boolean</td>
<td>存在返回true，其他为false</td>
</tr>
<tr>
<td>getAbsolutePath()</td>
<td>获取文件的完整路径</td>
<td>String</td>
<td>返回完整路径的字符串</td>
</tr>
<tr>
<td>getName()</td>
<td>获取当前文件的名称</td>
<td>String</td>
<td>返回文件的名称字符串</td>
</tr>
<tr>
<td>getParent/getParentFile()</td>
<td>获取文件的父节点路径</td>
<td>String</td>
<td>返回父节点的路径字符串</td>
</tr>
<tr>
<td>length()</td>
<td>获取文件包含的字节大小</td>
<td>long</td>
<td>返回包含字节量</td>
</tr>
<tr>
<td>isDirectory()</td>
<td>判定当前文件对象是否是文件夹</td>
<td>Boolean</td>
<td>是文件夹返回true，其他false</td>
</tr>
<tr>
<td>isFile()</td>
<td>判定是否是文件对象</td>
<td>Boolean</td>
<td>是true，无效/无权限等false</td>
</tr>
<tr>
<td>lastModified()</td>
<td>最后一次修改文件的时间</td>
<td>String</td>
<td>无效/无权限/不存在的文件返回0</td>
</tr>
</tbody></table>
<h2 id="用File对象增删文件-文件夹"><a href="#用File对象增删文件-文件夹" class="headerlink" title="用File对象增删文件/文件夹"></a>用File对象增删文件/文件夹</h2><ul>
<li><p>createNewFile()方法，创建一个新的文件，成功创建返回true</p>
<pre class="line-numbers language-java"><code class="language-java">File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:/code/java/oo/xx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//new File()对象可以接收两个字符串一个父类路径，一个文件名称</span>
File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>mkdir()/mkdirs()方法，创建一层/多层文件夹，创建成功返回true。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//oo/xx路径不存在</span>
File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:/code/java/oo/xx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dir<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>mkdir()方法只能创建一层路径，如果创建的父路径不存在则报错</p>
</blockquote>
</li>
</ul>
<h2 id="list和listFiles方法的使用"><a href="#list和listFiles方法的使用" class="headerlink" title="list和listFiles方法的使用"></a>list和listFiles方法的使用</h2><blockquote>
<p>list对象返回所有子类的文件名字符串数组，listFiles返回的是子类文件对象的数组。</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//统计文件字节值</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入文件夹路径："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    String inp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> size <span class="token operator">=</span> <span class="token function">getFileSize</span><span class="token punctuation">(</span>inp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件夹大小为："</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token string">"字节"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getFileSize</span><span class="token punctuation">(</span>String inp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>inp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    File<span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入正确的文件夹路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> dir<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum <span class="token operator">+=</span> <span class="token function">getFileSize</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            sum <span class="token operator">+=</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>java特殊问题记录</title>
    <url>/2020/12/16/java-te-shu-wen-ti-ji-lu/</url>
    <content><![CDATA[<h2 id="在类中this的省略问题"><a href="#在类中this的省略问题" class="headerlink" title="在类中this的省略问题"></a>在类中this的省略问题</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    String name<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//变量名不同，可以省略this</span>
    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> ag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        age <span class="token operator">=</span> ag<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//此时如果省略this，那么对象的age就会赋不上值</span>
    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>java中的变量采取就近原则，如果没有this特殊指定，它会自动寻找最近出现的变量作为他的值。</p>
</blockquote>
<h2 id="final关键字的编译器优化"><a href="#final关键字的编译器优化" class="headerlink" title="final关键字的编译器优化"></a>final关键字的编译器优化</h2><blockquote>
<p>上代码</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>上面代码中a和b如果不加final关键字，在运算时java会自动转换成int类型，那么这个表达式就是错误的，可是加了final关键字之后，c的值编译器就会自动优化成3，而不会有运算了，所以是正确的。</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>特殊问题</tag>
      </tags>
  </entry>
  <entry>
    <title>jdbc小结</title>
    <url>/2021/01/10/jdbc-xiao-jie/</url>
    <content><![CDATA[<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote>
<p>jdbc是java database connectivity的简称,也是hibernate和mybitis的底层实现.</p>
</blockquote>
<h2 id="普通连接"><a href="#普通连接" class="headerlink" title="普通连接"></a>普通连接</h2><blockquote>
<p>通常通过jdbc完成一个sql操作需要以下几步<br>1加载类驱动com.mysql.jdbc.Driver<br>2建立连接,获取连接对象conn.getConnection(数据库路径,用户名,密码)<br>3通过连接对象创建Statement对象执行sql<br>4获取Statement执行完完sql后的结果ResultSet或其他<br>5释放资源(Resultset,Statement,Connection依次释放)</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> jdbc0110<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//Connection和Statement和ResultSet都是接口不是具体的实现类</span>
<span class="token comment" spellcheck="true">//便于以后的维护修改</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//测试类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbCRUDRTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">JdbcConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeSql</span><span class="token punctuation">(</span>Statement stm<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                <span class="token keyword">int</span> flag <span class="token operator">=</span> stm<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"insert into account values(4,'jack',123414)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token operator">+</span><span class="token string">"rows affected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">JdbcConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeSql</span><span class="token punctuation">(</span>Statement stm<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                <span class="token keyword">int</span> flag <span class="token operator">=</span> stm<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"delete from account where id =4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token operator">+</span><span class="token string">"rows affected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">JdbcConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeSql</span><span class="token punctuation">(</span>Statement stm<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                <span class="token keyword">int</span> flag <span class="token operator">=</span> stm<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"update account set money= 8888 where id = 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">JdbcConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeSql</span><span class="token punctuation">(</span>Statement stm<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                ResultSet res <span class="token operator">=</span> stm<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">"select * from account where id=2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> id <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    String name <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    String money <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id:"</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">"name:"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"money:"</span><span class="token operator">+</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//静态内部抽象类</span>
    <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span>  <span class="token class-name">JdbcConnect</span><span class="token punctuation">{</span>
        Connection cnct <span class="token operator">=</span> null<span class="token punctuation">;</span>
        Statement stm <span class="token operator">=</span> null<span class="token punctuation">;</span>
        ResultSet res <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//加载驱动类对象,其静态代码块中创建了DriverManager对象</span>
                Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                cnct <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///jt_db?characterEncoding=utf-8"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                stm <span class="token operator">=</span> cnct<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">executeSql</span><span class="token punctuation">(</span>stm<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token function">closeConnect</span><span class="token punctuation">(</span>cnct<span class="token punctuation">,</span>res<span class="token punctuation">,</span>stm<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">executeSql</span><span class="token punctuation">(</span>Statement stm<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>
        
        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">closeConnect</span><span class="token punctuation">(</span>Connection cnct<span class="token punctuation">,</span> ResultSet res<span class="token punctuation">,</span> Statement stm<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    res<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    res <span class="token operator">=</span> null<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> stm<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    stm<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    stm <span class="token operator">=</span> null<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> cnct<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    cnct<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    cnct <span class="token operator">=</span> null<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="PreparedStatement预处理执行"><a href="#PreparedStatement预处理执行" class="headerlink" title="PreparedStatement预处理执行"></a>PreparedStatement预处理执行</h2><blockquote>
<p>相较于Statement对象直接执行程序sql,PreparedSatement加入了sql预处理,实现sql和参数分离从而避免sql注入攻击.</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java">String sql <span class="token operator">=</span> <span class="token string">"select * from user where username=? and password=?"</span><span class="token punctuation">;</span>
ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> pw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//查询sql</span>
rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//修改sql</span>
rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="c3p0线程池"><a href="#c3p0线程池" class="headerlink" title="c3p0线程池"></a>c3p0线程池</h2><blockquote>
<p>线程池的作用是将所有的连接对象存储起来,以减少不停建立和释放连接造成的资源浪费.</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//导入c3p0线程池类</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>mchange<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>c3p0<span class="token punctuation">.</span>ComboPooledDataSource<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C3p0ComboTest</span> <span class="token punctuation">{</span>
    Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>
    PreparedStatement ps <span class="token operator">=</span> null<span class="token punctuation">;</span>
    ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            ComboPooledDataSource pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pool<span class="token punctuation">.</span><span class="token function">setDriverClass</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pool<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///jt_db?characterEncoding=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pool<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pool<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            conn <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"select * from account"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                String name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                String money <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id:"</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">"name:"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"money:"</span><span class="token operator">+</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            JdbcUtil<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>通常使用配置文件(<strong>src目录</strong>下建立c3p0.properties或c3p0-config.xml)的方式实现代码和配置分离,以便后期维护升级.</li>
<li>properties配置文件<pre class="line-numbers language-java"><code class="language-java">c3p0<span class="token punctuation">.</span>driverClass<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver
c3p0<span class="token punctuation">.</span>jdbcUrl<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token comment" spellcheck="true">//jt_db?characterEncoding=utf-8</span>
c3p0<span class="token punctuation">.</span>user<span class="token operator">=</span>root
c3p0<span class="token punctuation">.</span>password<span class="token operator">=</span>root
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>xml配置文件<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>c3p0-config</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>default-config</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          com.mysql.jdbc.Driver
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          jdbc:mysql:///jt_db?characterEncoding=utf-8
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          root
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          root
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>default-config</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>c3p0-config</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>js中的常用数组操作函数</title>
    <url>/2020/10/31/js-zhong-de-chang-yong-shu-zu-cao-zuo-han-shu/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>使用jQuery框架时要对数组元素进行操作，突然忘了该如何入手，借着这个机会总结下常见的数组操作方法。</p>
<h2 id="Array原型链上的数组操作属性"><a href="#Array原型链上的数组操作属性" class="headerlink" title="Array原型链上的数组操作属性"></a>Array原型链上的数组操作属性</h2><p>Array对象原型上有很多操作数组的属性，功能十分强大</p>
<h3 id="操作数组元素"><a href="#操作数组元素" class="headerlink" title="操作数组元素"></a>操作数组元素</h3><h4 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h4><blockquote>
<p>Array.prototype.pop()方法删除数组的最后一个元素,返回删除的值</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token number">4</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<ul>
<li>空数组上使用返回undefined</li>
<li>可用在类数组元素上，和push相同根据length确定组后一个元素位置，没有或不能转换length属性为数值则从<strong>下标0</strong>开始</li>
</ul>
</blockquote>
<h4 id="push"><a href="#push" class="headerlink" title="push"></a>push</h4><blockquote>
<ul>
<li>Array.prototype.push(ele1,ele2,ele3…)方法将一个或多个元素添加到数组的最后,返回添加元素后的数组的长度</li>
<li>可通过call/apply作用于有length属性的类数组对象上</li>
</ul>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> animals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pigs'</span><span class="token punctuation">,</span> <span class="token string">'goats'</span><span class="token punctuation">,</span> <span class="token string">'sheep'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
animals<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'bird'</span><span class="token punctuation">,</span><span class="token string">'duck'</span><span class="token punctuation">,</span><span class="token string">'cat'</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token number">6</span>
<span class="token comment" spellcheck="true">//animals = ["pigs", "goats", "sheep", "bird", "duck", "cat"]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>合并两个数组<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> animals1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'dog'</span><span class="token punctuation">,</span><span class="token string">'fox'</span><span class="token punctuation">,</span><span class="token string">'cow'</span><span class="token punctuation">]</span>
Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>animals<span class="token punctuation">,</span><span class="token operator">...</span>animals1<span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token number">9</span>
<span class="token comment" spellcheck="true">//animals = ["pigs", "goats", "sheep", "bird", "duck", "cat", "dog", "fox", "cow"]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>处理类数组元素，<strong>不可使用箭头函数</strong>，会把this绑定到window上<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
  length<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token function">add</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>ele<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment" spellcheck="true">// add:e=>[].push.call(this,ele)错误的写法</span>
<span class="token punctuation">}</span>
a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'jack'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// a = {0: "jack", length: 1, add: ƒ}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h4 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h4><blockquote>
<ul>
<li>Array.prototype.shift()方法删除数组的第一个元素，并返回他的值，</li>
<li>可通过call/apply作用于有length属性的类数组对象上</li>
</ul>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
a<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token number">1</span>
<span class="token comment" spellcheck="true">// a = [3,5]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h4><blockquote>
<p>Array.prototype.unshift(ele1,ele2,ele3….)方法一个或多个元素添加到数组的<strong>开头</strong>,并返回新的数组的<strong>长度</strong></p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
array1<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token number">5</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h4><blockquote>
<p>Array.prototype.splice(start[, deleteCount[, item1[, item2[, …]]]])方法是使用的较多的数组操作函数，它既可以在指定下标添加/删除/替换数组元素。</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> months <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Jan'</span><span class="token punctuation">,</span> <span class="token string">'March'</span><span class="token punctuation">,</span> <span class="token string">'April'</span><span class="token punctuation">,</span> <span class="token string">'June'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 删除指定下标（start）开始的delecteCount个元素</span>
months<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 在指定下标之前（start）添加元素</span>
months<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Feb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 替换指定下标的（start）元素</span>
months<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Feb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="查找和筛选数组元素"><a href="#查找和筛选数组元素" class="headerlink" title="查找和筛选数组元素"></a>查找和筛选数组元素</h3><h4 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h4><blockquote>
<ul>
<li>Array.prototype.includes(valueToFind[, fromIndex])方法查询数组是否包含特定值，返回一个Boolean值</li>
<li>fromindex默认为0，同字符串indexof方法小于0从0开始，大于0直接返回-1</li>
<li>可被用于类数组对象</li>
</ul>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token operator">></span> <span class="token boolean">true</span>
arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token operator">></span> <span class="token boolean">false</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>类数组应用<pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>includes<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token boolean">true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h4><blockquote>
<ul>
<li>Array.prototype.indexOf(searchValue[,fromindex=0])方法返回被查找元素首次出现的下标，没有则返回-1</li>
<li>fromindex默认为0，<strong>小于0时开始从后往前开始找，绝对值大于length属性则查找整个数组</strong>，大于length属性值时直接返回-1</li>
<li><strong>字符串</strong>fromindex开始查找位置默认为0，<strong>小于0从0开始</strong>，大于length属性值直接返回-1（查找元素为空’’时，直接返回length值）</li>
<li><strong>字符串</strong>的indexOf属性：省略searchValue，则方法强制设定他为’undefined’</li>
</ul>
</blockquote>
<ul>
<li>数组方法<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     
<span class="token operator">></span> <span class="token number">0</span>
array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span>
array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token operator">></span> <span class="token number">0</span>
array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>字符串方法<pre class="line-numbers language-js"><code class="language-js"><span class="token string">'undefined'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token number">0</span>
<span class="token string">'asdfas'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token number">1</span>
<span class="token string">'asdfas'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h4 id="some"><a href="#some" class="headerlink" title="some"></a>some</h4><blockquote>
<p>Array.prototype.some(callback(e[,index[,array]]))方法查找符合参数函数条件的元素，找到即返回true，否则返回false</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
array1<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token operator">></span>e<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token boolean">true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>同every一样空数组的some不管函数参数的条件如何都返回true</p>
</blockquote>
<h4 id="every"><a href="#every" class="headerlink" title="every"></a>every</h4><blockquote>
<p>Array.prototype.every(function)方法验证数组中的元素是否都满足参数function函数中的判定条件，满足返回true有一个不满足就停止执行，并返回false</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
array<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token operator">></span>e<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token boolean">false</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><blockquote>
<p> Array.prototype.filter(function)方法同every方法一样，都使用参数函数遍历数组元素，与every不同的是filter将通过function参数的数组元素，封装成新数组然后返回这个新数组。</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token operator">></span>e<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><blockquote>
<p>Array.prototype.find(function)方法也是提供筛选函数来查找元素，第一个符合条件的数组元素后返回元素并停止执行。</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
array1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>element <span class="token operator">=</span><span class="token operator">></span> element <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">></span> <span class="token number">12</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h4><blockquote>
<p>Array.prototype.findIndex(function)同index一样，返回结果是对应条件的数组元素下标</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
array1<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>element <span class="token operator">=</span><span class="token operator">></span> element <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">></span> <span class="token number">1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="遍历数组元素"><a href="#遍历数组元素" class="headerlink" title="遍历数组元素"></a>遍历数组元素</h3><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><blockquote>
<p>Array.prototype.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])方法返回累计处理的结果。</p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>accumulator</td>
<td>累计器累计回调的返回值; 它是上一次调用回调时返回的累积值</td>
</tr>
<tr>
<td>currentValue</td>
<td>数组中正在处理的元素。</td>
</tr>
<tr>
<td>index</td>
<td>数组中正在处理的当前元素的索引。 如果提供了initialValue，则起始索引号为0，否则从索引1起始。</td>
</tr>
<tr>
<td>array</td>
<td>调用reduce()的数组</td>
</tr>
<tr>
<td>initalValue</td>
<td>作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</td>
</tr>
</tbody></table>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//统计数组中值出现的次数（别忘了return你的sum值）</span>
<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span>cur<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        sum<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">++</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        sum<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><strong>json对象的key值都是string</strong>,如果给其他类型是会自动转换成string的</p>
</blockquote>
<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><blockquote>
<p>Array.prototype.map(callback(ele[,index[,arrray]]))方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。<br>map方法只会在有值索引上被调用，从未赋值或使用delete删除过的索引不会调用回调<br>不需要返回值组成的新数组时，使用for of和forEach代替</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// a = [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>使用map时简便写法的误区<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'234'</span><span class="token punctuation">,</span><span class="token string">'12'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
出现这个结果，是因为parseInt(str,radix)方法接收两个参数，而map传递的第二个参数是index，导致parseInt方法误把index当成了他的进制基数，我们可以使用<strong>Number(str)方法</strong>代替即可<pre class="line-numbers language-js"><code class="language-js">a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">]</span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><blockquote>
<p>1、Array.prototype.forEach(callback(currentValue [, index [, array]])[, thisArg])方法对数组的每个元素执行一次给定的函数,返回undefined或者说没有返回值。<br>2、回调函数会跳过未赋值或使用delete操作的索引的调用</p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>currentValue</td>
<td>数组中正在处理的当前元素。</td>
</tr>
<tr>
<td>index</td>
<td>数组中正在处理的当前元素的索引。</td>
</tr>
<tr>
<td>array</td>
<td>forEach() 方法正在操作的数组。</td>
</tr>
<tr>
<td>thisArg</td>
<td>可选参数。当执行回调函数 callback 时，用作 this 的值。</td>
</tr>
</tbody></table>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//跳过index为2时的索引调用</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token number">1</span>
<span class="token operator">></span> <span class="token number">2</span>
<span class="token operator">></span> <span class="token number">4</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>数组在迭代过程中被修改，执行调用的索引值不会变<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
words<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>word <span class="token operator">===</span> <span class="token string">'two'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  words<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">></span> <span class="token string">'one'</span>
<span class="token operator">></span> <span class="token string">'two'</span>
<span class="token operator">></span> <span class="token string">'four'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>复制对象<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">copyObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> copyobj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> properNameArr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
  properNameArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
      <span class="token keyword">let</span> temppropertyDes <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>name<span class="token punctuation">)</span>
      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>copyobj<span class="token punctuation">,</span>name<span class="token punctuation">,</span>temppropertyDes<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> copyobj
<span class="token punctuation">}</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'jack'</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> copyobj <span class="token operator">=</span> <span class="token function">coypObj</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>thisArg应用<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Counter<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sum <span class="token operator">+</span><span class="token operator">=</span> entry<span class="token punctuation">;</span>
  <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//obj.count = 3 === (1 + 1 + 1)</span>
<span class="token comment" spellcheck="true">//obj.sum = 16 === (2 + 5 + 9)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>3、forEach方法不能在callback中终止（除非异常），使用for…in/for…of/every/some/find/findIndex方法代替</p>
</blockquote>
</li>
</ul>
<h3 id="转换成字符串"><a href="#转换成字符串" class="headerlink" title="转换成字符串"></a>转换成字符串</h3><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><blockquote>
<ul>
<li>Array.prototype.join([separator])方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串，如果数组只有一个项目，那么将返回该项目而不使用分隔符。</li>
<li>null/undefined/调用对象的length属性为0时，调用此方法会被转换成空字符串’’ </li>
</ul>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">null</span>
a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>连接类数组的对象</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">joinarg</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">joinarg</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token string">'1,3,6'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><blockquote>
<ul>
<li>Array.prototype.toString()方法覆盖了Object的toSting方法，返回一个用逗号隔开各个数组元素的字符串</li>
<li>和字符串拼接（+）时自动调用此方法</li>
</ul>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'1a'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">></span> <span class="token string">"1,2,a,1a"</span>
<span class="token comment" spellcheck="true">//array1 = [-2, -1, 1, 2, 3]</span>
<span class="token comment" spellcheck="true">//字符串拼接</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'x'</span>
<span class="token operator">></span> <span class="token string">'1,4x'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="获取数组的键-值对方法"><a href="#获取数组的键-值对方法" class="headerlink" title="获取数组的键/值对方法"></a>获取数组的键/值对方法</h3><h4 id="entries"><a href="#entries" class="headerlink" title="entries"></a>entries</h4><blockquote>
<p>Array.prototype.entries方法返回一个包含每个索引的键/值对的Array iterator可迭代对象</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">[</span>k<span class="token punctuation">,</span>v<span class="token punctuation">]</span><span class="token keyword">of</span> array1<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token operator">></span><span class="token number">0</span> <span class="token string">"a"</span>
<span class="token operator">></span><span class="token number">1</span> <span class="token string">"b"</span>
<span class="token operator">></span><span class="token number">2</span> <span class="token string">"c"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="values"><a href="#values" class="headerlink" title="values"></a>values</h4><blockquote>
<p>Array.prototype.values()方法返回一个包含每个索引值的值的Array Iterator对象</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span>v <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token operator">></span> <span class="token number">1</span>
<span class="token operator">></span> <span class="token number">2</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h4><blockquote>
<p>Array.prototype.keys()方法返回一个包含数组中每个索引键的Array Iterator对象。</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//数组可以使用Object方法？</span>
<span class="token keyword">var</span> sparseKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//先运行keys方法返回迭代对象，然后使用扩展运算符解构扩展成数组</span>
<span class="token keyword">var</span> denseKeys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sparseKeys<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['0', '2']</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>denseKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [0, 1, 2]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><blockquote>
<p>Array.prototype.slice([begin[,end]])方法返回一个指定切割下标长度的新数组（可为原数组长度）<br>1、复制数组，<strong>不能复制元素为对象的数组元素</strong></p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'jack'</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>b<span class="token punctuation">]</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span>
c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'summer'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'summer'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'summer'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'summer'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2、获取数组最后一个元素，<strong>返回仍然是一个数组！！！</strong></p>
<pre class="line-numbers language-js"><code class="language-js">a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'summer'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>3、剪切数组,生成新的数组</p>
<pre class="line-numbers language-js"><code class="language-js">a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'summer'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>在复制数组时，如果数组元素是对象，那么复制的数组只会复制这个对象的引用，就是说<strong>改变复制数组仍会改变元素组</strong></p>
</blockquote>
<h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><blockquote>
<p>Array.prototype.concat(array1,array2…)用于连接两个或多个数组</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> array2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> array3 <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>array2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">></span> Array <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><blockquote>
<ul>
<li>Array.prototype.reverse()方法颠倒数组元素</li>
<li>可通过call/apply作用于有length属性的类数组对象上</li>
</ul>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
array1<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true">//类数组</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>reverse<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">></span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><blockquote>
<ul>
<li>Array.prototype.sort([compareFunction])方法默认按各个数组元素转换成字符串后的utf-16代码单元值序列排序,并返回改变了排序后的<strong>原数组</strong></li>
<li>可选参数compareFunction(v1,v2)函数有两个必传值，可在此函数内自定义排序规则</li>
</ul>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//默认排序</span>
<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">]</span>
array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true">//自定义排序(降序)</span>
array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">Number</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token operator">></span><span class="token function">Number</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token function">Number</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token function">Number</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true">//升序</span>
array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">Number</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">Number</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>自定义排序函数依次遍历比较数组元素时，如果函数的返回值如果相等位置不变，大于0则e1排在e2的前面，小于0反之。</p>
</blockquote>
<h2 id="Array对象的静态方法"><a href="#Array对象的静态方法" class="headerlink" title="Array对象的静态方法"></a>Array对象的静态方法</h2><h3 id="from"><a href="#from" class="headerlink" title="from"></a>from</h3><blockquote>
<p>1、Array.from(arrayLike[, mapFn[, thisArg]]) 方法从一个类似数组或<strong>可迭代对象</strong>创建一个<strong>新的</strong>，浅拷贝的数组实例。<br>2、from方法有一个可选参数 mapFn，可在最后生成的数组上再执行一次 map 方法然后再返回最终数组。即Array.from(obj, mapFn, thisArg) === Array.from(obj).map(mapFn, thisArg),<br>3、from() 的 length 属性为 1 ，即 Array.from.length === 1。<br>4、在 ES2015 中， Class 语法允许我们为内置类型（比如 Array）和自定义类新建子类（比如叫 SubArray）。这些子类也会继承父类的静态方法，比如 SubArray.from()，调用该方法后会返回子类 SubArray 的一个实例，而不是 Array 的实例。</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//strign=>array</span>
Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token operator">></span> <span class="token punctuation">[</span> <span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token string">"o"</span> <span class="token punctuation">]</span>

<span class="token comment" spellcheck="true">//set=>array</span>
<span class="token keyword">const</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">></span> <span class="token punctuation">[</span> <span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token string">"baz"</span> <span class="token punctuation">]</span>

<span class="token comment" spellcheck="true">//map=>array</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//map = {1 => 2, 2 => 4, 4 => 8}</span>
Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//arguments=>array</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">></span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span>

<span class="token comment" spellcheck="true">//使用mapfn函数</span>
Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>数组去重合并<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">combin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> temparr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>concat<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>
  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>temparr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> b<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token function">combin</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="of"><a href="#of" class="headerlink" title="of"></a>of</h3><blockquote>
<p>Array.of(element0[, element1[, …[, elementN]]])方法返回一个新的Array数组实例<br>低版本的使用new Array创建Array实例时，只有一个参数和多个参数方法不一致，一个参数创建代表创建length为参数值的数组，多个参数代表一个数组中的各个元素，of方法解决了这个不一致的问题。</p>
</blockquote>
<ul>
<li><p>解决低版本new Array时的问题</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
<span class="token operator">></span><span class="token punctuation">[</span>empty × <span class="token number">6</span><span class="token punctuation">]</span>
<span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>
Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>兼容低版本</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
Array<span class="token punctuation">.</span><span class="token keyword">of</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="isArray"><a href="#isArray" class="headerlink" title="isArray"></a>isArray</h3><blockquote>
<p>Array.isArray(object)方法判定传入对象是否是一个数组，返回Boolean值。</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token boolean">true</span>
Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>Arary<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token boolean">false</span>
Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">{</span>length<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'jack'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>于instanceof类似，检测iframe时优于instanceof</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>
xArray <span class="token operator">=</span> window<span class="token punctuation">.</span>frames<span class="token punctuation">[</span>window<span class="token punctuation">.</span>frames<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Array<span class="token punctuation">;</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">xArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1,2,3]</span>

<span class="token comment" spellcheck="true">// Correctly checking for Array</span>
Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>
<span class="token comment" spellcheck="true">// Considered harmful, because doesn't work though iframes</span>
arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>数组常用api</tag>
      </tags>
  </entry>
  <entry>
    <title>js基本数据类型</title>
    <url>/2021/02/13/js-ji-ben-shu-ju-lei-xing/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>基本类型（基本数值、基本数据类型）是一种既非对象也无方法的数据。在 JavaScript 中，共有7种基本类型：string，number，bigint，boolean，null，undefined，symbol (ECMAScript 2016新增)。</p>
</blockquote>
<h2 id="暂存死区"><a href="#暂存死区" class="headerlink" title="暂存死区"></a>暂存死区</h2><blockquote>
<p>与通过  var 声明的有初始化值 undefined 的变量不同，通过 let 声明的变量直到它们的定义被执行时才初始化。在变量初始化前访问该变量会导致 ReferenceError。该变量处在一个自块顶部到初始化处理的“暂存死区”中。</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">do_something</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span>
  <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="instanceOf和typeOf"><a href="#instanceOf和typeOf" class="headerlink" title="instanceOf和typeOf"></a>instanceOf和typeOf</h2><blockquote>
<p>常用比较数据类型的判定方式有两种，一种是使用typeof判定数据类型，一种是使用instanceof判定数据类型。</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">typeof</span> <span class="token string">'string'</span><span class="token operator">==</span><span class="token operator">></span><span class="token operator">></span><span class="token string">'string'</span>
<span class="token keyword">typeof</span> <span class="token number">12</span><span class="token operator">==</span><span class="token operator">></span><span class="token operator">></span><span class="token string">'number'</span>
<span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token operator">==</span><span class="token operator">></span><span class="token operator">></span><span class="token string">'boolean'</span>
<span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'any'</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span><span class="token operator">></span>'symbol
<span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token operator">==</span><span class="token operator">></span><span class="token operator">></span><span class="token string">'object'</span>
<span class="token keyword">typeof</span> undefined<span class="token operator">==</span><span class="token operator">></span><span class="token operator">></span><span class="token string">'undefined'</span>
<span class="token keyword">typeof</span> 12234124123412n<span class="token operator">==</span><span class="token operator">></span><span class="token string">'bigint'</span>
<span class="token comment" spellcheck="true">//bigint类型用于表示大于number类型所能表示的最大数值（253 - 1）</span>
<span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span><span class="token operator">></span><span class="token operator">></span> <span class="token string">'object'</span>
<span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span><span class="token operator">></span><span class="token operator">></span> <span class="token string">'object'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>使用typeof判定数值类型容易遇上<a href="#%E6%9A%82%E5%AD%98%E6%AD%BB%E5%8C%BA">暂存死区</a>问题<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">typeof</span> a<span class="token operator">==</span><span class="token operator">></span><span class="token operator">></span> referenceError
<span class="token keyword">let</span> a 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
而使用instance的判定规则是<pre class="line-numbers language-js"><code class="language-js">A instance <span class="token keyword">of</span> B
<span class="token comment" spellcheck="true">//等价于</span>
<span class="token keyword">instanceof</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> L <span class="token operator">=</span> A<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>
  <span class="token keyword">var</span> R <span class="token operator">=</span> B<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">===</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">//A的内部属性__proto__指向B的原型对象</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
即只要A的__proto__属性指向B的protorype原型对象，则认为A是B的实例对象。<pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>
<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>基本数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title>matery主题踩坑记录</title>
    <url>/2020/12/14/matery-zhu-ti-cai-keng-ji-lu/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>使用hexo快一年了，老是遇到坑，过一段时间又忘了，再找起来又得费一番功夫，记录下免得忘记。</p>
<h2 id="prism相关的代码样式冲突，-大括号转换的相关问题。"><a href="#prism相关的代码样式冲突，-大括号转换的相关问题。" class="headerlink" title="prism相关的代码样式冲突，{}大括号转换的相关问题。"></a>prism相关的代码样式冲突，{}大括号转换的相关问题。</h2><blockquote>
<p>hexo5.0内置了prism相关的功能，但是又和matery主题的使用相冲突，真的是坑死人了</p>
</blockquote>
<p>解决方法：<br>1、安装hexo-prism-plugin插件<br>2、屏蔽掉hexo自带的代码样式功能，直接注释掉自带的prism使用插件的配置。</p>
<pre class="line-numbers language-yml"><code class="language-yml">prism_plugin:
  mode: 'preprocess'    # realtime/preprocess
  theme: 'ghcolors'
  line_number: true    # default false
  custom_css:

# prismjs:
#   enable: true
#   preprocess: true
#   theme: 'tomorrow'
#   line_number: true
#   tab_replace: ''
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3、设置完之后你会发现颜色样式倒是可以了，但是{和}莫名其妙的被转换成了&#123;和&#125;!!!本想就这样放着，可我有老师忘不掉这个，而且他还影响阅读代码，真是要了命了。通过google大概知道了这个问题就是prism和hexo5自带的prism冲突引起的，解决办法有两个(原文地址)[<a href="https://github.com/blinkfox/hexo-theme-matery/issues/503]%EF%BC%9A">https://github.com/blinkfox/hexo-theme-matery/issues/503]：</a><br>    + 退回hexo4然后清除public文件重新生成<br>    + 删除hexo-prism-pluging插件<br>像我这样懒得人怎么可能会回退版本！删除插件代码高亮又称问题，于是我看了下hexo-prism-plugin的依赖代码，在他的index文件中的map中添加了大括号的匹配。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">'&amp;#123;'</span><span class="token punctuation">:</span> <span class="token string">'{'</span><span class="token punctuation">,</span>
  <span class="token string">'&amp;#125;'</span><span class="token punctuation">:</span> <span class="token string">'}'</span><span class="token punctuation">,</span>
  <span class="token string">'&amp;#39;'</span><span class="token punctuation">:</span> <span class="token string">'\''</span><span class="token punctuation">,</span>
  <span class="token string">'&amp;amp;'</span><span class="token punctuation">:</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span>
  <span class="token string">'&amp;gt;'</span><span class="token punctuation">:</span> <span class="token string">'>'</span><span class="token punctuation">,</span>
  <span class="token string">'&amp;lt;'</span><span class="token punctuation">:</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span>
  <span class="token string">'&amp;quot;'</span><span class="token punctuation">:</span> <span class="token string">'"'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>大功告成！！！，缺点是升级依赖可能就失效，还得重新改代码，算了就这样吧，睡觉咯！</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo-theme-matery</tag>
        <tag>matery主题</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis小结</title>
    <url>/2021/02/16/mybatis-xiao-jie/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p>
</blockquote>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote>
<p>mybatis的使用主要分为两种两种方式：1、xml+java逻辑2、在java文件里面使用注解。<br>这两种方式各有好坏，xml的好处是可以实现代码和sql分离，避免重新编译发布。注解则相对简单，坏处是注解在代码内部,如需要修改则要修改java源码，需要重新编译发布到服务器上。</p>
</blockquote>
<ul>
<li><p>xml文件方式使用mybatis</p>
<h3 id="添加对应的依赖包"><a href="#添加对应的依赖包" class="headerlink" title="添加对应的依赖包"></a>添加对应的依赖包</h3><blockquote>
<p>maven项目直接在pom.xml里的dependencies==&gt;&gt;dependency添加对应依赖选项</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>project xmlns<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0"</span>
  xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>
  xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>modelVersion<span class="token operator">></span><span class="token number">4.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>modelVersion<span class="token operator">></span>
  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>noah<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>MybatisTest<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
  <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>SNAPSHOT<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
  <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>
      <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
          <span class="token operator">&lt;</span>groupId<span class="token operator">></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
          <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
          <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.1</span><span class="token punctuation">.</span><span class="token number">32</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
      <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
          <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>mybatis<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
          <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mybatis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
          <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.2</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
      <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
          <span class="token operator">&lt;</span>groupId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
          <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
          <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.10</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
      <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
          <span class="token operator">&lt;</span>groupId<span class="token operator">></span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
          <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
          <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">17</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>

  <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="在项目根目录添加sqlMapConfig-xml文件"><a href="#在项目根目录添加sqlMapConfig-xml文件" class="headerlink" title="在项目根目录添加sqlMapConfig.xml文件"></a>在项目根目录添加sqlMapConfig.xml文件</h3><blockquote>
<p>java项目在src下，maven项目在src/main/resources下</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE configuration
  PUBLIC <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>
  <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token operator">></span>
<span class="token operator">&lt;</span>configuration<span class="token operator">></span>
  <span class="token operator">&lt;</span>properties resource<span class="token operator">=</span><span class="token string">"jdbc.properties"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">></span>
  <span class="token operator">&lt;</span>environments <span class="token keyword">default</span><span class="token operator">=</span><span class="token string">"develop"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>environment id<span class="token operator">=</span><span class="token string">"develop"</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>transactionManager type<span class="token operator">=</span><span class="token string">"JDBC"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>transactionManager<span class="token operator">></span>
          <span class="token operator">&lt;</span>dataSource type<span class="token operator">=</span><span class="token string">"Pooled"</span><span class="token operator">></span>
              <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driver"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.driver}"</span><span class="token operator">/</span><span class="token operator">></span>
              <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.url}"</span><span class="token operator">/</span><span class="token operator">></span>
              <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.username}"</span><span class="token operator">/</span><span class="token operator">></span>
              <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.password}"</span><span class="token operator">/</span><span class="token operator">></span>
              <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driver"</span> value<span class="token operator">=</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token operator">/</span><span class="token operator">></span>
              <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"jdbc:mysql:///jt_db?characterEncoding=utf-8&amp;amp;serverTimezone=GMT"</span><span class="token operator">/</span><span class="token operator">></span>
              <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">/</span><span class="token operator">></span>
              <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">/</span><span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>dataSource<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>environment<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>environments<span class="token operator">></span>
  <span class="token operator">&lt;</span>mappers<span class="token operator">></span>
      <span class="token operator">&lt;</span>mapper resource<span class="token operator">=</span><span class="token string">"Mapper/StuMapper.xml"</span> <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>mappers<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="创建要操作的表的对应实体类"><a href="#创建要操作的表的对应实体类" class="headerlink" title="创建要操作的表的对应实体类"></a>创建要操作的表的对应实体类</h3><blockquote>
<p>类的成员变量要和表的列名相同（尽量使用<strong>包装类</strong>声明，避免未赋值时0默认作为默认值），maven项目放置到java目录下</p>
</blockquote>
<h3 id="创建实体对应的xml文件"><a href="#创建实体对应的xml文件" class="headerlink" title="创建实体对应的xml文件"></a>创建实体对应的xml文件</h3><blockquote>
<p>文件名称为：实体+Mapper.xml（maven项目放置到resources目录下，java项目和对应实体在同一个包下）</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE mapper
  PUBLIC <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>
  <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token operator">></span>
<span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"dao.StuMapper"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>sql id<span class="token operator">=</span><span class="token string">"cols"</span><span class="token operator">></span>
      id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>addr<span class="token punctuation">,</span>score
  <span class="token operator">&lt;</span><span class="token operator">/</span>sql<span class="token operator">></span>
  <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findSome"</span> resultType<span class="token operator">=</span><span class="token string">"entries.Stu"</span><span class="token operator">></span>
      select <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"cols"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>include<span class="token operator">></span> from stu
      <span class="token operator">&lt;</span>where<span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"null != target"</span><span class="token operator">></span>
              name like <span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"%"</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>target<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"%"</span><span class="token punctuation">)</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>
  <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findAll"</span>  resultType<span class="token operator">=</span><span class="token string">"entries.Stu"</span> <span class="token operator">></span>
      select 
      <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"cols"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>include<span class="token operator">></span>
      from stu
  <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>
  <span class="token operator">&lt;</span>update id<span class="token operator">=</span><span class="token string">"addRecords"</span><span class="token operator">></span>
      insert into stu <span class="token function">values</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span>#<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>gender<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>addr<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>score<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>update<span class="token operator">></span>
  <span class="token operator">&lt;</span>update id<span class="token operator">=</span><span class="token string">"modifyRecords"</span><span class="token operator">></span>
      update stu set name<span class="token operator">=</span>#<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span>gender<span class="token operator">=</span>#<span class="token punctuation">{</span>gender<span class="token punctuation">}</span> where id<span class="token operator">=</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>update<span class="token operator">></span>
  <span class="token operator">&lt;</span>delete id<span class="token operator">=</span><span class="token string">"deleteRecords"</span><span class="token operator">></span>
      delete from stu where id<span class="token operator">=</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>delete<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> select $<span class="token punctuation">{</span>search<span class="token punctuation">}</span> from stu where name like <span class="token string">"%"</span>#<span class="token punctuation">{</span>orderType<span class="token punctuation">}</span><span class="token string">"%"</span> <span class="token operator">--</span><span class="token operator">></span>
       select $<span class="token punctuation">{</span>search<span class="token punctuation">}</span> from stu where score between #<span class="token punctuation">{</span>start<span class="token punctuation">}</span> and #<span class="token punctuation">{</span>end<span class="token punctuation">}</span> order by $<span class="token punctuation">{</span>order<span class="token punctuation">}</span> $<span class="token punctuation">{</span>orderType<span class="token punctuation">}</span> 
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>         select $<span class="token punctuation">{</span>search<span class="token punctuation">}</span> from stu where score between #<span class="token punctuation">{</span>start<span class="token punctuation">}</span> and #<span class="token punctuation">{</span>end<span class="token punctuation">}</span> order by <span class="token function">concat</span><span class="token punctuation">(</span>#<span class="token punctuation">{</span>order<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">" "</span> <span class="token punctuation">,</span>#<span class="token punctuation">{</span>orderType<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>
  <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findScore"</span> resultType<span class="token operator">=</span><span class="token string">"entries.Stu"</span><span class="token operator">></span>
      select <span class="token operator">*</span> from stu 
      <span class="token operator">&lt;</span>where<span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"null != minScore"</span><span class="token operator">></span>
              score <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>CDATA<span class="token punctuation">[</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span> #<span class="token punctuation">{</span>minScore<span class="token punctuation">}</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"null != maxScore"</span><span class="token operator">></span>
              and score <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>CDATA<span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span> #<span class="token punctuation">{</span>maxScore<span class="token punctuation">}</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>
  <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"updateRecords"</span> resultType<span class="token operator">=</span><span class="token string">"entries.Stu"</span> <span class="token operator">></span>
      update stu 
      <span class="token operator">&lt;</span>set<span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"null != name"</span><span class="token operator">></span>
              name<span class="token operator">=</span>#<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"null != gender"</span><span class="token operator">></span>
              gender<span class="token operator">=</span>#<span class="token punctuation">{</span>gender<span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>set<span class="token operator">></span>
      where id<span class="token operator">=</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>
  <span class="token operator">&lt;</span>delete id<span class="token operator">=</span><span class="token string">"deleteMultiRecords"</span><span class="token operator">></span>
      delete from stu 
      <span class="token operator">&lt;</span>where<span class="token operator">></span>
          id in
          <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">"array"</span> item<span class="token operator">=</span><span class="token string">"item"</span>  open<span class="token operator">=</span><span class="token string">"("</span> close<span class="token operator">=</span><span class="token string">")"</span> separator<span class="token operator">=</span><span class="token string">","</span> <span class="token operator">></span>
              #<span class="token punctuation">{</span>item<span class="token punctuation">}</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>delete<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="添加java逻辑程序"><a href="#添加java逻辑程序" class="headerlink" title="添加java逻辑程序"></a>添加java逻辑程序</h3></li>
<li><p>获取sqlSessionFactory对象</p>
</li>
<li><p>通过SqlSessionFactory对象获取sqlSession对象</p>
</li>
<li><p>通过sqlSession对象的update、select等方法执行sql</p>
</li>
<li><p>如果是修改了表的内容需要使用sqlSession对象提交修改内容</p>
<pre class="line-numbers language-java"><code class="language-java">InputStream is <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"sqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>
SqlSession ss <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
List<span class="token operator">&lt;</span>Stu<span class="token operator">></span> list <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"dao.StuMapper.findAll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>Stu stu <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="添加junit和log4j以及jdbc配置文件"><a href="#添加junit和log4j以及jdbc配置文件" class="headerlink" title="添加junit和log4j以及jdbc配置文件"></a>添加junit和log4j以及jdbc配置文件</h3><ul>
<li>在pom.xml中添加对应的包文件，见上方pom文件</li>
<li>在项目上右键buildpath==&gt;&gt;add library==&gt;&gt;junit4（5容易出问题）</li>
<li>在项目的resources文件夹下新建log4j.properties和jdbc.properties文件，添加以下配置文件<pre class="line-numbers language-xml"><code class="language-xml"># jdbc配置文件
jdbc.driver=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql:///jt_db?characterEncoding=utf-8&amp;serverTimezone=GMT
jdbc.username=root
jdbc.password=root
# log4j配置文件
# Global logging configuration
log4j.rootLogger=DEBUG, stdout
# Console output...
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p [%t]  %m%n
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>修改sqlMapConfig.xml文件，使用${}（非el也非占位符）添加properties标签，修改dateSource标签值标签<pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driver"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.driver}"</span><span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.url}"</span><span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.username}"</span><span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.password}"</span><span class="token operator">/</span><span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="FAQ常见问题"><a href="#FAQ常见问题" class="headerlink" title="FAQ常见问题"></a>FAQ常见问题</h3></li>
<li>xml配置文件不出现提示<br>1、找对应的dtd文件下载地址，并下载dtd文件。</li>
</ul>
<p><img src="/images/dtdUrl.png" alt="获取dtd文件下载路径"></p>
<p>2、添加到xml catalog：window==&gt;&gt;properties==&gt;&gt;xml catalog==&gt;&gt;add==&gt;&gt;catalog entry将下载的对应dtd文件添加<br>3、然后将key type选为url，key值为之前下载dtd文件的路径不要http或https头，保存并应用即可。<br><img src="/images/dtdSetting.png" alt="eclipse添加dtd文件提示"></p>
<ul>
<li>&lt;和&gt;、&amp;等符号在xml文件中辨识失败。<table>
<thead>
<tr>
<th>符号</th>
<th>替换的符号</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>&amp;amp;</td>
</tr>
<tr>
<td>&lt;|&gt;</td>
<td>&lt;![ADATA[&lt;|&gt;]&gt;]</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="和"><a href="#和" class="headerlink" title="${}和#{}"></a>${}和#{}</h2><blockquote>
<p>都可以实现sql内容变量的替换，${}是直接替换占位内容，#{}是替换成’替换内容’的形式<br>#{}较${}安全，使用jdbc的preparedStatement对象进行预编译，防止sql注入，尽量使用#{},用concat函数or””连接实现替换${}。<br>${}常见用于不可预编译的sql对象，例如动态表名、排序规则等。</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml">select ${search} from stu where name like "%"#{orderType}"%"
select ${search} from stu where score between #{start} and #{end} order by ${order} ${orderType}
select ${search} from stu where score between #{start} and #{end} order by concat(#{order}," " ,#{orderType})
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="传入参数"><a href="#传入参数" class="headerlink" title="传入参数"></a>传入参数</h3><blockquote>
<p>#{}/${}参数可以接受三种形式，即字符串（不推荐，有时失效），map以及实体类对象（有getter和setter方法）</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//字符串方式</span>
<span class="token keyword">int</span> rows <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>mapperLocationStr<span class="token operator">+</span><span class="token string">"deleteRecords"</span><span class="token punctuation">,</span><span class="token string">"1002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//map方式</span>
StuMapper mapper <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StuMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"target"</span><span class="token punctuation">,</span> <span class="token string">"刘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
List<span class="token operator">&lt;</span>Stu<span class="token operator">></span> list <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findSome</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//实体类方式</span>
Stu stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stu</span><span class="token punctuation">(</span><span class="token string">"刘能"</span><span class="token punctuation">,</span><span class="token number">1004</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token number">86d</span><span class="token punctuation">,</span> <span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> rows <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>mapperLocationStr<span class="token operator">+</span><span class="token string">"addRecords"</span><span class="token punctuation">,</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h2><blockquote>
<p>可以根据传入参收动态改变sql的内容的标签方法。</p>
</blockquote>
<h3 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h3><blockquote>
<p>test属性内可以使用条件判定</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> minScore<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    score <span class="token cdata">&lt;![CDATA[>]]></span> #{minScore}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="where标签"><a href="#where标签" class="headerlink" title="where标签"></a>where标签</h3><blockquote>
<p>代替sql关键字where，可以自动添加，删除连接条件关键字</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml">select * from stu 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> minScore<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        score <span class="token cdata">&lt;![CDATA[>]]></span> #{minScore}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> maxScore<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        and score <span class="token cdata">&lt;![CDATA[&lt;]]></span> #{maxScore}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="set标签"><a href="#set标签" class="headerlink" title="set标签"></a>set标签</h3><blockquote>
<p>代替sql关键字set，自动判定连接符,<strong>连接符要西在列名称后面</strong></p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateRecords<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entries.Stu<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
    update stu 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            name=#{name},
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> gender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            gender=#{gender},
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>
    where id=#{id}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="sql及其他标签应用"><a href="#sql及其他标签应用" class="headerlink" title="sql及其他标签应用"></a>sql及其他标签应用</h3><blockquote>
<p>提供一些公共的可重复引用的sql片段,id在此文件中唯一不可重复，与include标签配合使用，替换sql片段。</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cols<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    id,name,gender,addr,score
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findSome<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entries.Stu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cols<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> from stu
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> target<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            name like concat("%",#{target},"%")
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="添加mapper对应接口"><a href="#添加mapper对应接口" class="headerlink" title="添加mapper对应接口"></a>添加mapper对应接口</h2><blockquote>
<p>实际上在用mybatis操作sql进行数据库操作时，很多操作都是重复的，比如获取facotry和查找执行xml对应sql等<br>可以使用spring矿建代替我们进行sqlSessionFactory对象获取以及使用mapper接口代替我们进行查找sql并执行的操作。</p>
</blockquote>
<h3 id="创建mapper对应接口"><a href="#创建mapper对应接口" class="headerlink" title="创建mapper对应接口"></a>创建mapper对应接口</h3><blockquote>
<p>maven项目中在java文件夹目录下创建对应接口文件，java项目在src下即可,文件名要和对应的maper.xml文件相同。</p>
</blockquote>
<h3 id="修改对应xml文件"><a href="#修改对应xml文件" class="headerlink" title="修改对应xml文件"></a>修改对应xml文件</h3><blockquote>
<p>将对应xml文件的mapper标签的namespace属性为接口的全路径名称（maven项目到java根目录，java项目到src根目录）</p>
</blockquote>
<h3 id="替换sqlSeesion指定sql方法"><a href="#替换sqlSeesion指定sql方法" class="headerlink" title="替换sqlSeesion指定sql方法"></a>替换sqlSeesion指定sql方法</h3><blockquote>
<p>使用接口调用代替sqlSession直接执行sql方法。</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SqlSession ss <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment" spellcheck="true">//获取对应接口类对象的实现，返回mapper对象（实现了接口的对象实例）</span>
    StuMapper mapper <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StuMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"target"</span><span class="token punctuation">,</span> <span class="token string">"刘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    List<span class="token operator">&lt;</span>Stu<span class="token operator">></span> list <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findSome</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//        List&lt;Stu> list = ss.selectList(mapperLocationStr+"findSome", map);</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Stu stu <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Before</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        InputStream is <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"sqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>@Before注解：在@Test方法执行前先执行</li>
</ul>
<h2 id="mybatis架构"><a href="#mybatis架构" class="headerlink" title="mybatis架构"></a>mybatis架构</h2><blockquote>
<p>从不同角度分为三个架构，即应用架构，产品架构，及技术架构</p>
</blockquote>
<h3 id="应用架构"><a href="#应用架构" class="headerlink" title="应用架构"></a>应用架构</h3><blockquote>
<p>有啥作用？简化了jdbc的繁琐操作，封装了连接创建、分离了sql与代码、并且自动封装参数和sql查询结构到对应的对象中。<br>怎样实现的？<br>    1、通过缓存、线程池、日志等提高了数据库操作效率<br>    2、常用api较单一、学习成本较低、易上手<br>    3、自动读取xml（动态sql），解耦sql，可复用性强。</p>
</blockquote>
<p><img src="/images/mybatis/mybatisApplicationDiagram.png" alt="应用简图"><br><img src="/images/mybatis/mybatisProductDiagram.png" alt="产品简图"></p>
<h3 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h3><blockquote>
<p>mybatis就是封装jdbc的创建数据库连接，statement对象创建、sql执行结构返回等操作。</p>
</blockquote>
<p><img src="/images/mybatis/processDiagram.png" alt="总体结构图"></p>
<p><img src="/images/mybatis/resouceConfig.png" alt="配置资源转换图"><br><img src="/images/mybatis/factoryCreate.png" alt="sqlSessionFactory创建"><br><img src="/images/mybatis/sqlSessionCreate.png" alt="sqlSession创建"><br><img src="/images/mybatis/sqlSessionUseType.png" alt="sqlSession应用方式"></p>
<p>注意：mybatis的设计模式使用的都是<strong>接口耦合</strong>，即实现由具体类实现，但是返回的参数类型都是接口，这样便于后期实现类的变化。</p>
<h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><blockquote>
<p>主要分析mybatis的会话工厂创建、会话对象底层实现、缓存的应用配置。</p>
</blockquote>
<ul>
<li><p>工厂对象的创建主要使用了xmlConifigBuilder和xmlMapperBuilder将mybatis的配置信息和sql分别封装到Environment对象和MappedStatement对象，最终将这两类信息封装到configuration对象传给sqlSession对象，用以配置缓存，创建sql连接，封装sql和Statement等操作。<br><img src="/images/mybatis/sqlSessionFactoryCreate.png" alt="sqlSessionFactory创建过程"><br>当然，我们可以不适用xml配置的方式自己创建sqlSessionFactory对象,并将创建好的对象通过抽象方法传递。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisConfig</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      ComboPooledDataSource pooledDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      JdbcTransactionFactory transactionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTransactionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      Environment development <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Environment</span><span class="token punctuation">(</span><span class="token string">"development"</span><span class="token punctuation">,</span> transactionFactory<span class="token punctuation">,</span> pooledDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
      Configuration configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span>development<span class="token punctuation">)</span><span class="token punctuation">;</span>
      configuration<span class="token punctuation">.</span><span class="token function">addMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>
      SqlSession sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> sqlSession<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>sqlSession 对象运行主要由executor接口的实现类simpleExecutor、batExecutor等具体实现，executor会执行创建缓存、sql连接、封装sql和statement对象并交由statementHandler处理sql操作的任务。<br><img src="/images/mybatis/sqlSessionRunDetail.png" alt="sqlSession对象运行原理"></p>
</li>
<li><p>基于Mapper接口的应用方式比直接调用操作数据库方法的过程（上面）多了一个创建代理对象的过程，这个代理对象会调用exector执行相应操作。<br><img src="/images/mybatis/mapperRunDetail.png" alt="mapper应用方式"></p>
</li>
<li><p>缓存分为一级缓存，二级缓存。一级缓存默认会跟随sqlSession创建、关闭而创建、关闭，且不能共享。二级缓存则可以多个sqlSession之间共享。mybatis默认将一级、二级缓存打开，但是使用需要再config和对应mappper的xml文件中配置。</p>
</li>
</ul>
<p><img src="/images/mybatis/level1Cache.png" alt="mybatis一级缓存应用"></p>
<ul>
<li><p>只有当上一个相同的sql操作的sqlSession关闭之后，才会把结果存入二级缓存。<br><img src="/images/mybatis/level2Cache.png" alt="二级缓存使用详情"></p>
</li>
<li><p>关于缓存配置，一般使用二级缓存可在对应的mapper.xml文件中配置,指定缓存大小和更新方法等。</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cols<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>id,username,password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span>
          <span class="token attr-name">eviction</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FIFO<span class="token punctuation">"</span></span>
          <span class="token attr-name">flushInterval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span>
          <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>512<span class="token punctuation">"</span></span>
          <span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entries.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cols<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> from user
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> #{target}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
              id = #{target}
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中readOnly只读的要求<strong>被缓存的对象实现序列化接口</strong>（Serializable），因为只读操作实际上就是通过序列化复制元数据。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql安装</title>
    <url>/2021/02/12/mysql-an-zhuang/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1、从mysql<a href="https://dev.mysql.com/downloads/mysql/">官方下载地址官</a>下载你需要的版本的压缩包<br>2、解压到自定义目录，新建/修改mysql.ini配置文件</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># 设置3306端口</span>
port<span class="token operator">=</span><span class="token number">3306</span>
<span class="token comment" spellcheck="true"># 设置mysql的安装目录</span>
basedir<span class="token operator">=</span>E:\devtools\mysql<span class="token number">-5.7</span><span class="token punctuation">.</span><span class="token number">26</span><span class="token operator">-</span>winx64   <span class="token comment" spellcheck="true"># 有些电脑需要用双斜线\\</span>
<span class="token comment" spellcheck="true"># 设置mysql数据库的数据的存放目录</span>
datadir<span class="token operator">=</span>E:\devtools\mysql<span class="token number">-5.7</span><span class="token punctuation">.</span><span class="token number">26</span><span class="token operator">-</span>winx64\<span class="token keyword">Data</span>   <span class="token comment" spellcheck="true"># 此处同上</span>
<span class="token comment" spellcheck="true"># 允许最大连接数</span>
max_connections<span class="token operator">=</span><span class="token number">200</span>
<span class="token comment" spellcheck="true"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span>
max_connect_errors<span class="token operator">=</span><span class="token number">10</span>
<span class="token comment" spellcheck="true"># 服务端使用的字符集默认为UTF8</span>
character<span class="token operator">-</span><span class="token keyword">set</span><span class="token operator">-</span>server<span class="token operator">=</span>utf8
<span class="token comment" spellcheck="true"># 创建新表时将使用的默认存储引擎</span>
<span class="token keyword">default</span><span class="token operator">-</span>storage<span class="token operator">-</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">INNODB</span>
<span class="token comment" spellcheck="true"># 默认使用“mysql_native_password”插件认证</span>
default_authentication_plugin<span class="token operator">=</span>mysql_native_password
<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># 设置mysql客户端默认字符集</span>
<span class="token keyword">default</span><span class="token operator">-</span>character<span class="token operator">-</span><span class="token keyword">set</span><span class="token operator">=</span>utf8
<span class="token punctuation">[</span>client<span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># 设置mysql客户端连接服务端时默认使用的端口</span>
port<span class="token operator">=</span><span class="token number">3306</span>
<span class="token keyword">default</span><span class="token operator">-</span>character<span class="token operator">-</span><span class="token keyword">set</span><span class="token operator">=</span>utf8
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3、初始化mysql，以<strong>管理员权限</strong>运行cmd命令行窗口，输入以下命令初始化</p>
<pre class="line-numbers language-sql"><code class="language-sql">mysqld <span class="token comment" spellcheck="true">--initialize-insecure</span>
mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>初始默认密码root提示“ERROR 1045 (28000): Access denied for user ‘ODBC’@’localhost’ (using password: NO)”，可以试试用<pre class="line-numbers language-sql"><code class="language-sql">mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>proot
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
登录试试。</li>
</ul>
<p>4、新建/删除mysql服务</p>
<pre class="line-numbers language-sql"><code class="language-sql">mysqld <span class="token comment" spellcheck="true">--install [自定义服务名称]</span>
mysqld <span class="token comment" spellcheck="true">--remove [自定义服务名称]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>省略自定义服务名称默认创建/删除mysql作为服务名称。</li>
</ul>
<p>5、启动/停止mysql服务</p>
<pre class="line-numbers language-sql"><code class="language-sql">net <span class="token keyword">start</span> <span class="token punctuation">[</span>自定义服务名称<span class="token punctuation">]</span>
net stop <span class="token punctuation">[</span>自定义服务名称<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>6、修改默认密码</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#启动服务</span>
net <span class="token keyword">start</span> 自定义服务名称
<span class="token comment" spellcheck="true">#进入mysql</span>
mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p你的密码
<span class="token comment" spellcheck="true">#修改mysql.user数据库数据</span>
<span class="token keyword">alter</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token string">'root'</span>@'localhost<span class="token string">' identified by '</span>root'
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="mysql重装"><a href="#mysql重装" class="headerlink" title="mysql重装"></a>mysql重装</h2><p>1、停止服务，将在运行的mysql服务在任务管理器中停掉（cmd==&gt;&gt;输入services.msc==&gt;&gt;找到服务，然后stop）。<br>2、删掉mysql安装的目录文件（mysql.ini文件中配置的有）。<br>3、删除注册表信息，cmd==&gt;&gt;输入regedit==&gt;&gt;找到mysql，右键删除。<br>。。。步骤同<strong>安装</strong>步骤。</p>
<h2 id="忘记密码"><a href="#忘记密码" class="headerlink" title="忘记密码"></a>忘记密码</h2><p>1、在mysql.ini上添加跳过权限认证</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 跳过密码验证</span>
<span class="token comment" spellcheck="true"># skip-grant-tables</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>2、连接数据库，修改密码</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#修改mysql.user数据库数据</span>
<span class="token keyword">update</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">set</span> authentication_string<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span> <span class="token keyword">where</span> suer<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#修改mysql.user数据库数据(5.6版)</span>
<span class="token keyword">update</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">set</span> password<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span> <span class="token keyword">where</span> suer<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#修改mysql.user数据库数据(8.0版及5.7版)</span>
flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#加载权限表</span>
<span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token string">'root'</span><span class="token variable">@'localhost'</span> identified <span class="token keyword">by</span> 新的密码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>异常处理</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql常用命令</title>
    <url>/2021/01/03/mysql-chang-yong-ming-ling/</url>
    <content><![CDATA[<h2 id="1、常用命令"><a href="#1、常用命令" class="headerlink" title="1、常用命令"></a>1、常用命令</h2><h3 id="1、1数据库命令"><a href="#1、1数据库命令" class="headerlink" title="1、1数据库命令"></a>1、1数据库命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>set names utf8</td>
<td>设置编码格式为utf8</td>
</tr>
<tr>
<td>source path</td>
<td>导入sql文件，不要用复制执行的方式，这种方式要先cd到sql对应的文件否则error:2</td>
</tr>
<tr>
<td>show databases;</td>
<td>显示所有创建的数据库</td>
</tr>
<tr>
<td>use dbName;</td>
<td>选中具体的数据库</td>
</tr>
<tr>
<td>select database();</td>
<td>查看当前选中的数据库</td>
</tr>
<tr>
<td>create database if not exit dbName charset utf8;</td>
<td>创建数据库，并设置其编码为utf-8（mysql不识别-，不用写）</td>
</tr>
<tr>
<td>drop database if exit dbName;</td>
<td>删除已存在的数据库</td>
</tr>
<tr>
<td>show create database dbName;</td>
<td>显示之前创建具体数据库的命令设置</td>
</tr>
</tbody></table>
<h3 id="1、2表操作"><a href="#1、2表操作" class="headerlink" title="1、2表操作"></a>1、2表操作</h3><table>
<thead>
<tr>
<th>命令</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>create table if not exists stu(id int,name varchar(20),gender varchar(20),birthday date,score double);</td>
<td>创建stu表</td>
</tr>
<tr>
<td>drop table if exists tbName;</td>
<td>删除表</td>
</tr>
<tr>
<td>show create table tbName;</td>
<td>查看表的创建命令信息</td>
</tr>
<tr>
<td>desc tbName;</td>
<td>查看表结构</td>
</tr>
</tbody></table>
<h2 id="2、基本类型"><a href="#2、基本类型" class="headerlink" title="2、基本类型"></a>2、基本类型</h2><table>
<thead>
<tr>
<th>类型</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td>整数类型</td>
</tr>
<tr>
<td>char(num)</td>
<td>字符（0~255字符)</td>
</tr>
<tr>
<td>varchar(num)</td>
<td>可变长字符（0~65535字节）</td>
</tr>
<tr>
<td>text</td>
<td>文本（0~65535字节）</td>
</tr>
<tr>
<td>bigtext</td>
<td>大数据（4G）</td>
</tr>
<tr>
<td>date</td>
<td>年月日</td>
</tr>
<tr>
<td>time</td>
<td>时分秒</td>
</tr>
<tr>
<td>datetime</td>
<td>年月日时分秒</td>
</tr>
<tr>
<td>timestmap</td>
<td>同datetime但存储的是时间戳，可自动增删时间</td>
</tr>
</tbody></table>
<p><strong>时间类型只有</strong>timestamp可以用<strong>函数</strong>设置定义默认值（now/current_date函数表示），字符设定的，取值范围要在’1970-01-01 00:00:00’ 到 ‘2037-12-31 23:59:59’之间。</p>
<h2 id="3、约束"><a href="#3、约束" class="headerlink" title="3、约束"></a>3、约束</h2><ul>
<li>主键约束——作为表记录的唯一标识不可为空不能为空——primary key</li>
<li>唯一约束——列不能重复——unique</li>
<li>非空约束——列不能为空——not null</li>
<li>外键约束——和别的表的约束关系——foreign key(外键) references 表名(关联外键)</li>
<li>主键自增——表的主键才可设置——auto_increment<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> stu<span class="token punctuation">;</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> stu<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>gender <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>birthday <span class="token keyword">date</span><span class="token punctuation">,</span>score <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="4、插入数据"><a href="#4、插入数据" class="headerlink" title="4、插入数据"></a>4、插入数据</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> stu<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>score<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'王海涛'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'1999-09-18'</span><span class="token punctuation">,</span><span class="token number">99.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> stu <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'张慎政'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'1988-09-18'</span><span class="token punctuation">,</span><span class="token number">89.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">set</span> names gbk<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#通知服务器用gbk接收数据</span>
mysql <span class="token comment" spellcheck="true">--default-character-set=gbk -uroot -proot#设置当前库接收的数据编码是gbk，mysql会自动转换gbk为utf8然后存储下来</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> stu <span class="token keyword">modify</span> id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#修改主键，添加自增</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>可以省略表字段，但插入值必须要按顺序依次插入。</li>
</ul>
<h2 id="5、修改数据"><a href="#5、修改数据" class="headerlink" title="5、修改数据"></a>5、修改数据</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#不支持+=运算符，不写where默认修改所有列</span>
<span class="token keyword">update</span> stu <span class="token keyword">set</span> score<span class="token operator">=</span>score<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">update</span> stu <span class="token keyword">set</span> score<span class="token operator">=</span>score<span class="token number">-10</span><span class="token punctuation">;</span>
<span class="token keyword">update</span> stu <span class="token keyword">set</span> socor<span class="token operator">=</span><span class="token number">88</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'王海涛'</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="6、查询数据"><a href="#6、查询数据" class="headerlink" title="6、查询数据"></a>6、查询数据</h2><h3 id="6、1全局可用函数"><a href="#6、1全局可用函数" class="headerlink" title="6、1全局可用函数"></a>6、1全局可用函数</h3><blockquote>
<p>一些函数全局可用</p>
</blockquote>
<table>
<thead>
<tr>
<th>条件语句</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>current_date()</td>
<td>获取当前时间，返回年月日</td>
</tr>
<tr>
<td>current_time()</td>
<td>获取当前时间，返回时分秒</td>
</tr>
<tr>
<td>now()</td>
<td>获取当前时间，返回：年月日时分秒</td>
</tr>
<tr>
<td>month(dateClumn)</td>
<td>适用于date类型的转换函数对应月</td>
</tr>
<tr>
<td>year(dateColumn)</td>
<td>适用于date类型的转换函数对应年</td>
</tr>
<tr>
<td>time(dateColumn)</td>
<td>适用于date类型的转换函数对应时间(时分秒)</td>
</tr>
<tr>
<td>ifnull(columnName,代替null的值)</td>
<td>使用指定值代替指定列中出现的null值</td>
</tr>
</tbody></table>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#isfull(columnName,0)将null当成0处理</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span>sal<span class="token operator">+</span>ifnull<span class="token punctuation">(</span>bonus<span class="token punctuation">,</span>替换值<span class="token punctuation">)</span> <span class="token keyword">as</span> salary <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal<span class="token operator">+</span>ifnull<span class="token punctuation">(</span>bonus<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">3500</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#as可以省略不写</span>
<span class="token comment" spellcheck="true">#select 加时间函数可获取指定函数返回的时间。</span>
<span class="token keyword">select</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#结果</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------+</span>
<span class="token operator">|</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------+</span>
<span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">01</span>:<span class="token number">52</span>:<span class="token number">22</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="6、2where条件查询"><a href="#6、2where条件查询" class="headerlink" title="6、2where条件查询"></a>6、2where条件查询</h3><blockquote>
<p>常见的条件查询组合</p>
</blockquote>
<table>
<thead>
<tr>
<th>条件语句</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>between 条件 and 条件</td>
<td>在条件1和条件2直接的范围</td>
</tr>
<tr>
<td>and/or/not</td>
<td>与|或|非</td>
</tr>
<tr>
<td>in (条件1,条件2,…)</td>
<td>条件集合范围内</td>
</tr>
<tr>
<td>is</td>
<td>代替=判定条件是否相同</td>
</tr>
<tr>
<td>like ‘%_条件%’</td>
<td>模糊查询,条件中的%代替任意个任意字符,_代替一个任意字符</td>
</tr>
</tbody></table>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#查询between...and...</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span>job <span class="token keyword">from</span> <span class="token keyword">temp</span> <span class="token keyword">where</span> sal<span class="token operator">>=</span><span class="token number">1000</span> <span class="token operator">and</span> sal<span class="token operator">&lt;=</span><span class="token number">2000</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#等同于</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span>job <span class="token keyword">from</span> <span class="token keyword">temp</span> <span class="token keyword">where</span> sal <span class="token operator">between</span> <span class="token number">1000</span> <span class="token operator">and</span> <span class="token number">2000</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#查询in条件</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span>bonus <span class="token keyword">from</span> emp <span class="token keyword">where</span> bonus <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#等同于</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span>bonus <span class="token keyword">from</span> emp <span class="token keyword">where</span> bonus<span class="token operator">=</span><span class="token number">300</span> <span class="token operator">or</span> bonus<span class="token operator">=</span><span class="token number">500</span> <span class="token operator">or</span> bonus<span class="token operator">=</span><span class="token number">700</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#not in(条件1,条件2....)</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1400</span><span class="token punctuation">,</span><span class="token number">1600</span><span class="token punctuation">,</span><span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#or</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal<span class="token operator">></span><span class="token number">4000</span> <span class="token operator">or</span> sal<span class="token operator">&lt;</span><span class="token number">2000</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#and+ifnull条件</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>ifnull<span class="token punctuation">(</span>bonus<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> fro emp <span class="token keyword">where</span> sal<span class="token operator">></span><span class="token number">3000</span> <span class="token operator">and</span> ifnull<span class="token punctuation">(</span>bonus<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">600</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#is代替=</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> dept <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> dept <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#like模糊查询,%代替0或多个字符,_代替一个任意的字符</span>
<span class="token keyword">select</span> name <span class="token keyword">from</span> emp <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%涛%'</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> name <span class="token keyword">from</span> emp <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'刘_'</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#year(dateColumn)提取列的年份</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span>birthday <span class="token keyword">from</span> emp <span class="token keyword">where</span> year<span class="token punctuation">(</span>birthday<span class="token punctuation">)</span> <span class="token operator">between</span> <span class="token number">1993</span> <span class="token operator">and</span> <span class="token number">1995</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#month(dateColumn)提取列月份</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span>birthday <span class="token keyword">from</span> emp <span class="token keyword">where</span> month<span class="token punctuation">(</span>birthday<span class="token punctuation">)</span><span class="token operator">=</span>month<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#curdate()当前日期年\月\日</span>
<span class="token comment" spellcheck="true">#curtime()当前时间时\分\秒</span>
<span class="token comment" spellcheck="true">#sysdate()当前日期+时间年\月\日\时\分\秒</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="6、3group-by分组和聚合函数"><a href="#6、3group-by分组和聚合函数" class="headerlink" title="6、3group by分组和聚合函数"></a>6、3group by分组和聚合函数</h3><blockquote>
<p>将查询信息分组,然后利用聚合函数统计信息</p>
</blockquote>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#group by分组,ANY_VALUE跳过无关联列检查(也可使用聚合函数包裹)</span>
<span class="token keyword">select</span> dept<span class="token punctuation">,</span>ANY_VALUE<span class="token punctuation">(</span>name<span class="token punctuation">)</span> name <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> dept<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#count(columnName)统计分组后每组的人数</span>
<span class="token keyword">select</span> job<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> job<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#不分组,将全体数据当成一个数组</span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> 员工人数 <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal<span class="token operator">></span><span class="token number">3000</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#max(columnName)统计分组的最大值</span>
<span class="token keyword">select</span> ifnull<span class="token punctuation">(</span>dept<span class="token punctuation">,</span><span class="token string">'总经理'</span><span class="token punctuation">)</span> dept<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> dept<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#min(columnName)统计分组最小值</span>
<span class="token keyword">select</span>  dept<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> 最少薪资 <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> dept<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#sum(colnumName)求和</span>
<span class="token keyword">select</span>  <span class="token function">sum</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> 总薪资 <span class="token keyword">from</span> emp<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#avg(column)平均薪资</span>
<span class="token keyword">select</span>  <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> 平均薪资 <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token keyword">select</span>  <span class="token function">sum</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>  平均薪资 <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="6、4去重-amp-amp-排序-amp-amp-分页"><a href="#6、4去重-amp-amp-排序-amp-amp-分页" class="headerlink" title="6、4去重&amp;&amp;排序&amp;&amp;分页"></a>6、4去重&amp;&amp;排序&amp;&amp;分页</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#distinct去除重复信息</span>
<span class="token keyword">select</span> <span class="token keyword">distinct</span> dept<span class="token punctuation">,</span>job <span class="token keyword">from</span> emp<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#order by排序asc升序默认 desc降序标明</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">desc</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#分页limit 开始条数,每页条数</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#第二页</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>avg/sum/count自动剔除null,统计时可能漏掉</li>
<li>聚合函数不能用在where条件语句中</li>
</ul>
<h2 id="7、删除数据"><a href="#7、删除数据" class="headerlink" title="7、删除数据"></a>7、删除数据</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> tbName <span class="token keyword">where</span> 条件
<span class="token keyword">delete</span> <span class="token keyword">from</span> tbName
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>可以省略where条件，默认删除表的所有内容</li>
</ul>
<h2 id="8、修改列信息"><a href="#8、修改列信息" class="headerlink" title="8、修改列信息"></a>8、修改列信息</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#添加列</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> tbName <span class="token keyword">add</span> columnName dataType <span class="token punctuation">[</span>约束<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#修改列</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> tbName <span class="token keyword">modify</span> columnName dataType <span class="token punctuation">[</span>约束<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#删除列</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token keyword">drop</span> columnName<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#添加外键(FK_ID是外键别名)</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> tbName <span class="token keyword">add</span> <span class="token keyword">constraint</span> 外键别名 <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>关联外键列名<span class="token punctuation">)</span> <span class="token keyword">references</span> 表名<span class="token punctuation">(</span>外键名<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#删除外键</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> tbName <span class="token keyword">drop</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> 外键别名
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="9、其他sql"><a href="#9、其他sql" class="headerlink" title="9、其他sql"></a>9、其他sql</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#cmd连接mysql完整代码</span>
mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>proot <span class="token operator">-</span>h127<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token operator">-</span>P3306
<span class="token comment" spellcheck="true">#退出执行加'和\c按enter即可</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="10、sql语言执行顺序"><a href="#10、sql语言执行顺序" class="headerlink" title="10、sql语言执行顺序"></a>10、sql语言执行顺序</h2><p>1、from子句组装来自不同数据源的数据；<br>2、where子句基于指定的条件对记录行进行筛选；<br>3、group by子句将数据划分为多个分组；<br>4、使用聚集函数进行计算；<br>5、使用having子句筛选分组；<br>6、计算所有的表达式；<br>7、select 的字段；<br>8、使用order by对结果集进行排序。<br>总结起来就是:先拿数据源from/on/join|outer,然后where条件判断筛选group by分组,having重新组合然后select列,然后去重distinct,最后排序order by</p>
<p>详见<a href="https://www.cnblogs.com/HDK2016/p/6884191.html">SQL中Select语句完整的执行顺序</a></p>
<h2 id="11、数据备份和恢复"><a href="#11、数据备份和恢复" class="headerlink" title="11、数据备份和恢复"></a>11、数据备份和恢复</h2><blockquote>
<p>数据库备份和恢复</p>
</blockquote>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#数据备份(cmd中+管理员权限+目标文件的读写权限+命令行里(不是mysql命令里面))</span>
mysqldump <span class="token operator">-</span>uroot <span class="token operator">-</span>p 要备份的数据库 <span class="token operator">></span> 要保存的绝对路径
<span class="token comment" spellcheck="true">#数据恢复(权限同上)</span>
mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p 目标数据库<span class="token punctuation">(</span>已经存在的<span class="token punctuation">)</span> <span class="token operator">&lt;</span> 要读取的绝对路经

<span class="token comment" spellcheck="true">#对比mongodb</span>
mongodump <span class="token operator">-</span>h127<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">3306</span> <span class="token operator">-</span><span class="token number">d</span> 要备份的数据库名称 <span class="token operator">-</span>o保存地址
mongorestore <span class="token operator">-</span>h服务器地址 <span class="token operator">-</span><span class="token number">d</span> 要恢复的数据实例 备份数据库的路径
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="12、多表查询"><a href="#12、多表查询" class="headerlink" title="12、多表查询"></a>12、多表查询</h2><ul>
<li><p>笛卡尔积查询(结果条数=表1条数*表2条数…)</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表<span class="token number">1</span><span class="token punctuation">,</span>表<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>关联查询,只查出各表中有对应关系的数据</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表<span class="token number">1</span><span class="token punctuation">,</span>表<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> 表<span class="token number">1</span>条列<span class="token operator">=</span>表<span class="token number">2</span>列<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>外连接查询,查询多表中某个表的全部数据,要显示全部数据的表在左边就左连接否则右连接.</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 详情表 <span class="token keyword">left</span> <span class="token keyword">join</span> 表<span class="token number">2</span> <span class="token keyword">on</span> 条件
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表<span class="token number">1</span> <span class="token keyword">right</span> <span class="token keyword">join</span> 详情表 <span class="token keyword">on</span> 条件
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>多表结果查询</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表<span class="token number">1</span> <span class="token keyword">where</span> 条件判定<span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表<span class="token number">2</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>虚拟视图查询</p>
<pre class="line-numbers language-sql"><code class="language-sql">selct <span class="token operator">*</span> <span class="token keyword">from</span> tbName<span class="token punctuation">,</span>子查询视图<span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tbName 条件<span class="token punctuation">)</span> <span class="token keyword">where</span> 条件 
<span class="token comment" spellcheck="true">#例如在进行分组查询并查找具体的某行信息</span>
<span class="token keyword">select</span> 显示列 <span class="token keyword">from</span> tbName<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> 显示列 <span class="token keyword">from</span> tbName <span class="token keyword">group</span> <span class="token keyword">by</span> 条件<span class="token punctuation">)</span>查找的分组信息<span class="token operator">*</span><span class="token operator">*</span>视图<span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">where</span> 条件
<span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>dept_id<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>sal <span class="token keyword">from</span> emp <span class="token number">e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> maxsal<span class="token punctuation">,</span>dept_id <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> dept_id<span class="token punctuation">)</span> t <span class="token keyword">where</span> t<span class="token punctuation">.</span>maxsal<span class="token operator">=</span><span class="token number">e</span><span class="token punctuation">.</span>sal <span class="token operator">and</span> t<span class="token punctuation">.</span>dept_id<span class="token operator">=</span><span class="token number">e</span><span class="token punctuation">.</span>dept_id<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>npm常用命令</title>
    <url>/2020/10/07/npm-chang-yong-ming-ling/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>npm包管理工具的命令较多，记录下常用的命令</p>
<span id="more"></span>

<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>详见 <strong><a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html">npm使用指南</a></strong> 阮一峰先生写的npm原理很清楚，通俗易懂。总结起来就是在运行npm run+关键字的命令时，npm会自动创建一个shell，同时将/node_moudles/.bin文件加到Path路径下，从而执行.bin文件里面的脚本代码（支持所有shell脚本，不仅是node的脚本）</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>释义</th>
<th>简写</th>
</tr>
</thead>
<tbody><tr>
<td>npm install</td>
<td>初始化项目/安装项目的依赖</td>
<td>-</td>
</tr>
<tr>
<td>npm install -y</td>
<td>初始化项目，创建package.json文件（执行默认选项）</td>
<td>-</td>
</tr>
<tr>
<td>npm install [包名@版本号] [--global]</td>
<td>安装指定名称的依赖（可指定以来的版本），首次安装会自动创建node_modules文件夹（所有依赖均安装至此），global关键字指定是否是全局安装</td>
<td>npm i -g [包名@版本号]</td>
</tr>
<tr>
<td>npm run [script]</td>
<td>执行package.json文件中指定的脚本</td>
<td>-</td>
</tr>
<tr>
<td>npm install –save-dev [包名@版本号]</td>
<td>安装依赖并只在开发阶段使用，会在packjson的devDependencies属性下做标识（不加--save会在dependencies属性下做标识）</td>
<td>npm i -D [包名@版本号]</td>
</tr>
<tr>
<td>npm help</td>
<td>查询所有的npm命令</td>
<td>-</td>
</tr>
<tr>
<td>npm uninstall –save [包名@版本号]</td>
<td>卸载依赖，并清除package.json中的文本中dependencies属性下记录的依赖信息</td>
<td>npm un -S [包名@版本号]</td>
</tr>
<tr>
<td>npm uninstall –save-dev [包名@版本号]</td>
<td>卸载node_moudles下的依赖文件，并清除devDependencies属性下记录的依赖信息</td>
<td>npm un -D [包名@版本号]</td>
</tr>
<tr>
<td>npm update [-g] [包名@版本号]</td>
<td>升级依赖包（可升级全局安装的依赖）</td>
<td>-</td>
</tr>
<tr>
<td>npm i -g cnpm</td>
<td>安装淘宝npm镜像</td>
<td>-</td>
</tr>
<tr>
<td>npm i -S [包名@版本号] –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></td>
<td>从淘宝镜像源安装依赖</td>
<td>-</td>
</tr>
<tr>
<td>npm confit set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></td>
<td>设置npm安装依赖的路径为淘宝镜像源</td>
<td>-</td>
</tr>
<tr>
<td>npm config list</td>
<td>显示npm配置列表</td>
<td>-</td>
</tr>
<tr>
<td>npm config ls -l</td>
<td>显示所有npm配置列表</td>
<td>-</td>
</tr>
</tbody></table>
<ul>
<li>关于npx可见<strong>阮一峰先生的教程<a href="https://www.ruanyifeng.com/blog/2019/02/npx.html">npx使用教程</a></strong></li>
<li>安装多个依赖使用空格隔开依赖包名称即可</li>
<li>使用&amp;链接多个npm命令——不分先后同时执行，使用&amp;&amp;链接多个npm命令——依次执行npm命令</li>
</ul>
<h3 id="依赖包版本号中的特殊字符"><a href="#依赖包版本号中的特殊字符" class="headerlink" title="依赖包版本号中的特殊字符"></a>依赖包版本号中的特殊字符</h3><blockquote>
<p>依赖包的后面可接版本号，通常格式为；包名+特殊字符+版本号[major, minor, patch]</p>
</blockquote>
<p>1、特殊字符^<br>详见**二不挂五先生的文章<a href="https://zhuanlan.zhihu.com/p/66039729">npm install 版本号^的坑</a>**，简单点来说就是^标识的范围是版本号[major, minor, patch]中从左到右第一个非0位开始，小于此非零位+1的版本号</p>
<pre class="line-numbers language-bash"><code class="language-bash">^1.2.3版本包括：<span class="token operator">>=</span> 1.2.3 并且 <span class="token operator">&lt;</span> 2.0.0
^0.2.3版本包括：<span class="token operator">>=</span> 0.2.3 并且 <span class="token operator">&lt;</span> 0.3.0
^0.0.3版本包括：<span class="token operator">>=</span> 0.0.3 并且 <span class="token operator">&lt;</span> 0.0.4
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>2、特殊字符~<br>与^类似，~字符则指定匹配版本号[major, minor, patch]中最新的patch位包依赖（方便修复小bug后依然适用于代码）</p>
<pre class="line-numbers language-bash"><code class="language-bash">~1.2.3版本包括：<span class="token operator">>=</span> 1.2.3 并且 <span class="token operator">&lt;</span> 1.3.0
~0.2.3版本包括：<span class="token operator">>=</span> 0.2.3 并且 <span class="token operator">&lt;</span> 0.3.0
~0.0.3版本包括：<span class="token operator">>=</span> 0.0.3 并且 <span class="token operator">&lt;</span> 0.1.0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>3、特殊字符@<br>在@后面可以添加具体的版本号，以指定依赖包的确切版本，@latest表示安装最新的依赖包</p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>python函数</title>
    <url>/2020/10/11/python-han-shu/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>介绍</p>
<span id="more"></span>

<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><ul>
<li>默认会返回值是None不是null</li>
</ul>
<table>
<thead>
<tr>
<th>api</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>int(String)</td>
<td>将字符串转化成数字</td>
</tr>
<tr>
<td>abs(number)</td>
<td>将数字转换成绝对值</td>
</tr>
<tr>
<td>max(params1,params2….)</td>
<td>多个参数，返回最大值</td>
</tr>
<tr>
<td>instance(any)</td>
<td>返回字符的类型</td>
</tr>
</tbody></table>
<h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><blockquote>
<p>按照类型分为五类：必填参数、默认参数、可变参数、关键字参数、命名关键字参数，他们的<strong>组合顺序也是如此</strong></p>
</blockquote>
<ul>
<li><p>默认参数<br>  1、不可设置为可变变量（只能string/数字/None等），参数重加在不会重新赋值，会重复引用之前初始化定义的值（与es6区别）</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#错误的写法</span>
<span class="token keyword">def</span> <span class="token function">variable_paramter_func</span><span class="token punctuation">(</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#正确的写法</span>
<span class="token keyword">def</span> <span class="token function">correct_variable_paramter_func</span><span class="token punctuation">(</span>l<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> l<span class="token punctuation">:</span>
        l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>

variable_paramter_func<span class="token punctuation">(</span><span class="token punctuation">)</span>
variable_paramter_func<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#打印结果['end'] ['end''end']</span>
correct_variable_paramter_func<span class="token punctuation">(</span><span class="token punctuation">)</span>
correct_variable_paramter_func<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#打印结果['end'] ['end']</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  2、可为普通位置参数和命名关键字参数赋值，赋值后即可不传（使用默认值）</p>
</li>
<li><p>可变参数&amp;关键字参数的赋值分别使用*()|<em>[]和\</em>*{a:’a’}格式，且赋值会复制新的对象，不改变源数据</p>
</li>
<li><p>命名关键字再参数列表前必须要有<em>分割（可变参数或单独加一个\</em>参数），命名关键字也是函数调用时的必传值</p>
</li>
</ul>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ul>
<li>函数调用使用stack栈实现，调用一次栈增加一层，所以会有递归的栈溢出，使用尾递归优化方法（return时调用函数本身，将结算结果一并传入函数）<strong>pythong没有优化，使用不使用没区别</strong><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#尾递归优化：求100到1之和</span>
<span class="token keyword">def</span> <span class="token function">recursion_factorial</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
      <span class="token keyword">return</span> res
  <span class="token keyword">return</span> recursion_factorial<span class="token punctuation">(</span>num<span class="token number">-1</span><span class="token punctuation">,</span> res<span class="token operator">+</span>num<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>recursion_factorial<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#输出5050</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python函数</tag>
      </tags>
  </entry>
  <entry>
    <title>promise小结</title>
    <url>/2021/04/02/promise-xiao-jie/</url>
    <content><![CDATA[<h2 id="Promise介绍"><a href="#Promise介绍" class="headerlink" title="Promise介绍"></a>Promise介绍</h2><blockquote>
<p>Promise是es6中对异步函数处理的一种新的解决方案（旧的方式：回调函数），可以处理异步操作（excuter），并获得处理的结果（then），有两种状态等待（PENDIGN）和处理完毕（ONRESOLVED/ONREJECTED）</p>
</blockquote>
<h2 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then"></a>Promise.prototype.then</h2><blockquote>
<p>Promise对象的处理完毕的回调函数。在then函数中返回值有三种情况：<br>1、异常或reject值，此时Promise对象的状态是onrejected<br>2、其他任意值（数字，字符串等），此时Promise状态是onresolved<br>3、新的Promise对象，则执行这个新的对象并将执行结果作为原promise的结果返回</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>rej<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// rej('failed')</span>
    <span class="token function">res</span><span class="token punctuation">(</span><span class="token string">'sucess'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// return Promise.resolve(3)</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolve'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>reason<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'rejct'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>reason<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="自定义实现promise及其方法"><a href="#自定义实现promise及其方法" class="headerlink" title="自定义实现promise及其方法"></a>自定义实现promise及其方法</h2><h3 id="实现promise构造函数以及延迟改变状态"><a href="#实现promise构造函数以及延迟改变状态" class="headerlink" title="实现promise构造函数以及延迟改变状态"></a>实现promise构造函数以及延迟改变状态</h3><pre class="line-numbers language-js"><code class="language-js">
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ul>
<li><p>多个返回值判定</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
<span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ===>> onRejected1 1 ,onResolved2 undefined   </span>
<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ===>> onResolved1 1 ,onResolved2 undefined      </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolved1'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>reason<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onRejected1'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolved2'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>reason<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onRejected2'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>catch和then链式交替连接</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token number">3</span>  <span class="token comment" spellcheck="true">// ===>>> onRejected1 3 , onResolved2 undefined , onResolved3 undefined , onResolved4 undefined</span>
  <span class="token comment" spellcheck="true">// reject() ===>>> onRejected1 undefined , onResolved2 undefined , onResolved3 undefined , onResolved4 undefined</span>
  <span class="token comment" spellcheck="true">//resolve()  ===>>> onResolved1 undefined , onResolved2 undefined , onResolved3 undefined , onResolved4 undefined</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolved1'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>reason<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onRejected1'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolved2'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolved3'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>reason<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onRejected0'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolved4'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>reason<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onRejected4'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>1、then的链式调用return/throw 的结果，会作为下一个状态调用函数的结果传入then的回调函数中。<br>2、catch和then的优先级是一样的会按照<strong>串联顺序</strong>依次执行。<br>3、如果then函数中没有第二个参数，则在promise状态由PENDING转为ONREJECTED时会<strong>跳过没有ONREJECTED状态处理函数的then链</strong>寻找有的then或catch回调</p>
</li>
<li><p>嵌套setTimeout</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> p1 <span class="token operator">=</span> _<span class="token operator">=</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>rej<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>rej<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span>_<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
          <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 3 7 4 1 2 5</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>与settimeout同时出现</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>rej<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>
  <span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>_<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>rej<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>
      <span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>_<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>_<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>_<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>rej<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span>
  <span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>_<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//1 7 2 3 8 4 6 5 0 </span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>es6</category>
      </categories>
      <tags>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>python基本数据类型</title>
    <url>/2020/10/10/python-ji-ben-shu-ju-lei-xing/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>决心开始认真系统学习python，基本数据类型开始，记录自己感觉重要的知识点。</p>
<span id="more"></span>
<h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><ul>
<li><p>十六进制ox开头</p>
</li>
<li><p>允许使用_下划线分割多个0的大数据</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#等效写法</span>
100_000_000 <span class="token operator">==</span> <span class="token number">100000000</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>整数运算永远是精确计算（除法也是），浮点数计算会有四舍五入误差</p>
</li>
</ul>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul>
<li><p>定义：使用单引号’’和双引号””包裹起来的数据</p>
</li>
<li><p>字符串和整数不可变，任何操作不会改变源数据，而是创建新的数据</p>
</li>
<li><p>使用’’’multi-line-string’’’包裹，表示多行字符串</p>
</li>
<li><p>默认会对包含\符号的字符转义转义，在字符串前加上r则不会转义</p>
</li>
<li><p><strong>字符串中的格式化处理</strong><br>  1、使用%占位符处理<br>  规则：字符串里面使用上述字符占位，在结尾使用%(replacement1,replacement2…)替换</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>%s</td>
<td>普通字符</td>
</tr>
<tr>
<td>%f</td>
<td>浮点数</td>
</tr>
<tr>
<td>%d</td>
<td>整数</td>
</tr>
<tr>
<td>%x</td>
<td>十六进制数</td>
</tr>
</tbody></table>
<p>  示例：</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s is %d year\'s old,he have $%f'</span> <span class="token operator">%</span><span class="token punctuation">(</span><span class="token string">'jack'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">3456345643.234</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#使用%%转义%</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%%%d'</span><span class="token operator">%</span><span class="token number">25</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>  <strong>在字符串中可加入整数/浮点数在%和特定字符间对数据输出位数处理</strong></p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#整数数字表示占位</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%3d'</span><span class="token operator">%</span><span class="token number">23</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#浮点数对浮点数的位数处理</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%.2f'</span><span class="token operator">%</span><span class="token number">12.23453</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>  2、使用string类型的format函数配合{}</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{} is {} year\'s old,he have ${}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'jack'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">3456345643.234</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  3、在字符串前加上f，然后使用{变量名}，自动替换字符串（类似es6中的反引号字符串）</p>
<pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'jack'</span>
age <span class="token operator">=</span> <span class="token number">23</span>
money <span class="token operator">=</span> <span class="token number">3456345643.234</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{name} is {age} year\'s old,he have ${money}'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="布尔值Boolean"><a href="#布尔值Boolean" class="headerlink" title="布尔值Boolean"></a>布尔值Boolean</h2><ul>
<li>值表示是首字符大写<pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token operator">==</span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token boolean">False</span>
<span class="token number">1</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token boolean">True</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="空置None"><a href="#空置None" class="headerlink" title="空置None"></a>空置None</h2><ul>
<li>与js的null区别开</li>
</ul>
<h2 id="变量-amp-amp-常量"><a href="#变量-amp-amp-常量" class="headerlink" title="变量&amp;&amp;常量"></a>变量&amp;&amp;常量</h2><ul>
<li>变量不必声明，常量的变量名称全部大写（说是常量其实随时可变）</li>
</ul>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul>
<li><p>使用#做标志</p>
</li>
<li><p>通用注释</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#告诉python解释器（cpython用的最多）以utf-8格式读取文件</span>
<span class="token comment" spellcheck="true">#-*- coding:utf-8 -*-</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<p>#告诉Linux和mac是一个可执行的python文件（win不支持）<br>#!user/bin/env python3<br>```</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>基本数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title>python的list和tuple</title>
    <url>/2020/10/11/python-de-list-he-tuple/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>python中的list和tuple对象的基本用法，及常用api</p>
<span id="more"></span>
<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><ul>
<li>下标取/存值</li>
<li>pop([index])删除值（默认最后一位）</li>
<li>append(ele)添加元素至list末尾</li>
<li>insert(index,object)插入元素至指定位置</li>
</ul>
<h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><ul>
<li>定义了就不可修改（类似es6的const关键字定义变量？）</li>
<li>在函数中应用：返回值是省略了小括号的元组，因此可以返回多个值<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">return_multi_params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'jack'</span>
age<span class="token punctuation">,</span>name <span class="token operator">=</span> return_multi_params<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#name = 'jack',age=1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><ul>
<li>if x:简写，判定不为空值|空字符串|<strong>空的list</strong> </li>
<li>elif 是else if简写</li>
<li>input([‘输出string’])函数，接收用户输入信息</li>
<li>int(string)&amp;str(num)字符转整数&amp;整数转字符函数</li>
</ul>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ul>
<li>遍历每一个list，for variable in list:</li>
<li>while 条件:</li>
<li>break/continue</li>
</ul>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><ul>
<li>初始化就是写一个json对</li>
<li>和list对比查找速度快，浪费空间（空间换时间）</li>
<li>pop([index])同list</li>
<li>get(key)==map[key]获取键对应值</li>
<li>key不可变（不能为list，可为string、整数）</li>
<li>储存的元素无序</li>
</ul>
<h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><ul>
<li>储存的元素无序</li>
<li>创建:set([ele]),元组里面放一个list</li>
<li>元素不可变（可变对象难以比较是否相等，无法保证元素唯一性）</li>
<li>remove(key)</li>
<li>add(key)</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>list</tag>
        <tag>tuple</tag>
      </tags>
  </entry>
  <entry>
    <title>reflect反射</title>
    <url>/2021/01/01/reflect-fan-she/</url>
    <content><![CDATA[<h2 id="1、通过字符串获取类及其方法属性"><a href="#1、通过字符串获取类及其方法属性" class="headerlink" title="1、通过字符串获取类及其方法属性"></a>1、通过字符串获取类及其方法属性</h2><blockquote>
<p>通过字符串获得<strong>类</strong>对象的三种方法</p>
</blockquote>
<table>
<thead>
<tr>
<th>api</th>
<th>释义</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>ClassName.class</td>
<td>类的class属性</td>
<td>所属类的类对象</td>
</tr>
<tr>
<td>对象实例.getClass()</td>
<td>对象实例的方法</td>
<td>所属类的对象</td>
</tr>
<tr>
<td>Class.fromName(String className)</td>
<td>Class类的方法，传入类的名称，在方法区中找（没有就加载到方法区）</td>
<td>所属类的对象</td>
</tr>
</tbody></table>
<pre class="line-numbers language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
String<span class="token punctuation">.</span>Class
<span class="token class-name">Class<span class="token punctuation">.</span>fromName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//必须是完整的类名</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>api</th>
<th>释义</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>ClassObj.getSimpleName()</td>
<td>获取类对象的名称（不包含路径）</td>
<td>String的类对象名</td>
</tr>
<tr>
<td>ClassObj.getName()</td>
<td>获取类对象的名称（包含路径）</td>
<td>String的类对象名</td>
</tr>
<tr>
<td>ClassObj.getPackage().getName()</td>
<td>获取类的包路径的名称</td>
<td>String的类对象名</td>
</tr>
</tbody></table>
<pre class="line-numbers language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="2、获取类的成员变量-构造方法-普通方法"><a href="#2、获取类的成员变量-构造方法-普通方法" class="headerlink" title="2、获取类的成员变量/构造方法/普通方法"></a>2、获取类的成员变量/构造方法/普通方法</h2><blockquote>
<p>从上面的类对象获取类成员变量/构造方法/普通方法</p>
</blockquote>
<table>
<thead>
<tr>
<th>api</th>
<th>释义</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>getFields()</td>
<td>获取在本类中声明的所有成员变量（包含父类的）</td>
<td>成员变量</td>
</tr>
<tr>
<td>getDeclaredFields()</td>
<td>获取在本类中声明的所有成员变量（不包含父类的）</td>
<td>成员变量</td>
</tr>
<tr>
<td>getMethods()</td>
<td>获取在本类中声明的所有普通方法（包含继承的方法）</td>
<td>所有普通方法</td>
</tr>
<tr>
<td>getDeclaredMethods()</td>
<td>获取在本类中声明的所有普通方法（不包含继承的方法）</td>
<td>所有普通方法</td>
</tr>
<tr>
<td>getConstructors()</td>
<td>获取在本类中的所有构造方法</td>
<td>所有构造方法</td>
</tr>
<tr>
<td>getDeclaredConstructors()</td>
<td>获取在本类中的所有构造方法（包含继承的构造方法）</td>
<td>所有构造方法</td>
</tr>
</tbody></table>
<h3 id="2、1获取类的成员变量"><a href="#2、1获取类的成员变量" class="headerlink" title="2、1获取类的成员变量"></a>2、1获取类的成员变量</h3><table>
<thead>
<tr>
<th>api</th>
<th>释义</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>classObj.getFields()</td>
<td>获取封装成员变量的Filed数组</td>
<td>Fields类型的数组</td>
</tr>
<tr>
<td>FeilObj.getType()</td>
<td>获取标识当前成员变量的类对象</td>
<td>当前Field对象的类对象</td>
</tr>
<tr>
<td>FeilObj.getName()</td>
<td>获取Field对象的名称</td>
<td>Field对象名称</td>
</tr>
</tbody></table>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getFields</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fl <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String name <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String fn <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Field<span class="token punctuation">[</span><span class="token punctuation">]</span> df <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> df<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String sn <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String fn <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sn <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2、2获取类的构造方法"><a href="#2、2获取类的构造方法" class="headerlink" title="2、2获取类的构造方法"></a>2、2获取类的构造方法</h3><table>
<thead>
<tr>
<th>api</th>
<th>释义</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>classObj.getconstructors()</td>
<td>获取封装成员变量的Constructor类型的数组</td>
<td>Constructor类型的数组</td>
</tr>
<tr>
<td>ConstructorObj.getParameterTypes()</td>
<td>获取构造函数的参数类型列表</td>
<td>类对象的类型的String类型数组</td>
</tr>
</tbody></table>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getConstructors</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> ct <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructor <span class="token operator">:</span> ct<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String sn <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> p <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sn <span class="token operator">+</span> <span class="token string">"("</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> dc <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructor <span class="token operator">:</span> dc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String sn <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> p <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sn <span class="token operator">+</span> <span class="token string">"("</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2、3获取类的普通方法"><a href="#2、3获取类的普通方法" class="headerlink" title="2、3获取类的普通方法"></a>2、3获取类的普通方法</h3><table>
<thead>
<tr>
<th>api</th>
<th>释义</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>classObj.getMethods()</td>
<td>获取封装成员变量的Method类型数组</td>
<td>Method类型的数组</td>
</tr>
<tr>
<td>MethodObj.getName()</td>
<td>获取当前对象的方法名称</td>
<td>方法名称String</td>
</tr>
<tr>
<td>MethodObj.getParameterTypes()</td>
<td>获取普通函数的参数类型列表</td>
<td>类对象的类型的String类型数组</td>
</tr>
</tbody></table>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getMethods</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Method<span class="token punctuation">[</span><span class="token punctuation">]</span> m <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String mn <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> p <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mn <span class="token operator">+</span> <span class="token string">"("</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Method<span class="token punctuation">[</span><span class="token punctuation">]</span> dm <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> dm<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String mn <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> p <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mn <span class="token operator">+</span> <span class="token string">"("</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2、4-创建对象实例"><a href="#2、4-创建对象实例" class="headerlink" title="2、4 创建对象实例"></a>2、4 创建对象实例</h3><blockquote>
<p>通过得到的构造方法或类对象创建对应类的实例</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个完整的类名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    String name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> classObj <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">createInstanceNoParams</span><span class="token punctuation">(</span>classObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">createInstance</span><span class="token punctuation">(</span>classObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//通过类对象封装的newInstance方法创建实例</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createInstanceNoParams</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> classObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        Object its <span class="token operator">=</span> classObj<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>its<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行无参构造失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//使用constructor对象封装的newInstance方法创建实例</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> classObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructor <span class="token operator">=</span> classObj<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Object isc <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行有参构造失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>api</th>
<th>释义</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>classObj.newInstance()</td>
<td>利用类对象对应的类的无参构造函数创建一个类对象</td>
<td>对应类对象</td>
</tr>
<tr>
<td>constuctorObj.newInstance()</td>
<td>利用constructor对象封装的对应的类的指定造函数创建一个类对象</td>
<td>对应类对象</td>
</tr>
</tbody></table>
<h3 id="2、5修改创建对象的成员变量"><a href="#2、5修改创建对象的成员变量" class="headerlink" title="2、5修改创建对象的成员变量"></a>2、5修改创建对象的成员变量</h3><blockquote>
<p>使用Field类对象的set/get方法修改查询类对象成员变量</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java">Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Class<span class="token operator">&lt;</span>Cat<span class="token operator">></span> c <span class="token operator">=</span> Cat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
Field f <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> originAge <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span>
f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cat<span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//实际调用了int类型的自动拆箱IntegerObj.intValue()</span>
<span class="token keyword">int</span> changeAge <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"originAge:"</span> <span class="token operator">+</span> originAge<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"changeAge:"</span> <span class="token operator">+</span> changeAge<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>api</th>
<th>释义</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>fieldObj.get(instance/null)</td>
<td>获取对应实例的指定成员变量值</td>
<td>成员变量值</td>
</tr>
<tr>
<td>fieldObj.set(instance/null,value)</td>
<td>设置对应实例的指定成员变量值</td>
<td>–</td>
</tr>
<tr>
<td>fieldObj.setAccessible(Boolean)</td>
<td>设置对应实例的指定成员私有变量可访问</td>
<td>–</td>
</tr>
</tbody></table>
<h3 id="2、6获取-使用创建对象的方法"><a href="#2、6获取-使用创建对象的方法" class="headerlink" title="2、6获取/使用创建对象的方法"></a>2、6获取/使用创建对象的方法</h3><blockquote>
<p>使用Method对象封装的invoke方法可以获取/启用对象方法</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java">Method ga <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getAge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ga<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Method sa <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"setAge"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sa<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> getAge <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> ga<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span>
sa<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>cat<span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> setAge <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> ga<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getAge:"</span> <span class="token operator">+</span> getAge<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setAge:"</span> <span class="token operator">+</span> setAge<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>api</th>
<th>释义</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>methodObj.invoke(instance/null)</td>
<td>获取指定实例的方法</td>
<td>指定对象的方法</td>
</tr>
<tr>
<td>methodObj.invoke(instance/null,value)</td>
<td>启用对应实例的指定方法</td>
<td>–</td>
</tr>
<tr>
<td>methodObj.setAccessible(Boolean)</td>
<td>设置对应实例的指定成员私有方法可访问</td>
<td>–</td>
</tr>
<tr>
<td><strong>当使用null作为方法的实例时，指定的是类的方法或变量</strong></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="3、简单反射实例"><a href="#3、简单反射实例" class="headerlink" title="3、简单反射实例"></a>3、简单反射实例</h2><h3 id="从配置文件中读取信息，创建类，并调用其方法"><a href="#从配置文件中读取信息，创建类，并调用其方法" class="headerlink" title="从配置文件中读取信息，创建类，并调用其方法"></a>从配置文件中读取信息，创建类，并调用其方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectRunner</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>
                    <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:/code/java/config.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String line<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> <span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                line <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>String str <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                String<span class="token punctuation">[</span><span class="token punctuation">]</span> sl <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>sl<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Object nic <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Method method <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>sl<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>nic<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="简单spring工厂"><a href="#简单spring工厂" class="headerlink" title="简单spring工厂"></a>简单spring工厂</h3><blockquote>
<p>使用dom操作api读取xml文件，封装成bean信息对象，由工厂创建、保存对象信息。<br>步骤：<br>    一、获取dom信息并封装到指定对象，保存对象到map中<br>    1、使用dom操作api读取xml文件，获取document对象<br>    2、获取指定标签的NodeList对象<br>    3、遍历NodeList对象，通过对象.item(index)属性获取标签Node对象<br>    4、通过getNameItem(String)获取标签属性的Node对象<br>    5、通过getNodeValue()获取属性值<br>    6、使用获取到的属性新建定义信息对象，保存至map中<br>    二、通过factory的实例获取bean<br>    1、新建创建对象的getInstance方法，设置constructor方法可访问。<br>    2、新建获取对象方法，判定key和包名（equls比较配置文件和传入值）</p>
</blockquote>
<p><img src="/images/customerSpringFrameProcess.png" alt="自定义springFrame流程"></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultBeansFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> ConcurrentHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeansDefinition<span class="token operator">></span> beansDefinitionMap
    <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeansDefinition<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> ConcurrentHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> beansInstanceMap <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token function">DefaultBeansFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">configXmlHandler</span><span class="token punctuation">(</span><span class="token string">"spring-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span>T <span class="token function">getInstance</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beansDefinitionMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"no such key in beans factory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            BeansDefinition db <span class="token operator">=</span> beansDefinitionMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>db<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"no such class  in beans factory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Object obj <span class="token operator">=</span> beansInstanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            obj <span class="token operator">=</span> <span class="token function">newInstance</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>
            beansInstanceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> Object <span class="token function">newInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructor <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">configXmlHandler</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        InputStream in <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemResourceAsStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            DocumentBuilder docBuilder <span class="token operator">=</span> DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Document doc <span class="token operator">=</span> docBuilder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
            NodeList eles <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"bean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> eles<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Node beanTag <span class="token operator">=</span> eles<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                NamedNodeMap attributes <span class="token operator">=</span> beanTag<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                String id <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getNamedItem</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                String targetClass <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getNamedItem</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                String lazy <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getNamedItem</span><span class="token punctuation">(</span><span class="token string">"lazy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                BeansDefinition db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeansDefinition</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> lazy<span class="token punctuation">)</span><span class="token punctuation">;</span>
                beansDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> db<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Boolean<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>lazy<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> beansInstanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//                    ClassLoader cs = ClassLoader.getSystemClassLoader();</span>
<span class="token comment" spellcheck="true">//                    Class&lt;?> cls = Class.forName(targetClass, false, cs);</span>
                    beansInstanceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token function">newInstance</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        DefaultBeansFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultBeansFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//        Object instance = factory.getInstance("Object", Object.class);</span>
<span class="token comment" spellcheck="true">//        System.out.println(instance);</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>新添加的dom文档操作api</li>
</ul>
<table>
<thead>
<tr>
<th>api</th>
<th>释义</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>DocumentBuilderFactory.newInstance.newDocumentBuilder()</td>
<td>通过DocumentBuilderFactory抽象类的newInstance方法返回一个Builder工厂对象，调用这个工厂对象的newDoucumentBuilder方法返回一个DocumentBuilder对象</td>
<td>DocumentBuilder对象</td>
</tr>
<tr>
<td>DocumentBuilderObj.parse(String InputStream)</td>
<td>通过DocumentBuilder对象的parse方法将输入流转化成Document对象</td>
<td>Document对象</td>
</tr>
<tr>
<td>DocumentObj.getElementByTagName(String elementName)</td>
<td>通过标签名称获取元素Nodelist数组</td>
<td>NodeList数组</td>
</tr>
<tr>
<td>NodeObj.getAttributes()</td>
<td>获取Node对象上的所有属性</td>
<td>NameNodeMap对象</td>
</tr>
<tr>
<td>NameNodeMapObj.getNameItem(String attrName)</td>
<td>获取具体属性对象</td>
<td>Node对象</td>
</tr>
<tr>
<td>NodeObj.getNodeValue()</td>
<td>获取Node对象值</td>
<td>Node对象存储的值</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>reflect</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>scroll滚动</title>
    <url>/2020/09/08/scroll-gun-dong/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>简单总结一下js的ceilheight&amp;offsetheight的关系，以及scroll的使用方法</p>
<span id="more"></span>

<h2 id="clientHeight-amp-offsetHeight-amp-scrollHeight"><a href="#clientHeight-amp-offsetHeight-amp-scrollHeight" class="headerlink" title="clientHeight&amp;offsetHeight&amp;scrollHeight"></a>clientHeight&amp;offsetHeight&amp;scrollHeight</h2><p>1、常见的scrollHeight指的就是文本要放置的最小高度，包含被滚动条遮挡的未显示的部分<br><img src="/images/scrollHeight.webp" alt="scollHeight"></p>
<p>2、clientHeight指的是当前可视部分（可以直接看到的文本内容窗口大小）<br><img src="/images/clientHeight.webp" alt="clientHeight&amp;&amp;offsetHeight"></p>
<p>3、offsetHeight则是包含了可见部分的滚动条宽度和可视文本部分</p>
<h2 id="scrollTop-amp-amp-offsetTop"><a href="#scrollTop-amp-amp-offsetTop" class="headerlink" title="scrollTop&amp;&amp;offsetTop"></a>scrollTop&amp;&amp;offsetTop</h2><p>1、scrollTop指的是所有文本高度到可是部分的顶点的高度</p>
<p>2、offsetHeight指的是父级设置了position属性的节点到本节点顶部的距离，若没有设置position则默认body到元素顶部的偏移量</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css布局</tag>
        <tag>css-layout</tag>
      </tags>
  </entry>
  <entry>
    <title>servlet踩坑日记</title>
    <url>/2021/01/24/servlet-cai-keng-ri-ji/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote>
<p>Servlet 为创建基于 web 的应用程序提供了基于组件、独立于平台的方法，可以不受 CGI 程序的性能限制。Servlet 有权限访问所有的 Java API，包括访问企业级数据库的 JDBC API。</p>
</blockquote>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> responsetest<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span>

<span class="token keyword">import</span> jdk<span class="token punctuation">.</span>nashorn<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>regexp<span class="token punctuation">.</span>joni<span class="token punctuation">.</span>Config<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseTestDemo</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">ResponseTestDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>
            String username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String<span class="token punctuation">[</span><span class="token punctuation">]</span> password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"xixi.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ServletOutputStream os <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//            response.setContentType("text/html;charset=utf-8");</span>
<span class="token comment" spellcheck="true">//            PrintWriter writer = response.getWriter();</span>
<span class="token comment" spellcheck="true">//            writer.print("3秒后跳转至百度...");</span>
<span class="token comment" spellcheck="true">//            response.z`("refresh", "3;url=http://www.baidu.com");</span>
<span class="token comment" spellcheck="true">//            response.sendRedirect("http://www.baidu.com");</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>request方法</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>setAttribute</td>
<td></td>
</tr>
<tr>
<td>getRequestDispatcher</td>
<td></td>
</tr>
<tr>
<td>setCharacterEncoding</td>
<td></td>
</tr>
<tr>
<td>getParameterValues</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>response方法</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>setContentType</td>
<td></td>
</tr>
<tr>
<td>setCharacterEncoding</td>
<td></td>
</tr>
<tr>
<td>setHeader</td>
<td></td>
</tr>
<tr>
<td>sendRedirect</td>
<td></td>
</tr>
<tr>
<td>getWriter</td>
<td></td>
</tr>
<tr>
<td>getOutputStream</td>
<td></td>
</tr>
</tbody></table>
<h2 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h2><h3 id="request请求乱码"><a href="#request请求乱码" class="headerlink" title="request请求乱码"></a>request请求乱码</h3><blockquote>
<p>在使用tomcat服务器中的servlet时,在输入中文时,表单的请求数据在servlet中接收的编码格式可能不正确.而这可能和表单提交的属性enctype以及提交的方法method相关.</p>
</blockquote>
<h4 id="表单的enctype属性"><a href="#表单的enctype属性" class="headerlink" title="表单的enctype属性"></a>表单的enctype属性</h4><ul>
<li>在表单提交中,表单的enctype属性默认为application/x-www-form-urlencoded,会将表单数据中非字母数字的字符转换成转义字符，如”%HH”，然后组合成这种形式key1=value1&amp;key2=value2；所以后端在取数据后，要进行解码。</li>
<li>enctype取值为text/plain时,按照键值对排列表单数据key1=value1\r\nkey2=value2，不进行转义。</li>
<li>enctype也可取值为multipart/form-data,该类型用于高效传输文件、非ASCII数据和二进制数据，将表单数据逐项地分成不同的部分，用指定的分割符分割每一部分。每一部分都拥有Content-Disposition头部，指定了该表单项的键名和一些其他信息；并且每一部分都有可选的Content-Type，不特殊指定就为text/plain。</li>
</ul>
<h4 id="get请求乱码解决"><a href="#get请求乱码解决" class="headerlink" title="get请求乱码解决"></a>get请求乱码解决</h4><p>1.在tomcat的配置文件中(config/service.xml)中添加connector属性URIEncoding=”utf-8”.<br>2.在接收request对象时使用设置解码格式,即可以先使用错误码表 ISO-8859-1 将用户名重新编码，然后使用码表 UTF-8 进行解码。再次对 RequestParamsServlet 进行修改.</p>
<pre class="line-numbers language-java"><code class="language-java">name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"iso8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="post请求乱码"><a href="#post请求乱码" class="headerlink" title="post请求乱码"></a>post请求乱码</h4><pre class="line-numbers language-java"><code class="language-java">reqest<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="response乱码"><a href="#response乱码" class="headerlink" title="response乱码"></a>response乱码</h3><blockquote>
<p>在控制打印的数据”中国”显示没有问题,但是返回到页面上的数据出现乱码,显示??,产生乱码的原因是 response 对象的字符输出流在编码时采用的字符码表是 ISO-8859-1，该码表不兼容中文，会将“中国”编码为 63 63（在 ISO-8859-1 的码表中查不到的字符就会显示 63）。当浏览器对接收到的数据进行解码时，会采用默认的码表 GB2312，将 63 解码为?，因此，浏览器将“中国”两个字符显示为“??”.</p>
</blockquote>
<p><img src="/images/servletEncodeProcess.jpg" alt="servlet的response编码流程"></p>
<p>解决方法:首先告知servlet使用utf-8将数据进行编码发送,然后通知浏览器使用utf-8编码格式接收</p>
<pre class="line-numbers language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//或使用下面代码,两种方式一样效果</span>
response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="servlet转发"><a href="#servlet转发" class="headerlink" title="servlet转发"></a>servlet转发</h2><blockquote>
<p>转发是服务器中的操作,浏览器是不知道的.<br>转发的资源必须是同一个应用下的资源,资源由pageContent/httpsession/servletContent携带.<br>转发的资源是一致的(request携带的数据相同)</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>
    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//转发到jsp</span>
    request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"xixi.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>此处的jsp路径在WebContent路径下,是相对路径,若以/开头则是绝对路径.</li>
<li>虽然在servlet程序的位置并不在WebContent根目录,但是在tomcat运行时的路径是根目录(包名/应用名称),因此可以直接写文件名.</li>
</ul>
<h2 id="servlet重定向和定时刷新"><a href="#servlet重定向和定时刷新" class="headerlink" title="servlet重定向和定时刷新"></a>servlet重定向和定时刷新</h2><blockquote>
<p>使用servlet重定向就是告知浏览器去重新请求给定路径.<br>重定向的资源不是共用的,因此无法携带首次请求的信息给新请求对象.</p>
</blockquote>
<ul>
<li>重定向的资源来源没有限制,既可以为本服务器上的其他应用(<strong>相对路径</strong>)也可以是别的服务器上的应用,例如重定向到百度.<pre class="line-numbers language-java"><code class="language-java">PrintWriter writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>定时刷新<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//设置编码格式防止response乱码</span>
response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
PrintWriter writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
writer<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"3秒后跳转至百度..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"refresh"</span><span class="token punctuation">,</span> <span class="token string">"3;url=http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="jsp技术"><a href="#jsp技术" class="headerlink" title="jsp技术"></a>jsp技术</h2><blockquote>
<p>应用场景:在长篇的html中嵌入合适的java代码逻辑</p>
</blockquote>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote>
<p>jsp首次执行会将其编译成servlet程序:==&gt;&gt;.java结尾的servlet程序==&gt;&gt;.class结尾的可执行字节码文件==&gt;&gt;输出完成编译转换的html文件给浏览器解析.</p>
</blockquote>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul>
<li><p>&lt;% Java可执行代码逻辑块; %&gt;可嵌套html,解析时主动联系上下文解析.</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>p<span class="token operator">></span>loop jsp <span class="token operator">&lt;</span><span class="token operator">%=</span> i <span class="token operator">%</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&lt;<span class="token operator">/</span>p<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span><span class="token operator">%</span><span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>&lt;%= java常量/变量值(**没有分号**) %&gt;</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>P<span class="token operator">></span>姓名<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">%=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>P<span class="token operator">></span>
<span class="token operator">&lt;</span>P<span class="token operator">></span>密码<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">%=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>P<span class="token operator">></span>
<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
<span class="token operator">&lt;</span>P<span class="token operator">></span>查询姓名<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">%=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>P<span class="token operator">></span>
<span class="token operator">&lt;</span>P<span class="token operator">></span>查询密码<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">%=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>P<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>标签指令</p>
<blockquote>
<p>常见指令例如@page/jstl等放入&lt;%指令 %&gt;就可以被解析执行了,@page声明的模块中可以声明代码块的语言(默认java)/导包/设定编码格式</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token annotation punctuation">@page</span> <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.util.ArrayList"</span><span class="token operator">%</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token annotation punctuation">@page</span> <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.util.HashMap"</span><span class="token operator">%</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token annotation punctuation">@page</span> <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.util.Date"</span><span class="token operator">%</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span>@ page language<span class="token operator">=</span><span class="token string">"java"</span> contentType<span class="token operator">=</span><span class="token string">"text/html; charset=UTF-8"</span>
  pageEncoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">%</span><span class="token operator">></span>
<span class="token comment" spellcheck="true">//注释</span>
<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span> <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token annotation punctuation">@page</span> <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.util.ArrayList"</span><span class="token operator">%</span><span class="token operator">></span> <span class="token operator">--</span><span class="token operator">%</span><span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p><strong>在@page指令中一定要设定pagaEncoding=”UTF-8”,否则文件保存为默认编码格式,有可能出现乱码</strong></p>
<ul>
<li><p>标签技术EL,主要用来获取存储域中的数据(<strong>map获取数据类似于js</strong>)</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span> 
  HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"gender"</span><span class="token punctuation">,</span><span class="token string">"man"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  String<span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"杨超"</span><span class="token punctuation">,</span><span class="token string">"张建明"</span><span class="token punctuation">,</span><span class="token string">"朱远超"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
  request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token operator">></span>
$<span class="token punctuation">{</span>map<span class="token punctuation">.</span>name <span class="token punctuation">}</span>
$<span class="token punctuation">{</span>map<span class="token punctuation">.</span>gender <span class="token punctuation">}</span>
$<span class="token punctuation">{</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="el标签"><a href="#el标签" class="headerlink" title="el标签"></a>el标签</h3><blockquote>
<p>形式：${取值的名称}，若未指定则按照page&gt;request&gt;session&gt;application的顺序依次查找最进的属性值。<br>作用：用来进行读取域中数据。</p>
</blockquote>
</li>
<li><p>常见el作用域与jstl作用域比较。</p>
<table>
<thead>
<tr>
<th>jstl标签中的名称（scope属性值）</th>
<th>el取值的对象名称</th>
<th>jstl应用实例</th>
<th>e应用l实例</th>
</tr>
</thead>
<tbody><tr>
<td>page</td>
<td>pageScope</td>
<td>&lt;c:set var=”name” value=”jackson” scope=”page” /&gt;</td>
<td>${pageScope.xxx}</td>
</tr>
<tr>
<td>request</td>
<td>requestScope</td>
<td>&lt;c:set var=”name” value=”summer” scope=”request” /&gt;</td>
<td>${requestScope.xxx}</td>
</tr>
<tr>
<td>session</td>
<td>sessionScope</td>
<td>&lt;c:set var=”name” value=”peter” scope=”session” /&gt;</td>
<td>${sessionScope.xxx}</td>
</tr>
<tr>
<td>application</td>
<td>applicationScope</td>
<td>&lt;c:set var=”name” value=”lucy” scope=”application” /&gt;</td>
<td>${applicationScope.xxx}</td>
</tr>
</tbody></table>
</li>
<li><p>标签内计算，自动转换数据类型</p>
<pre class="line-numbers language-java"><code class="language-java">$<span class="token punctuation">{</span>param<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//等价于</span>
String str_count <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> count <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str_count<span class="token punctuation">)</span><span class="token punctuation">;</span>
count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//加减乘除以及求余</span>
$<span class="token punctuation">{</span><span class="token number">40</span><span class="token operator">+</span><span class="token number">61</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span> div <span class="token number">2</span> mod <span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">>></span><span class="token number">100.0</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>隐含对象取值</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//取url上的参数值</span>
$<span class="token punctuation">{</span>param<span class="token punctuation">.</span>xxx<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//取url上同名的多个参数值</span>
$<span class="token punctuation">{</span>paramValues<span class="token punctuation">.</span>xxx<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//取cookie里面的值</span>
<span class="token operator">&lt;</span><span class="token operator">%</span> 
  Cookie c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token operator">></span>
$<span class="token punctuation">{</span>cookie<span class="token punctuation">.</span>name<span class="token punctuation">.</span>value<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p><strong>cookie是el固定的名称</strong></p>
<ul>
<li>关系运算<table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
<th>范例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>== 或 eq</td>
<td>等于</td>
<td>${5==5}或${5eq5}</td>
<td>true</td>
</tr>
<tr>
<td>!= 或 ne</td>
<td>不等于</td>
<td>${5!=5}或${5ne5}</td>
<td>false</td>
</tr>
<tr>
<td>&lt; 或 lt</td>
<td>小于</td>
<td>${3或${3lt5}</td>
<td>true</td>
</tr>
<tr>
<td>&gt; 或 gt</td>
<td>大于</td>
<td>${3&gt;5}或{3gt5}</td>
<td>false</td>
</tr>
<tr>
<td>&lt;= 或 le</td>
<td>小于等于</td>
<td>${3&lt;=5}或${3le5}</td>
<td>true</td>
</tr>
<tr>
<td>&gt;= 或 ge</td>
<td>大于等于</td>
<td>5}或${3ge5}</td>
<td>false</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="jstl技术"><a href="#jstl技术" class="headerlink" title="jstl技术"></a>jstl技术</h3><blockquote>
<p>作用对域中数据遍历、赋值、修改、添加、判定显示等操作。<br>使用方法：1、引入standard.jar和jstl.jar两个jar包至WEB-INF/lib目录下。2、在要使用的jsp文件上声明，并规定标签使用前缀（一般使用c开头，表示core核心的意思。</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ taglib prefix<span class="token operator">=</span><span class="token string">"c"</span> uri<span class="token operator">=</span><span class="token string">"http://java.sun.com/jsp/jstl/core"</span> <span class="token operator">%</span><span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><p>set添加和修改属性，添加/重新赋值普通的属性：var定义修改的名称，scope定义域范围，value赋值</p>
</li>
<li><p>set修改map等集合属性，target目标值，property目标值的属性名称，value想要赋的值</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span> 
  HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"阿凡达"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"nickname"</span><span class="token punctuation">,</span><span class="token string">"小达达"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token operator">></span>
<span class="token operator">&lt;</span>h2<span class="token operator">></span>set设置、修改域中的属性<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>
<span class="token operator">&lt;</span>h3<span class="token operator">></span>添加域中属性<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>
<span class="token operator">&lt;</span>c<span class="token operator">:</span>set var<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"jackson"</span> scope<span class="token operator">=</span><span class="token string">"page"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span>c<span class="token operator">:</span>set var<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"peter"</span> scope<span class="token operator">=</span><span class="token string">"session"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span>c<span class="token operator">:</span>set var<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"lucy"</span> scope<span class="token operator">=</span><span class="token string">"application"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span>c<span class="token operator">:</span>set var<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"summer"</span> scope<span class="token operator">=</span><span class="token string">"request"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token comment" spellcheck="true">//修改request域中的name属性</span>
<span class="token operator">&lt;</span>c<span class="token operator">:</span>set var<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"peter"</span> scope<span class="token operator">=</span><span class="token string">"request"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token function">pageContent</span><span class="token punctuation">(</span><span class="token keyword">default</span> set into <span class="token keyword">this</span> scope<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>$<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
<span class="token operator">&lt;</span>p<span class="token operator">></span>pageContent<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>$<span class="token punctuation">{</span>pageScope<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
<span class="token operator">&lt;</span>p<span class="token operator">></span>request<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>$<span class="token punctuation">{</span>requestScope<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
<span class="token operator">&lt;</span>p<span class="token operator">></span>session<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>$<span class="token punctuation">{</span>sessionScope<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
<span class="token operator">&lt;</span>p<span class="token operator">></span>application<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>$<span class="token punctuation">{</span>applicationScope<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
<span class="token operator">&lt;</span>h3<span class="token operator">></span>修改map属性值<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>
<span class="token operator">&lt;</span>p<span class="token operator">></span>origin data<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
$<span class="token punctuation">{</span>map<span class="token punctuation">.</span>name<span class="token punctuation">}</span>
$<span class="token punctuation">{</span>map<span class="token punctuation">.</span>nickname<span class="token punctuation">}</span>
<span class="token operator">&lt;</span>p<span class="token operator">></span>update data<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
<span class="token comment" spellcheck="true">//修改map中的属性</span>
<span class="token operator">&lt;</span>c<span class="token operator">:</span>set target<span class="token operator">=</span><span class="token string">"${map}"</span> property<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"阿凡提"</span>  <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span>c<span class="token operator">:</span>set target<span class="token operator">=</span><span class="token string">"${map}"</span> property<span class="token operator">=</span><span class="token string">"nickname"</span> value<span class="token operator">=</span><span class="token string">"小提提"</span>  <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span>c<span class="token operator">:</span>set target<span class="token operator">=</span><span class="token string">"${map }"</span> property<span class="token operator">=</span><span class="token string">"nick"</span> value<span class="token operator">=</span><span class="token string">"喜喜"</span><span class="token operator">/</span><span class="token operator">></span>
$<span class="token punctuation">{</span>map<span class="token punctuation">.</span>name<span class="token punctuation">}</span>
$<span class="token punctuation">{</span>map<span class="token punctuation">.</span>nickname<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>if条件判断,<strong>注意没有else标签，只能结合el做条件取反代替else</strong></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token keyword">if</span>判定是否显示<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>
  <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"${213+843>1000}"</span><span class="token operator">></span>yes<span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"${!(213+843>1000)}"</span><span class="token operator">></span>no<span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>forEach遍历<br>items==&gt;&gt;要遍历的集合对象， var==&gt;&gt;遍历的每一个对象， beging==&gt;&gt;遍历开始的数值， varStatus==&gt;&gt;遍历时的状态对象， step==&gt;&gt;遍历的步长（仅和begin结合有效）， end==&gt;&gt;结束的数值（和begin结合使用）</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>h2<span class="token operator">></span>forEach循环数组、集合等<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>
<span class="token operator">&lt;</span>c<span class="token operator">:</span>forEach items<span class="token operator">=</span><span class="token string">"${map}"</span> var<span class="token operator">=</span><span class="token string">"item"</span><span class="token operator">></span>
  $<span class="token punctuation">{</span>item<span class="token punctuation">.</span>key <span class="token punctuation">}</span>
  $<span class="token punctuation">{</span>item<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
  $<span class="token punctuation">{</span>item<span class="token punctuation">.</span>value <span class="token punctuation">}</span>
  $<span class="token punctuation">{</span>item<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span>forEach<span class="token operator">></span>
<span class="token comment" spellcheck="true">//遍历0~100，最后一位不要逗号。</span>
<span class="token operator">&lt;</span>p<span class="token operator">></span>
<span class="token operator">&lt;</span>c<span class="token operator">:</span>forEach begin<span class="token operator">=</span><span class="token string">"0"</span> end<span class="token operator">=</span><span class="token string">"100"</span> var<span class="token operator">=</span><span class="token string">"item"</span> varStatus<span class="token operator">=</span><span class="token string">"status"</span> step<span class="token operator">=</span><span class="token string">"2"</span> <span class="token operator">></span>
  <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"${item%2==0}"</span><span class="token operator">></span>$<span class="token punctuation">{</span>item <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"${!status.last }"</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span>forEach<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>varStatus在遍历体里面有四个属性：</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>释义</th>
<th>类型</th>
</tr>
</thead>
<tbody><tr>
<td>index</td>
<td>元素下标，起始数值由<strong>循环开始值</strong>决定</td>
<td>数值</td>
</tr>
<tr>
<td>count</td>
<td>元素计数，从1开始</td>
<td>数值</td>
</tr>
<tr>
<td>first</td>
<td>是否第一个元素</td>
<td>Boolean</td>
</tr>
<tr>
<td>last</td>
<td>是否最后一个元素</td>
<td>Boolean</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>servlet</tag>
        <tag>jsp</tag>
        <tag>jsp标签技术</tag>
      </tags>
  </entry>
  <entry>
    <title>socket套接字</title>
    <url>/2020/12/27/socket-tao-jie-zi/</url>
    <content><![CDATA[<h2 id="网络套接字对象"><a href="#网络套接字对象" class="headerlink" title="网络套接字对象"></a>网络套接字对象</h2><blockquote>
<p>套接字端口范围为0~65535，常见服务端口范围为0-1024，50000后为系统保留的端口用于随机分配</p>
</blockquote>
<h2 id="ServerSocket-Socket创建一个服务连接模型"><a href="#ServerSocket-Socket创建一个服务连接模型" class="headerlink" title="ServerSocket/Socket创建一个服务连接模型"></a>ServerSocket/Socket创建一个服务连接模型</h2><blockquote>
<p>服务端使用ServerSocket(int port)创建服务端套接字和并使用他的实例对象的accept方法等待客户端创建一个连接。<br>客户端直接使用Socket(String ip,int port)实例对象创建一个连接。<br>客户端服务端均通过getInput/OutputStream()方法获得信息传输流。</p>
</blockquote>
<ul>
<li>建立一个服务端-客户端模型服务<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个服务端连接</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
  ServerSocket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Socket server <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务启动成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  InputStream in <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  OutputStream out <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//创建一个客户连接</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
  Socket skt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  InputStream in <span class="token operator">=</span> skt<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  OutputStream out <span class="token operator">=</span> skt<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  skt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>使用ServerSocket方法创建的socket在使用accept方法后会一直等待客户端的连接，如果没有连接就会一直等待。</li>
<li>客户端连接上了服务端后会等待消息（in.read()）然后执行。</li>
<li>使用in.read()/out.write(byte[] b)时注意写入的是byte数组，读取的是int型，需要使用getBytes([cherst])和char类型强转保证字符编码一致。</li>
</ul>
<h2 id="多线程客户-服务端"><a href="#多线程客户-服务端" class="headerlink" title="多线程客户-服务端"></a>多线程客户-服务端</h2><blockquote>
<p>实际使用中多使用一个服务端与多个客户端建立连接的情况，使用多线程解决。</p>
</blockquote>
<ul>
<li><p>服务端模型<br><img src="/images/creatMultiThreadServerSocket.png" alt="创建一个多线程服务端服务"></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">runServerSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"启动服务器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//创建socket连接，等待客户端连接并创建服务实例具体执行服务</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">runServerSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
              ServerSocket sskt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  Socket server <span class="token operator">=</span> sskt<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一个客户端上线"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  ServerThread st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerThread</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  st<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端端口异常未正常启动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//具体的执行服务的线程类</span>
<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ServerThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> Socket s<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token function">ServerThread</span><span class="token punctuation">(</span>Socket s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
          InputStream in <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          OutputStream out <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          PrintWriter writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          String line<span class="token punctuation">;</span>
          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              writer<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
              writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一个客户端断开了连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>客户端服务</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
      Socket skt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      InputStream in <span class="token operator">=</span> skt<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      OutputStream out <span class="token operator">=</span> skt<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      PrintWriter writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          String inp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入："</span> <span class="token operator">+</span> inp<span class="token punctuation">)</span><span class="token punctuation">;</span>
          writer<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inp<span class="token punctuation">)</span><span class="token punctuation">;</span>
          writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          String res <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"回声："</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><strong>注意</strong>：<br>1、在使用PrintWriter实例对象写入一行字符串以后一定要使用writer.flush()将写入内容发送出去。否则程序客户端会一直等待，直到你调用flush推送了消息，而在这期间服务端不会收到消息，程序不会报错。<br>2、在使用InputStreamWriter/Reader(in/out,[charset])不要忘了指定编码规则，否则乱码。</p>
</blockquote>
</li>
</ul>
<h2 id="socket实现建议聊天室"><a href="#socket实现建议聊天室" class="headerlink" title="socket实现建议聊天室"></a>socket实现建议聊天室</h2><blockquote>
<p>使用ServerSocket和Socket搭建一个简易的聊天室。</p>
</blockquote>
<ul>
<li><p>使用while循环accept创建多个工作线程<br><img src="/images/createChatServer.png" alt="创建Chat的服务端"></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketChatServer</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> ArrayList<span class="token operator">&lt;</span>workThread<span class="token operator">></span> sktList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">launchServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">launchServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
          ServerSocket sskt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务在9000端口启动。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              Socket server <span class="token operator">=</span> sskt<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一个客户端上线"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">new</span> <span class="token class-name">workThread</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"端口被占用或其他异常，服务启动失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">workThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
      <span class="token keyword">private</span> Socket s<span class="token punctuation">;</span>
      <span class="token keyword">private</span> BufferedReader reader<span class="token punctuation">;</span>
      <span class="token keyword">private</span> PrintWriter writer<span class="token punctuation">;</span>
      <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

      <span class="token keyword">public</span> <span class="token function">workThread</span><span class="token punctuation">(</span>Socket s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token annotation punctuation">@Override</span>
      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
              reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              name <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token function">send</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"欢迎加入群聊！~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              sktList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token function">sendAll</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"已经加入了群聊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              String line<span class="token punctuation">;</span>
              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token function">sendAll</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"说："</span> <span class="token operator">+</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          sktList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">sendAll</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"离开了群聊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"离开了群聊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sendAll</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span>workThread wt <span class="token operator">:</span> sktList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              wt<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>writer<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>利用三个线程、消息队列和synchronized实现消息存储，实时显示<br><img src="/images/createChatClient.png" alt="创建Chat客户端"></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> LinkedList<span class="token operator">&lt;</span>String<span class="token operator">></span> msgList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> Boolean inputFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> PrintWriter writer<span class="token punctuation">;</span>
  <span class="token keyword">private</span> BufferedReader reader<span class="token punctuation">;</span>
  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
  <span class="token keyword">private</span> String line<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token function">Client</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">launchClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
          Socket skt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>skt<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>skt<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          writer<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
          writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">// 接收消息</span>
          <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token function">reciveMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">// 打印消息</span>
          <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token function">printMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span><span class="token punctuation">;</span>

          <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">// 输入消息</span>
          <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token function">inputMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reciveMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token keyword">while</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> <span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>msgList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  msgList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  msgList<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">inputMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"按回车输入内容："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          String inp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          inputFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
          writer<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inp<span class="token punctuation">)</span><span class="token punctuation">;</span>
          writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>msgList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              msgList<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          inputFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">printMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>msgList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> msgList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> inputFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token keyword">try</span> <span class="token punctuation">{</span>
                      msgList<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span>
              <span class="token punctuation">}</span>
              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msgList<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>套接字</tag>
        <tag>socket</tag>
      </tags>
  </entry>
  <entry>
    <title>springMVC小结</title>
    <url>/2021/02/21/springmvc-xiao-jie/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>springMVC是spring的一个基于servlet的一个web框架模块，用于开发web应用，主要由Dispatcher Servlet、ModelAndView、ViewRouter三部分组成，解决了多个接口对应多个servlet的问题，一个servlet对应所有接口访问。</p>
</blockquote>
<h2 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.noah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springMVCDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 添加json依赖的依赖jackson，便于返回json数据 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.codehaus.jackson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core-asl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.codehaus.jackson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-mapper-asl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 单元测试 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- springMVC的jar包 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- servlet 和 jsp的jar包 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><blockquote>
<p>在webapps下新建配置文件和文件夹：/WEB-INF/web.xml，并添加以下配置</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
    <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span>
    <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 导航栏标题 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>springMVCDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 首页 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>default.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>default.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>default.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 配置DispatcherServlet和其他mvc相关配置位置 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc-config.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 配置CharacterEncodingFilter的编码格式，防止post提交的乱码 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>mvc配置,在source文件夹下创建即可<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc
                      http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                      http://www.springframework.org/schema/beans
                      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                      http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- 1.配置前端控制器放行静态资源(html/css/js等，否则静态资源将无法访问) --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- 2.配置注解驱动，用于识别注解（比如@Controller） --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- 3.配置需要扫描的包：spring自动去扫描 base-package 下的类，
      如果扫描到的类上有 @Controller、@Service、@Component等注解，
      将会自动将类注册为bean 
   --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- 4.配置内部资源视图解析器
      prefix:配置路径前缀
      suffix:配置文件后缀
   --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><blockquote>
<p>通过@controller注解表名类在controller层，@RequestMapping(“/路径名称”)对应路径访问的处理方法。</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> controller<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>propertyeditors<span class="token punctuation">.</span>CustomDateEditor<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>Model<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>ModelMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>ServletRequestDataBinder<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>InitBinder<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">;</span>
<span class="token keyword">import</span> pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">detalHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"spring-mvc request successfully!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ModelMap msp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/entry"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">detalRequestEntry</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user:"</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"forward:/hello"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/post"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">detalPostEncoding</span><span class="token punctuation">(</span>String user<span class="token punctuation">,</span>String like<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user:"</span><span class="token operator">+</span>user<span class="token operator">+</span><span class="token string">"like:"</span><span class="token operator">+</span>like<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"redirect:/hello"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/date"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">detalDateFormat</span><span class="token punctuation">(</span>Date date<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Date:"</span><span class="token operator">+</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/request"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">detalRequest</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span> <span class="token string">"通过request添加属性值成功！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/model"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">detalModel</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"model"</span><span class="token punctuation">,</span> <span class="token string">"通过mvc的model传递属性值至jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@InitBinder</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">InitBinder</span><span class="token punctuation">(</span>ServletRequestDataBinder binder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        binder<span class="token punctuation">.</span><span class="token function">registerCustomEditor</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> 
                <span class="token keyword">new</span> <span class="token class-name">CustomDateEditor</span><span class="token punctuation">(</span>
                        <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/json"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">detalResponseBodyJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        ArrayList<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//        User u = new User(1002, "张三");</span>
        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="转发到jsp的四种方式"><a href="#转发到jsp的四种方式" class="headerlink" title="转发到jsp的四种方式"></a>转发到jsp的四种方式</h2><h3 id="默认方式"><a href="#默认方式" class="headerlink" title="默认方式"></a>默认方式</h3><blockquote>
<p>return String默认就是查找对应String名称的jsp来进行数据的处理</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">detalHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"spring-mvc request successfully!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ModelMap msp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="redirect-路径名"><a href="#redirect-路径名" class="headerlink" title="redirect:/+路径名"></a>redirect:/+路径名</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/post"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">detalPostEncoding</span><span class="token punctuation">(</span>String user<span class="token punctuation">,</span>String like<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user:"</span><span class="token operator">+</span>user<span class="token operator">+</span><span class="token string">"like:"</span><span class="token operator">+</span>like<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"redirect:/hello"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>post乱码问题可通过配置web.xml的CharacterEncodingFilter类解决</p>
<h3 id="forward-路径名"><a href="#forward-路径名" class="headerlink" title="forward:/+路径名"></a>forward:/+路径名</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/entry"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">detalRequestEntry</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user:"</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"forward:/hello"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="转发到对应方法"><a href="#转发到对应方法" class="headerlink" title="转发到对应方法"></a>转发到对应方法</h3><blockquote>
<p>可以return对应方法。</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/doorList"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">doorList</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    List<span class="token operator">&lt;</span>Door<span class="token operator">></span> list <span class="token operator">=</span> doorService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Door door <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>door<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">"door_list"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/doorAdd"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">doorAdd</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>String addr<span class="token punctuation">,</span>String tel<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Door doorItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Door</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> name<span class="token punctuation">,</span> tel<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Integer rows <span class="token operator">=</span> doorService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>doorItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//转发到对应方法</span>
    <span class="token keyword">return</span> <span class="token function">doorList</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="注解方式使用mvc"><a href="#注解方式使用mvc" class="headerlink" title="注解方式使用mvc"></a>注解方式使用mvc</h2><blockquote>
<p>springmvc的加载方式有两种，一种是通过配置文件xml，另一种注解方式，利用了mvc的文件加载在配置了没有web.xml时，默认读取spring-web依赖文件下的META-INF/services/javax.servlet.ServletContainerInitializer类的特性。</p>
</blockquote>
<p><img src="/images/springMVC/ServletContainerInitializer.png" alt="ServletContainerInitializer文件位置"><br><img src="/images/springMVC/twoLoadType.png" alt="springmvc的两种加载配置方式"></p>
<ul>
<li>xml配置文件：WEB-INF下web.xml配置DispatcherServlet和对应的映射路径，读取配置文件springmvc-config中的配置，例如：controller包管理、静态资源访问控制、视图解析器ViewResolver、mvc自动注册注解配置等。</li>
</ul>
<p><img src="/images/springMVC/springmvcRunDetail.png" alt="mvc的解析大体过程"></p>
<ul>
<li>注解加载的方式，利用了mvc的文件加载在配置了没有web.xml时，默认读取spring-web依赖文件下的META-INF/services/javax.servlet.ServletContainerInitializer类，此类会自动加载Spring框架的SpringServletContainerInitializer类，而这个initializer又会自动加载WebApplicationInitializer以及它的实现类的特性，我们只需要继承WebApplicationInitializer类即可完成替代web.xml文件。</li>
</ul>
<p><img src="/images/springMVC/springmvcAnnotationTypeRun.png" alt="注解方式使用mvc大致过程"></p>
<p>1、首先在pom.xml文件中设置忽略web.xml文件的检查（可以为空）,即设置buil标签（与dependencies平级）。</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-war-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filteringDeploymentDescriptors</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filteringDeploymentDescriptors</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2、添加容器类，以此类来替代sprigmvc-config.xml文件的作用。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"controller"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableWebMvc</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">springmvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureViewResolvers</span><span class="token punctuation">(</span>ViewResolverRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        registry<span class="token punctuation">.</span><span class="token function">jsp</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/pages/"</span><span class="token punctuation">,</span> <span class="token string">".html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3、添加自定义WebApplicationInitializer实现类（因为AbstractAnnotationConfigDispathcherServletInitializer类实现了大部分的WebAplicationInitializer类的方法，所以继承它），重写url-handler处理，springmvc-config文件配置，以及spring上下文的配置方法。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppWebApplicationInitalizer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>springmvcConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"*.do"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="Date类型的-连接符传值报错"><a href="#Date类型的-连接符传值报错" class="headerlink" title="Date类型的-连接符传值报错"></a>Date类型的-连接符传值报错</h3><blockquote>
<p>添加@InitBinder，创建自定义时间解析日期</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@InitBinder</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">InitBinder</span><span class="token punctuation">(</span>ServletRequestDateBinder binder<span class="token punctuation">)</span><span class="token punctuation">{</span>
    binder<span class="token punctuation">.</span><span class="token function">registerCustomEditor</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">.</span>calss<span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">CustomDateEditor</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意</strong><br>1、日期格式的设定要和传入的格式相同，否则报错，例如只穿年月日，就只要设定年月日的格式，否则报错。<br>2、默认的时间间隔标识符为/</p>
<h3 id="返回json数据报错"><a href="#返回json数据报错" class="headerlink" title="返回json数据报错"></a>返回json数据报错</h3><blockquote>
<p>未添加json转换数据====&gt;&gt;添加jackson转换jar包即可</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.codehaus.jackson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core-asl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.codehaus.jackson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-mapper-asl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/json"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">detalResponseBodyJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    ArrayList<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    User u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>springMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>spring使用</title>
    <url>/2021/02/21/spring-shi-yong/</url>
    <content><![CDATA[<h2 id="spring简介"><a href="#spring简介" class="headerlink" title="spring简介"></a>spring简介</h2><p>Spring框架就像一个家族，有众多衍生产品例如boot、security、jpa等等。但他们的基础都是Spring的ioc和aop。ioc提供了依赖注入的容器，aop解决了面向横切面的编程；</p>
<p><img src="/images/spring/springWork.png" alt="spring工作示意图"><br><img src="/images/spring/springProduct.png" alt="spring产品架构"><br><img src="/images/spring/springFramwork.png" alt="spring技术架构"><br><img src="/images/spring/springApi.png" alt="springApi示意图"></p>
<h2 id="添加项目依赖"><a href="#添加项目依赖" class="headerlink" title="添加项目依赖"></a>添加项目依赖</h2><ul>
<li>直接复制相应jar包</li>
<li>通过maven修改pom.xml配置文件<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.noah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>SpringDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!-- 单元测试 --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!-- 整合log4j --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!-- Servlet/JSP/JSTL --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!-- 整合spring框架（包含springmvc） 这个jar文件包含springmvc开发时的核心类, 同时也会将依赖的相关jar文件引入进来(spring的核心jar文件也包含在内) --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!--这个jar文件包含对Spring对JDBC数据访问进行封装的所有类 --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!-- 整合mybatis框架 --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!-- mysql驱动 --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!-- druid连接池 --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h2><blockquote>
<p>将创建和销毁对象的控制权交给spring容器来完成，用户不必再自行创建和销毁对象，只要在对应的配置文件中配置好即可。<br>优点是可以解耦模块的依赖程度.<br>主要通过文件遍历读取和反射实现对象管理</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>single<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Stu<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!--     &lt;bean id="stu" scope="prototype" class="pojo.Stu" > --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1005<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userInfo<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userInfo<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userInfo<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.userInfo<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>
<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在maven工程的source下新建applicationContext.xml即可。</p>
<h2 id="DI依赖注入"><a href="#DI依赖注入" class="headerlink" title="DI依赖注入"></a>DI依赖注入</h2><blockquote>
<p>在创建了对象之后要进行对象的属性的相关配置就用到了依赖注入，依赖注入属性的方式有两种。</p>
</blockquote>
<ul>
<li>通过构造方法注入依赖<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userInfo<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.userInfo<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- &lt;property name="name" value="" >&lt;/property> --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>捷克夹<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>通过对象属性的getter/setter方法来实现<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Stu<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!--     &lt;bean id="stu" scope="prototype" class="pojo.Stu" > --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1005<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userInfo<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userInfo<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
1、bean标签的属性name对应要管理对象的属性名称，value对应要设置的属性名称，ref表示引用另一个管理的bean标签对象。<br>2、通过spring管理的javaBean对象标签上的scope属性代表了管理模式，singleton表示单例模式，即只创建一个对象，这样有线程安全的问题，对于公共数据要加锁。<br>3、通过设置bean标签的scope为prototype可以改变单例模式，变成引用一次创建一次对象，会有资源浪费的问题。</li>
</ul>
<h2 id="注解方式实现Ioc管理"><a href="#注解方式实现Ioc管理" class="headerlink" title="注解方式实现Ioc管理"></a>注解方式实现Ioc管理</h2><blockquote>
<p>由AnnotationConfigApplicationContext类创建对象，获取IOC容器管理的对象。</p>
</blockquote>
<table>
<thead>
<tr>
<th>注解</th>
<th>作用对象</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>@Controller</td>
<td>类</td>
<td>标记类为Controller类，业务bean对象，交给spring的Ioc容器管理</td>
</tr>
<tr>
<td>@Service[(String name)]</td>
<td>类</td>
<td>标记类为service类，数据操作bean对象爱国你，交给spring的Ioc容器管理</td>
</tr>
<tr>
<td>@Repository[(String name)]</td>
<td>类</td>
<td>标记类为Repository类，数据存储bean对象，交给spring的Ioc容器管理</td>
</tr>
<tr>
<td>@Component[(String name)]</td>
<td>类</td>
<td>标记类为Component类，普通bean对象，交给spring的Ioc容器管理</td>
</tr>
<tr>
<td>@Bean(valu = “name”,init-method=””,…property)</td>
<td>方法</td>
<td>将方法的返回值对象交给spring的Ioc容器管理</td>
</tr>
<tr>
<td>@Autowired</td>
<td>set方法、构造方法、成员变量、其他方法</td>
<td>自动将所需要的值从IOC容器中查找到并注入标记的对象中</td>
</tr>
<tr>
<td>@PostContruct</td>
<td>方法</td>
<td>表示将标记的方法放置在构造函数之后自动执行，相当于xml的init-method标记的方法</td>
</tr>
<tr>
<td>@ComponentScan</td>
<td>类</td>
<td>加载配置类上，默认的值表示要扫描的包路径（String []，可以是单个String）</td>
</tr>
<tr>
<td>@lazy</td>
<td>方法</td>
<td>与@Bean注解结合表示是否要懒加载，默认值是true</td>
</tr>
</tbody></table>
<ul>
<li>整合外部资源@Bean注解<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"entries"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Lazy</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token punctuation">,</span>initMethod <span class="token operator">=</span> <span class="token string">"init"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//等效于@Controller\@Service等注解</span>
  <span class="token keyword">public</span> DruidDataSource <span class="token function">generateDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      DruidDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///jt_db?characterEncoding=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p><strong>注意：</strong>可以不用与@ComponentScan结合使用</p>
<ul>
<li><p>自定义存储类@ComponentScan+@Component+@postConstruct，<strong>存储类的读写要考虑线程安全的问题（单例模式，加锁）</strong></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"cache"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LruCacheDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Cache</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> cache<span class="token punctuation">;</span>
  <span class="token keyword">private</span> Integer maxCap <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//    不能使用有参构造</span>
<span class="token comment" spellcheck="true">//    public LruCacheDemo(int maxCap){</span>
<span class="token comment" spellcheck="true">//        this.maxCap = maxCap;</span>
<span class="token comment" spellcheck="true">//    }</span>

  <span class="token annotation punctuation">@PostConstruct</span>
  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span>maxCap<span class="token punctuation">,</span> <span class="token number">0.75f</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token annotation punctuation">@Override</span>
          <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>maxCap<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
      cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">"LruCacheDemo{"</span> <span class="token operator">+</span>
              <span class="token string">"cache="</span> <span class="token operator">+</span> cache <span class="token operator">+</span>
              <span class="token string">'}'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>自定义操作数据类@ComponentScan+@Repository+@Autowired</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">"searchDao"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultSearchDao</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Autowired</span>
  <span class="token keyword">private</span> Cache cache<span class="token punctuation">;</span>
  <span class="token annotation punctuation">@Autowired</span>
  <span class="token keyword">private</span> DataSource datasource<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">"DefaultSearchDao{"</span> <span class="token operator">+</span>
              <span class="token string">"cache="</span> <span class="token operator">+</span> cache <span class="token operator">+</span>
              <span class="token string">", datasource="</span> <span class="token operator">+</span> datasource <span class="token operator">+</span>
              <span class="token string">'}'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCache</span><span class="token punctuation">(</span>Cache cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> cache<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDatasource</span><span class="token punctuation">(</span>DataSource datasource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>datasource <span class="token operator">=</span> datasource<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="springIOC核心原理"><a href="#springIOC核心原理" class="headerlink" title="springIOC核心原理"></a>springIOC核心原理</h2><ul>
<li>Bean对象创建过程xml方式<blockquote>
<p>通过ResourceLoader加载读取的流，与new SqlSessionFactory.Build()以及DocumentBuildFactory.newInstance().newDocumentBuilder().parse()类似。然后通过BeandefinitionReader,将封装定义信息至map&lt;String key,Object BeanDefinition&gt;，并将此map交给Beanfactory对象。</p>
</blockquote>
</li>
</ul>
<p><img src="/images/spring/Beanfactory.png" alt="spring初始化过程"></p>
<ul>
<li>IOC容器map两大map对象</li>
</ul>
<p><img src="/images/spring/xmlCreate.png" alt="xml方式"><br><img src="/images/spring/annotationCreate.png" alt="注解方式"></p>
<ul>
<li>Bean对象的创建方式：实现了FactoryBean接口的使用getObject方法创建，未实现FacotryBean接口则使用构造方法。</li>
</ul>
<p><img src="/images/spring/beanCreatMethod.png" alt="Bean对象创建方式"></p>
<p><strong>说明：</strong>一般在创建一些相对复杂的工厂对象时，通常会写一个工厂bean对象，然后基于工厂bean对象创建具体的工厂对象，例如SqlSessionFactoryBean,ShiroFilterFactoryBean，ProxyFactoryBean等。</p>
<ul>
<li>IOC依赖注入项目中的体现</li>
</ul>
<p><img src="/images/spring/projectDIDiagram.png" alt="项目中的依赖注入体现"></p>
<p><strong>注意：</strong>在项目中为了解耦合，对象直接通过接口进行通信，即对象耦合于接口(@Autowired自动注入)</p>
<p><img src="/images/spring/ObjectInterfaceCommunication.png" alt="对象和接口的耦合"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat使用</title>
    <url>/2021/01/13/tomcat-shi-yong/</url>
    <content><![CDATA[<h2 id="安装即可使用"><a href="#安装即可使用" class="headerlink" title="安装即可使用"></a>安装即可使用</h2><h2 id="FAQ常见问题"><a href="#FAQ常见问题" class="headerlink" title="FAQ常见问题"></a>FAQ常见问题</h2><h3 id="端口被占用"><a href="#端口被占用" class="headerlink" title="端口被占用"></a>端口被占用</h3><pre class="line-numbers language-sh"><code class="language-sh">#查看进程占用端口号(pid)情况
netstat -ano
#关闭占用端口的进程
taskkill /f /pid 进程编号
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="重复启动"><a href="#重复启动" class="headerlink" title="重复启动"></a>重复启动</h3><blockquote>
<p>运行shutdown.bat文件关闭后启动.</p>
</blockquote>
<h3 id="修改不生效"><a href="#修改不生效" class="headerlink" title="修改不生效"></a>修改不生效</h3><blockquote>
<p>修改了server.xml文件但是tomcat命令行还是显示的默认端口,检查电脑上是否有多个tomcat,可能默认启动了另一个tomcat!</p>
</blockquote>
<h2 id="文件介绍"><a href="#文件介绍" class="headerlink" title="文件介绍"></a>文件介绍</h2><ul>
<li>tomcat文件夹<table>
<thead>
<tr>
<th>文件夹</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>bin</td>
<td>存放可执行文件,批处理程序</td>
</tr>
<tr>
<td>conf</td>
<td>存放配置tomcat的配置文件(server.xml)</td>
</tr>
<tr>
<td>lib</td>
<td>存放运行所需要的jar包,其他依赖</td>
</tr>
<tr>
<td>logs</td>
<td>存放异常出现时的信息</td>
</tr>
<tr>
<td>temp</td>
<td>存放临时数据</td>
</tr>
<tr>
<td>webapps</td>
<td>存放整个项目文件(包含前端,后端以及WEB-INF配置文件等其他虚拟站点资源文件)</td>
</tr>
<tr>
<td>work</td>
<td>存放tomcat运行时产生的文件</td>
</tr>
</tbody></table>
</li>
</ul>
<pre class="line-numbers language-md"><code class="language-md">一个webaps中的web应用
    |--其他文件夹,可以直接访问
    |--WEB-INF文件夹,不可直访问
        |--classes动态web资源
        |--lib运行依赖
        |--web.xml配置文件
        
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>WEB-INF项目文件夹<table>
<thead>
<tr>
<th>文件|文件夹</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>classes</td>
<td>存放编译好的java字节码程序,动态web资源(servlet\jsp)中的class文件</td>
</tr>
<tr>
<td>lib</td>
<td>运行所学要的依赖–&gt;动态web资源(servlet\jsp)以来的一些jar包</td>
</tr>
<tr>
<td>web.xml</td>
<td>当前web应用的核心配置文件</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="默认打开项目ROOT"><a href="#默认打开项目ROOT" class="headerlink" title="默认打开项目ROOT"></a>默认打开项目ROOT</h2><blockquote>
<p>tomcat默认打开web应用文件夹名称是ROOT,在ROOT文件夹中的WIN-INF文件夹中的web.xml文件配置默认打开的文件.</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="ISO-8859-1"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome-file-list</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Welcome-file-list</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>在welcome-file中配置ROOT目录下的文件即可</li>
</ul>
<h2 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h2><blockquote>
<p>使用war打包可以减少带宽和体积,tomcat在webapps中存在war结尾,并且压缩包名称在路径中不存在时,可以自动解压发布web应用.</p>
</blockquote>
<ul>
<li>注意在打包web应用时应该要在应用顶层选中所有文件一起压缩成一个压缩包,不要直接压缩应用根目录文件夹.</li>
</ul>
<h2 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h2><blockquote>
<p>规定浏览器发送请求的格式或规则.原则上一次发一个请求,收到服务器返回信息后处理信息.</p>
</blockquote>
<ul>
<li>http请求由三部分组成:请求行+请求头(若干行)+请求实体内容</li>
<li>http响应也有三部分组成:状态行+响应头(若干行)+响应实体内容</li>
<li>常见http状态码<table>
<thead>
<tr>
<th>状态码</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>请求成功</td>
</tr>
<tr>
<td>301</td>
<td>重定向</td>
</tr>
<tr>
<td>302</td>
<td>重定向</td>
</tr>
<tr>
<td>304</td>
<td>使用浏览器缓存资源</td>
</tr>
<tr>
<td>404</td>
<td>请求资源不存在</td>
</tr>
<tr>
<td>500</td>
<td>服务器程序在处理请求时出现了异常</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>tomcat</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>ts入门</title>
    <url>/2021/06/03/ts-ru-men/</url>
    <content><![CDATA[<h3 id="webpack配置ts"><a href="#webpack配置ts" class="headerlink" title="webpack配置ts"></a>webpack配置ts</h3><ul>
<li>webpack.config.js文件配置如下：<pre class="line-numbers language-json"><code class="language-json">const path = require('path'<span class="token punctuation">)</span><span class="token punctuation">;</span>
const htmlWebpackPlugin = require('html-webpack-plugin'<span class="token punctuation">)</span><span class="token punctuation">;</span>
const <span class="token punctuation">{</span>CleanWebpackPlugin<span class="token punctuation">}</span> = require('clean-webpack-plugin'<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p>module.exports = {<br>    mode: ‘development’,<br>    entry: {<br>        app: ‘./src/index.ts’<br>    },<br>    plugins: [<br>        new htmlWebpackPlugin({<br>            template: path.join(__dirname, ‘./www/index.html’)<br>        }),<br>        new CleanWebpackPlugin(),<br>    ],<br>    module: {<br>        rules: [<br>            {<br>                test: /.ts$/, use: [<br>                    {<br>                        loader: ‘babel-loader’,<br>                        options: {<br>                            presets: [<br>                                [“@babel/preset-env”, {targets:{chrome:”88”, ie: ‘11’}, corejs: ‘3’, useBuiltIns: ‘usage’}],<br>                            ]<br>                        },<br>                    },<br>                    ‘ts-loader’,<br>                ],<br>                exclude: /node_modules/<br>            },<br>            {<br>                test: /.less$/, use: [<br>                    ‘style-loader’,<br>                    ‘css-loader’,<br>                    {<br>                        loader: ‘postcss-loader’,<br>                        options: {<br>                            postcssOptions: {<br>                                plugins: [<br>                                    [<br>                                        ‘postcss-preset-env’,<br>                                        {<br>                                            browser: ‘last 2 version’,<br>                                        }<br>                                    ]<br>                                ]<br>                            }<br>                        }<br>                    },<br>                    ‘less-loader’,<br>                ],<br>                exclude: /node_modules/<br>            }<br>        ]<br>    },<br>    resolve: {<br>        alias:{<br>            ‘@’: path.join(__dirname, ‘./src’),<br>        },<br>        extensions: [‘.ts’,’.js’],<br>    },<br>    output: {<br>        filename: ‘bundle.js’,<br>        path: path.join(__dirname, ‘dist’),<br>        environment: {<br>            arrowFunction: false,<br>        }<br>    },<br>    // devServer: {</p>
<pre><code>// &#125;
</code></pre>
<p>}</p>
<pre><code>
+ ts.config.json文件配置：
```json
&#123;
    &quot;include&quot;: [
        &quot;./src/**/*&quot;,
    ],
    &quot;exclude&quot;: [
        &quot;./node_modules/&quot;,
        &quot;./dist&quot;,
    ],
    &quot;compilerOptions&quot;: &#123;
        &quot;target&quot;: &quot;esnext&quot;,
        &quot;module&quot;: &quot;esnext&quot;
    &#125;
&#125;
</code></pre>
<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><h4 id="类型申明"><a href="#类型申明" class="headerlink" title="类型申明"></a>类型申明</h4><blockquote>
<p>共有12种类型的申明</p>
</blockquote>
<table>
<thead>
<tr>
<th>类型</th>
<th>例子</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>number</td>
<td>1,1.000</td>
<td>数字</td>
</tr>
<tr>
<td>string</td>
<td>‘any’,”any”,<code>any</code></td>
<td>字符串</td>
</tr>
<tr>
<td>boolean</td>
<td>true、false</td>
<td>布尔值</td>
</tr>
<tr>
<td>字面量</td>
<td>其本身</td>
<td>变量的值只能是指定的值</td>
</tr>
<tr>
<td>any</td>
<td>任意类型</td>
<td>任意类型</td>
</tr>
<tr>
<td>unknow</td>
<td>任意类型</td>
<td>类型安全的任意类型</td>
</tr>
<tr>
<td>void</td>
<td>undefined（空值）</td>
<td>返回值为空undefined，多用于方法</td>
</tr>
<tr>
<td>never</td>
<td>没有值</td>
<td>永远不会返回任何值，多用于方法</td>
</tr>
<tr>
<td>object</td>
<td>{name:’jack’}</td>
<td>对象</td>
</tr>
<tr>
<td>array</td>
<td>[1,2,3]</td>
<td>数组</td>
</tr>
<tr>
<td>tuple</td>
<td>[string,number]</td>
<td>ts新增，固定长度的数组,可以复合其他类型</td>
</tr>
<tr>
<td>enum</td>
<td>enum{A,B}</td>
<td>枚举，ts新增类型</td>
</tr>
</tbody></table>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><h4 id="编译方式"><a href="#编译方式" class="headerlink" title="编译方式"></a>编译方式</h4><ul>
<li>命令行直接tsc filename -w（监视文件变化动态编译）</li>
<li>tscofig.json文件配置项目编译<table>
<thead>
<tr>
<th>配置项</th>
<th>释义</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>include</td>
<td>配置要编译的文件路径</td>
<td>“include”:[“./src/*<em>/</em>“,]</td>
</tr>
<tr>
<td>exclude</td>
<td>配置不要ts编译器编译的文件</td>
<td>“exclude”: [“./node_modules/“,”./dist/“,]</td>
</tr>
<tr>
<td>files</td>
<td>配置具体要编译的文件名称列表</td>
<td>“files”: [“other.ts”]</td>
</tr>
<tr>
<td>extends</td>
<td>配置要继承的配置文件，会将继承文件的配置添加到配置文件</td>
<td>“extends”: “./tsconfig.base.json”,</td>
</tr>
<tr>
<td>compilerOptions</td>
<td>配置编译器选项</td>
<td>{配置项较多，不一一展开}</td>
</tr>
</tbody></table>
</li>
</ul>
<table>
<thead>
<tr>
<th>compilerOptions配置项</th>
<th>释义</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>target</td>
<td>配置ts编译器转换成js的版本</td>
<td>target:”es6”</td>
</tr>
<tr>
<td>module</td>
<td>配置ts转换的模块规则（commonjs、amd。。。）</td>
<td>module:”es6”</td>
</tr>
<tr>
<td>removeComments</td>
<td>是否移除注释</td>
<td>removeComments:true</td>
</tr>
<tr>
<td>allowJs</td>
<td>是否编译js文件</td>
<td>allowJs:true</td>
</tr>
<tr>
<td>checkJs</td>
<td>是否检查js文件语法</td>
<td>checkJs:true</td>
</tr>
<tr>
<td>outDir</td>
<td>配置编译文件的导出文件路径位置</td>
<td>outDir:”dist”</td>
</tr>
<tr>
<td>outFile</td>
<td>配置编译文件的导出文件名称（将所有的编译文件导入到一个文件中）</td>
<td>outFile:”./dist/outfile.js”</td>
</tr>
<tr>
<td>noEmit</td>
<td>是否生成编译好的文件</td>
<td>noEmit:true</td>
</tr>
<tr>
<td>noEmitOnError</td>
<td>是否在编译出错时生成编译文件</td>
<td>noEmitOnError:true</td>
</tr>
<tr>
<td>strict</td>
<td>编译文件是否使用严格模式总开关</td>
<td>strict:true</td>
</tr>
<tr>
<td>alwaysStrict</td>
<td>是否使用严格模式（有export/import关键字的默认使用严格模式）</td>
<td>alwaysStrict:true</td>
</tr>
<tr>
<td>noImplicitAny</td>
<td>是否允许使用any</td>
<td>noImplicitAny:true</td>
</tr>
<tr>
<td>noImplicitThis</td>
<td>是否允许无类型申明的this</td>
<td>noImplicitThis:true</td>
</tr>
<tr>
<td>strictNullChecks</td>
<td>是否严格检查变量为null的情况</td>
<td>strictNullChecks:true</td>
</tr>
</tbody></table>
<p><strong>注意：</strong>演示用ts的检查，设置strict为true即可，规范代码。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul>
<li><p>接口类型指定type</p>
</li>
<li><p>封装：private+_property+get/set</p>
</li>
</ul>
<pre class="line-numbers language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">//对象的get、set方法</span>
<span class="token keyword">class</span> <span class="token class-name">person</span>  <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> _age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">set</span> <span class="token function">age</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>_age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'cannot set age to this number!!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>泛型</li>
</ul>
]]></content>
      <categories>
        <category>ts</category>
      </categories>
      <tags>
        <tag>typescript基础</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli使用</title>
    <url>/2020/09/26/vue-cli-shi-yong/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>用于vue-cli的升级较快，记录下变化</p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#全局安装</span>
<span class="token function">npm</span> <span class="token function">install</span> -g @vue/cli
<span class="token comment" spellcheck="true">#升级项目中的cli相关模块</span>
<span class="token comment" spellcheck="true">#vue  upgrade [options] [plugin-name]</span>
<span class="token comment" spellcheck="true">#（试用）升级 Vue CLI 服务及插件</span>
<span class="token comment" spellcheck="true">#选项：</span>
  -t, --to <span class="token operator">&lt;</span>version<span class="token operator">></span>    升级 <span class="token operator">&lt;</span>plugin-name<span class="token operator">></span> 到指定的版本
  -f, --from <span class="token operator">&lt;</span>version<span class="token operator">></span>  跳过本地版本检测，默认插件是从此处指定的版本升级上来
  -r, --registry <span class="token operator">&lt;</span>url<span class="token operator">></span>  使用指定的 registry 地址安装依赖
  --all                 升级所有的插件
  --next                检查插件新版本时，包括 alpha/beta/rc 版本在内
  -h, --help            输出帮助内容
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><pre class="line-numbers language-bash"><code class="language-bash">vue create <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>app-name<span class="token operator">></span>
<span class="token comment" spellcheck="true">#创建一个由 `vue-cli-service` 提供支持的新项目</span>
<span class="token comment" spellcheck="true">#选项：</span>
  -p, --preset <span class="token operator">&lt;</span>presetName<span class="token operator">></span>       忽略提示符并使用已保存的或远程的预设选项
  -d, --default                   忽略提示符并使用默认预设选项
  -i, --inlinePreset <span class="token operator">&lt;</span>json<span class="token operator">></span>       忽略提示符并使用内联的 JSON 字符串预设选项
  -m, --packageManager <span class="token operator">&lt;</span>command<span class="token operator">></span>  在安装依赖时使用指定的 <span class="token function">npm</span> 客户端
  -r, --registry <span class="token operator">&lt;</span>url<span class="token operator">></span>            在安装依赖时使用指定的 <span class="token function">npm</span> registry
  -g, --git <span class="token punctuation">[</span>message<span class="token punctuation">]</span>             强制 / 跳过 <span class="token function">git</span> 初始化，并可选的指定初始化提交信息
  -n, --no-git                    跳过 <span class="token function">git</span> 初始化
  -f, --force                     覆写目标目录可能存在的配置
  -c, --clone                     使用 <span class="token function">git</span> clone 获取远程预设选项
  -x, --proxy                     使用指定的代理创建项目
  -b, --bare                      创建项目时省略默认组件中的新手指导信息
  -h, --help                      输出使用帮助信息
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>需要使用vue-init功能，安装@vue/cli-init包即可</li>
<li>使用图像化创建项目<pre class="line-numbers language-bash"><code class="language-bash">vue ui
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>vue文档记录</title>
    <url>/2020/09/25/vue-wen-dang-ji-lu/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>开始重新阅读vue官方文档，记录下重点内容，加强理解和记忆。</p>
<span id="more"></span>

<h3 id="计算属性computed"><a href="#计算属性computed" class="headerlink" title="计算属性computed"></a>计算属性computed</h3><p>1、使用场景：模板内表达式的复杂计算</p>
<p>2、特性：响应式计算（不重复计算相同值，缓存响应式的依赖，即data中的值改变才重新计算，否则使用缓存值）优于方法和watch监听属性</p>
<p>示例：<br>···js<br>var vm = new Vue({<br>    data:{<br>        firstname:’foo’,<br>        lastname:’bar’<br>    },<br>    computed:{<br>        fullname(){<br>            return this.firstname+’  ‘+this.lastname<br>        }<br>    },<br>    template:<code>        &lt;div&gt;&#123;&#123;fullname&#125;&#125;&lt;/div&gt;    </code><br>}).$mount(‘#app’)<br>···</p>
<p>3、自定义setter方法：一般计算属性默认只有getter方法，但支持添加setter方法，example<br>···js<br>…<br>computed:{<br>    fullname:{<br>        get:function(){<br>            return this.firstname+’ ‘+this.lastname<br>        },<br>        set:function(newVal){<br>            let nameArr = newVal.split(‘ ‘)<br>            this.firstname = nameArr[0]<br>            this.lastname = nameArr[nameArr.length-1]<br>        }<br>    }<br>}<br>…<br>//改变fullname则会调用setter方法<br>vm.fullname = ‘jack ma’<br>···</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue文档</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack和babel在项目中的应用</title>
    <url>/2020/10/13/webpack-he-babel-zai-xiang-mu-zhong-de-ying-yong/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>使用vue-cli简单不少，但要是单纯想使用es6的打包工具webpack和转换代码工具的babel进行项目的打包转换，麻烦不少</p>
<span id="more"></span>

<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><pre class="line-numbers language-bash"><code class="language-bash">//如果项目文件夹存在，可以省略项目名称
<span class="token function">npm</span> init -y <span class="token punctuation">[</span>项目名称<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>使用上述命令生成package.json文件，此文件主要记录了项目的依赖，版本号等信息。当项目丢失部分依赖时可使用npm install依照此记录重新安装依赖。</p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>webpack和babel的依赖包较多，且版本问题不兼容，很坑。直接使用固定版本命令安装</p>
<ul>
<li>安装babel的相关依赖</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -D babel-core@6.26.x babel-loader@7.0.0 babel-plugin-transform-runtime@6.23.x babel-preset-env@1.7.x babel-polyfill
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>安装webpack相关的依赖</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -D webpack@4.43.x webpack-cli@3.3.x webpack-dev-server@3.11.x html-webpack-plugin@4.3.x
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>安装css和字体文件相关的依赖</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> i -D node-sass@4.14.x sass-loader@8.0.x css-loader@3.5.x file-loader@6.0.x style-loader@1.2.x url-loader@4.1.x
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="配置wepack"><a href="#配置wepack" class="headerlink" title="配置wepack"></a>配置wepack</h2><p>配置需要使用的babel转换环境和wepack打包配置，项目入口生成文件存放路径等</p>
<p>1、在项目的根目录下创建webpack.config.js文件</p>
<p>2、在文件中写如下配置即可，项目运行时会自动读取此文件的配置</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//commonjs 导入文件格式</span>
<span class="token keyword">const</span> htmlwebpackplugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> htmlwebplugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">htmlwebpackplugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    filename<span class="token punctuation">:</span><span class="token string">'index.html'</span><span class="token punctuation">,</span>
    template<span class="token punctuation">:</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./src/index.html'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//安装node-sass特殊命令npm install node-sass -D --sass-binary-site=http://npm.taobao.org/mirrors/node-sass</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    mode<span class="token punctuation">:</span><span class="token string">'development'</span><span class="token punctuation">,</span>
    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span>htmlwebplugin<span class="token punctuation">]</span><span class="token punctuation">,</span>
    entry<span class="token punctuation">:</span><span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>
    module<span class="token punctuation">:</span><span class="token punctuation">{</span>
        rules<span class="token punctuation">:</span><span class="token punctuation">[</span>
            <span class="token punctuation">{</span> 
                test<span class="token punctuation">:</span> <span class="token regex">/.js$/</span><span class="token punctuation">,</span> 
                exclude<span class="token punctuation">:</span><span class="token regex">/node_modules/</span><span class="token punctuation">,</span>
                use<span class="token punctuation">:</span><span class="token punctuation">{</span>
                    loader<span class="token punctuation">:</span><span class="token string">'babel-loader'</span><span class="token punctuation">,</span>
                    options<span class="token punctuation">:</span><span class="token punctuation">{</span>
                        presets<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'env'</span><span class="token punctuation">,</span><span class="token string">'babel-polyfill'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                        plugins<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'transform-runtime'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                test<span class="token punctuation">:</span> <span class="token regex">/\.scss$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                    loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>
                    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                        modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                            localIdentName<span class="token punctuation">:</span> <span class="token string">'[path][name]-[local]-[hash:5]'</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.ttf|woff|woff2|eot|svg$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token string">'url-loader'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token comment" spellcheck="true">// {test:/\.css$/,use:['style-loader','css-loader?modules&amp;localIdentName=[path][name]-[local]-[hash:5]']}</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    resolve<span class="token punctuation">:</span><span class="token punctuation">{</span>
        alias<span class="token punctuation">:</span><span class="token punctuation">{</span>
            <span class="token string">'@'</span><span class="token punctuation">:</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">'$'</span><span class="token punctuation">:</span>__dirname
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        extensions<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span><span class="token string">'.jsx'</span><span class="token punctuation">,</span><span class="token string">'.json'</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="附上完整的package-json文件"><a href="#附上完整的package-json文件" class="headerlink" title="附上完整的package.json文件"></a>附上完整的package.json文件</h2><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"demo"</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>
  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>
    <span class="token property">"serve"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --open --port 8080 --hot --host 127.0.0.1"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>
  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"babel-core"</span><span class="token operator">:</span> <span class="token string">"^6.26.3"</span><span class="token punctuation">,</span>
    <span class="token property">"babel-loader"</span><span class="token operator">:</span> <span class="token string">"^7.0.0"</span><span class="token punctuation">,</span>
    <span class="token property">"babel-plugin-transform-runtime"</span><span class="token operator">:</span> <span class="token string">"^6.23.0"</span><span class="token punctuation">,</span>
    <span class="token property">"babel-preset-env"</span><span class="token operator">:</span> <span class="token string">"^1.7.0"</span><span class="token punctuation">,</span>
    <span class="token property">"babel-preset-react"</span><span class="token operator">:</span> <span class="token string">"^6.24.1"</span><span class="token punctuation">,</span>
    <span class="token property">"babel-preset-stage-0"</span><span class="token operator">:</span> <span class="token string">"^6.24.1"</span><span class="token punctuation">,</span>
    <span class="token property">"bootstrap"</span><span class="token operator">:</span> <span class="token string">"^4.5.0"</span><span class="token punctuation">,</span>
    <span class="token property">"create-react-class"</span><span class="token operator">:</span> <span class="token string">"^15.6.3"</span><span class="token punctuation">,</span>
    <span class="token property">"css-loader"</span><span class="token operator">:</span> <span class="token string">"^3.5.3"</span><span class="token punctuation">,</span>
    <span class="token property">"file-loader"</span><span class="token operator">:</span> <span class="token string">"^6.0.0"</span><span class="token punctuation">,</span>
    <span class="token property">"html-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^4.3.0"</span><span class="token punctuation">,</span>
    <span class="token property">"jquery"</span><span class="token operator">:</span> <span class="token string">"^3.5.1"</span><span class="token punctuation">,</span>
    <span class="token property">"prop-types"</span><span class="token operator">:</span> <span class="token string">"^15.7.2"</span><span class="token punctuation">,</span>
    <span class="token property">"sass-loader"</span><span class="token operator">:</span> <span class="token string">"^8.0.2"</span><span class="token punctuation">,</span>
    <span class="token property">"style-loader"</span><span class="token operator">:</span> <span class="token string">"^1.2.1"</span><span class="token punctuation">,</span>
    <span class="token property">"url-loader"</span><span class="token operator">:</span> <span class="token string">"^4.1.0"</span><span class="token punctuation">,</span>
    <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^4.43.0"</span><span class="token punctuation">,</span>
    <span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^3.3.11"</span><span class="token punctuation">,</span>
    <span class="token property">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^3.11.0"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"node-sass"</span><span class="token operator">:</span> <span class="token string">"^4.14.1"</span><span class="token punctuation">,</span>
    <span class="token property">"react"</span><span class="token operator">:</span> <span class="token string">"^16.13.1"</span><span class="token punctuation">,</span>
    <span class="token property">"react-dom"</span><span class="token operator">:</span> <span class="token string">"^16.13.1"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>babel</tag>
        <tag>wepack</tag>
      </tags>
  </entry>
  <entry>
    <title>内部类</title>
    <url>/2020/09/15/nei-bu-lei/</url>
    <content><![CDATA[<h2 id="Date类的简单实用"><a href="#Date类的简单实用" class="headerlink" title="Date类的简单实用"></a>Date类的简单实用</h2><blockquote>
<p>SimpleDateFormat+Date类</p>
</blockquote>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><blockquote>
<p>内部类就是类里面嵌套了类</p>
</blockquote>
<table>
<thead>
<tr>
<th>普通内部类</th>
<th>静态内部类</th>
</tr>
</thead>
<tbody><tr>
<td>异</td>
<td>普通内部类只能由具体的外部类对象生成内部内对象，静态内部类则可以直接生成对象</td>
</tr>
<tr>
<td>同</td>
<td>在类的里面定义，引入有导入包+外部类名.内部类名两种方式</td>
</tr>
<tr>
<td>同</td>
<td>在内部类和其外部类中可以相互引用私有变量/方法，部手限制关键字影响</td>
</tr>
</tbody></table>
<blockquote>
<p>局部内部类</p>
</blockquote>
<p>1、使用场景，只出现一次，需要不确定的类型实现对象引用接口/父类方法<br>2、使用方式new +父类/接口名（）{}即可。<br><strong>限制</strong>：</p>
<ul>
<li>使用局部变量需要final关键字（jdk1.8后可省略）</li>
<li>声明只在定义的局部代码块中有效/可用，但对象地址可以传递出去——&gt;用对象实现方法调用（传递出去时返回类型使用父类声明即可）</li>
</ul>
<p><strong>应用</strong></p>
<ul>
<li>sort方法总的comparator接口对象</li>
</ul>
<h2 id="类的类型判定"><a href="#类的类型判定" class="headerlink" title="类的类型判定"></a>类的类型判定</h2><ul>
<li><p>判定类是否属于某个类使用instanceof关键字即可</p>
<pre class="line-numbers language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token string">"xx"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//包装类才可使用下列方法判定</span>
Integer i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>判定是否是具体某个类型</p>
<pre class="line-numbers language-java"><code class="language-java">Integer i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="内部类作为私有类的应用"><a href="#内部类作为私有类的应用" class="headerlink" title="内部类作为私有类的应用"></a>内部类作为私有类的应用</h2><blockquote>
<p>使用私有定义，公共方法提供访问内部类的对象。</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> day1220<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//泛型T代替具体类型</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassIteratroDemo</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Iterable</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  Node first<span class="token punctuation">;</span>
  Node last<span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">//自定义的添加方法</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Node n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      n<span class="token punctuation">.</span>value <span class="token operator">=</span> t<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          first <span class="token operator">=</span> n<span class="token punctuation">;</span>
          last <span class="token operator">=</span> n<span class="token punctuation">;</span>
          n<span class="token punctuation">.</span>next <span class="token operator">=</span> n<span class="token punctuation">;</span>
          n<span class="token punctuation">.</span>prev <span class="token operator">=</span> n<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          first<span class="token punctuation">.</span>prev <span class="token operator">=</span> n<span class="token punctuation">;</span>
          last<span class="token punctuation">.</span>next <span class="token operator">=</span> n<span class="token punctuation">;</span>
          n<span class="token punctuation">.</span>next <span class="token operator">=</span> first<span class="token punctuation">;</span>
          n<span class="token punctuation">.</span>prev <span class="token operator">=</span> last<span class="token punctuation">;</span>
          last <span class="token operator">=</span> n<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      size<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment" spellcheck="true">//获取类双向链表的值</span>
  <span class="token keyword">public</span> T <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Node n <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> n<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">private</span> Node <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>
      Node n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> num <span class="token operator">></span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> null<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> first<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> last<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              n <span class="token operator">=</span> first<span class="token punctuation">;</span>
              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  n <span class="token operator">=</span> n<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
              n <span class="token operator">=</span> last<span class="token punctuation">;</span>
              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> num<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  n <span class="token operator">=</span> n<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> n<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment" spellcheck="true">//私有内部类</span>
  <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">itr</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>
      Node n <span class="token operator">=</span> null<span class="token punctuation">;</span>

      <span class="token annotation punctuation">@Override</span>
      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> n <span class="token operator">!=</span> first<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token annotation punctuation">@Override</span>
      <span class="token keyword">public</span> T <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              n <span class="token operator">=</span> first<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          T temp <span class="token operator">=</span> n<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
          n <span class="token operator">=</span> n<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
          <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

  <span class="token punctuation">}</span>
  <span class="token comment" spellcheck="true">//内部的封装对象的类</span>
  <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
      T value<span class="token punctuation">;</span>
      Node prev<span class="token punctuation">;</span>
      Node next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment" spellcheck="true">//继承Iterable接口，重写此方法，提供公共的访问内部类的方法</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">itr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>内部类</tag>
        <tag>class</tag>
        <tag>类的类型判断</tag>
      </tags>
  </entry>
  <entry>
    <title>双向链表和ArrayList</title>
    <url>/2020/09/22/shuang-xiang-lian-biao-he-arraylist/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>主要是集合内容，linklist以及ArrayList对比，应用场景的区分。</p>
<span id="more"></span>

<ul>
<li>Java中没有引用传递都是值传递</li>
</ul>
<h4 id="LinkedList使用"><a href="#LinkedList使用" class="headerlink" title="LinkedList使用"></a>LinkedList使用</h4><ul>
<li>双向链表，头部和尾部相互引用</li>
<li>操作头/尾数据效率高，中间效率低 </li>
</ul>
<p>1、常用api</p>
<table>
<thead>
<tr>
<th>api</th>
<th>释义</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>add(elem)</td>
<td>添加list元素</td>
<td>返回Boolean值，成功true</td>
</tr>
<tr>
<td>get(num)</td>
<td>通过下标来获取数组元素</td>
<td>对应元素</td>
</tr>
<tr>
<td>remove(num)</td>
<td>删除指定位置元素</td>
<td>删除的元素</td>
</tr>
<tr>
<td>remove(elem)</td>
<td>删除重载方法</td>
<td>返回Boolean值，删除了为true</td>
</tr>
<tr>
<td>size()</td>
<td>list大小</td>
<td>数字</td>
</tr>
<tr>
<td>iterator()</td>
<td>生成iterator对象</td>
<td>一个Iterator对象</td>
</tr>
</tbody></table>
<p>2、特性</p>
<ul>
<li><p>头/尾部两端效率高，中间效率低，由于内部结构是双向链表，可当作栈或队列stac/queue使用<br>  1、当普通双向链表时</p>
<table>
<thead>
<tr>
<th>api</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>addFirst(elem)</td>
<td>添加到头部</td>
</tr>
<tr>
<td>getFirst()</td>
<td>获取第一个元素</td>
</tr>
<tr>
<td>removeFirst()</td>
<td>删除第一个元素</td>
</tr>
<tr>
<td>addLast(elem)</td>
<td>添加到尾部</td>
</tr>
<tr>
<td>getLast()</td>
<td>获取最后一个元素</td>
</tr>
<tr>
<td>removeLast()</td>
<td>删除最后一个元素</td>
</tr>
</tbody></table>
<p>  2、当成queue队列时</p>
<table>
<thead>
<tr>
<th>api</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>offer(elem)</td>
<td>添加到头部</td>
</tr>
<tr>
<td>peek()</td>
<td>获取第一个元素</td>
</tr>
<tr>
<td>poll()</td>
<td>删除第一个元素</td>
</tr>
</tbody></table>
<p>  3、当成stack栈时</p>
<table>
<thead>
<tr>
<th>api</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>posh(elem)</td>
<td>添加到头部</td>
</tr>
<tr>
<td>pop()</td>
<td>删除第一个元素</td>
</tr>
</tbody></table>
</li>
<li><p>下标遍历效率低，使用iterator()方法生成迭代器对象，用迭代器的hasNext+next()方法遍历效率相对高。</p>
</li>
<li><p>iterator迭代器对象中存了list元素的引用，调用next方法自动引用元素值，同时将保存的引用换成下一个元素的。</p>
</li>
</ul>
<h3 id="和ArrayList对比"><a href="#和ArrayList对比" class="headerlink" title="和ArrayList对比"></a>和ArrayList对比</h3><ul>
<li>LinkedList适用于频繁的修改、添加头尾数据（丑数），获取数据较之慢</li>
<li>ArrayList适用于海量数据的查询（可直接由内存大小算出存储元素的地址，因此快），数据添加（添加至末尾）</li>
</ul>
<h3 id="手写简要双向链表增删功能"><a href="#手写简要双向链表增删功能" class="headerlink" title="手写简要双向链表增删功能"></a>手写简要双向链表增删功能</h3><blockquote>
<p>主要是明确双向链表封装一个对象，对象包含了前一个和后一个对象的引用，增删就是对封装对象进行操作。</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> day1215<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleLinkedListTest</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>
    Node last<span class="token punctuation">;</span>
    Node first<span class="token punctuation">;</span>
    Integer size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//链表状态判定：两种情况为空和不为空</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//使用匿名内部类，省略了this</span>
        Node n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//相当于Node n = this.new Node();</span>
        n<span class="token punctuation">.</span>value <span class="token operator">=</span> t<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            n<span class="token punctuation">.</span>prev <span class="token operator">=</span> n<span class="token punctuation">;</span>
            n<span class="token punctuation">.</span>next <span class="token operator">=</span> n<span class="token punctuation">;</span>
            first <span class="token operator">=</span> n<span class="token punctuation">;</span>
            last <span class="token operator">=</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            last<span class="token punctuation">.</span>next <span class="token operator">=</span> n<span class="token punctuation">;</span>
            n<span class="token punctuation">.</span>prev <span class="token operator">=</span> last<span class="token punctuation">;</span>
            n<span class="token punctuation">.</span>next <span class="token operator">=</span> first<span class="token punctuation">;</span>
            first<span class="token punctuation">.</span>prev <span class="token operator">=</span> n<span class="token punctuation">;</span>
            last <span class="token operator">=</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        size<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> T <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Node n <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> n<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">private</span> DoubleLinkedListTest<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">.</span>Node <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//三种情况，越界，头尾部对象以及中间对象,分别处理即可</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">></span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> first<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> last<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Node n <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            n <span class="token operator">=</span> first<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                n <span class="token operator">=</span> n<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            n <span class="token operator">=</span> last<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                n <span class="token operator">=</span> n<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
        T value<span class="token punctuation">;</span>
        Node prev<span class="token punctuation">;</span>
        Node next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LinkedList实例"><a href="#LinkedList实例" class="headerlink" title="LinkedList实例"></a>LinkedList实例</h2><blockquote>
<p>利用linkedlist保存文件，循环遍历list得到数组文件的大小</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getDocLength</span><span class="token punctuation">(</span>String inp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>inp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    LinkedList<span class="token operator">&lt;</span>File<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>File<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        File ff <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ff<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum <span class="token operator">+=</span> ff<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            File<span class="token punctuation">[</span><span class="token punctuation">]</span> fff <span class="token operator">=</span> ff<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> fff<span class="token punctuation">)</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>File ffff <span class="token operator">:</span> fff<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ffff<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>ArrayList</tag>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2020/12/22/duo-xian-cheng/</url>
    <content><![CDATA[<h2 id="继承Thread类实现多线程"><a href="#继承Thread类实现多线程" class="headerlink" title="继承Thread类实现多线程"></a>继承Thread类实现多线程</h2><blockquote>
<p>run方法里面要运行的内容和线程是在一起的，要多线程就要创建多个实现的实例对象</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    T1 t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    T1 t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    R1 r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">R1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Thread t4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">T1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>继承的方法中可以不写super直接调用getName方法？？？（可能加了final关键字）</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
* Returns this thread's name.
*
* @return  this thread's name.
* @see     #setName(String)
*/</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="实现Runable接口实现多线程"><a href="#实现Runable接口实现多线程" class="headerlink" title="实现Runable接口实现多线程"></a>实现Runable接口实现多线程</h2><blockquote>
<p>run方法里面要运行的内容和线程分开，要多线程就要创建多个对象线程，并把实现的Runnable对象作为初值赋给他们</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">R1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="sleep和interrupt方法"><a href="#sleep和interrupt方法" class="headerlink" title="sleep和interrupt方法"></a>sleep和interrupt方法</h2><blockquote>
<p>这两个方法是Thread类的静态方法，要使用Thread类调用。</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    T1 t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"按回车打断执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t1<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">T1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"谁打断了我！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="join方法"><a href="#join方法" class="headerlink" title="join方法"></a>join方法</h2><blockquote>
<p>用来保证执行多个任务的同时的任务的逻辑顺序合理，可理解为暂停当前线程，而调用执行别的线程，等待调用别的线程完成后在执行本线程的方法</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>
        <span class="token function">singleThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">multiTread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">singleThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>
    <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    T1 t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单例用时"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总共"</span> <span class="token operator">+</span> t1<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token string">"个质数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">multiTread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>
    <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    T1<span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T1</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T1</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">200000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//不能将join和star写在一个循环里面的原因是main线程执行时一旦join就不会在执行下一个线程的start方法了</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>T1 t1 <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sum <span class="token operator">+=</span> t1<span class="token punctuation">.</span>count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"多线程用时"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总共"</span> <span class="token operator">+</span> sum <span class="token operator">+</span> <span class="token string">"个质数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">T1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> count<span class="token punctuation">;</span>
    <span class="token keyword">int</span> from<span class="token punctuation">;</span>
    <span class="token keyword">int</span> to<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">T1</span><span class="token punctuation">(</span><span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            from <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>from <span class="token operator">=</span> from<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>to <span class="token operator">=</span> to<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> from<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> to<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                count<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//判定是否质数</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">double</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="SetDaemon方法"><a href="#SetDaemon方法" class="headerlink" title="SetDaemon方法"></a>SetDaemon方法</h2><blockquote>
<p>threadObj.setDamon(on/true)方法将线程设置为后台线程（即后台执行，jvm结束自动结束，java的垃圾回收就是一个后台线程）</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    T1 t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//匿名内部类继承Thread方法创建Thread实例对象</span>
    Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任意键打断"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            t1<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//设置为后台线程</span>
    t2<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">T1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String now <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"谁TM打断了我！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="同步锁"><a href="#同步锁" class="headerlink" title="同步锁"></a>同步锁</h2><blockquote>
<p>同步锁可以分为三种情况即1、对象同步锁2、方法同步锁3、类同步锁。</p>
</blockquote>
<ul>
<li><p>对同一个对象的数据操作，只要将操作对象的部分加上同步锁即可</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cArr <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'*'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token comment" spellcheck="true">//操作公共char数组对象，加上线程锁</span>
                  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>cArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                          cArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
                      <span class="token punctuation">}</span>
                  <span class="token punctuation">}</span>
                  c <span class="token operator">=</span> c <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">?</span> <span class="token string">'-'</span> <span class="token operator">:</span> <span class="token string">'*'</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token comment" spellcheck="true">//同样加锁</span>
                  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>cArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>cArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>普通类型没有锁，但是使用同一个对象，可为对象加锁（为操作数据的对象方法加锁） </p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  R1 r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">R1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> i <span class="token operator">=</span> r1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">R1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">//方法加锁</span>
  <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          i<span class="token operator">++</span><span class="token punctuation">;</span>
          i<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment" spellcheck="true">//方法加锁</span>
  <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用不同对象，但是对象都是同一个类，为类加锁（将操作数据的方法变成类方法，再加上同步锁）</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  R1 r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">R1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  R1 r2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">R1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> i <span class="token operator">=</span> r2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">R1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">//将方法变成类方法加上同步锁</span>
  <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          i<span class="token operator">++</span><span class="token punctuation">;</span>
          i<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="Object的await和notify-notifyAll方法"><a href="#Object的await和notify-notifyAll方法" class="headerlink" title="Object的await和notify/notifyAll方法"></a>Object的await和notify/notifyAll方法</h2><blockquote>
<p>在实际的使用过程中可能有多线程对同一对象数据操作的情况，但是虽然加了同步锁，但是还是会有时间片的浪费情况，这时就可使用生产者消费者模型，使用await/notify方法防止造成运算资源浪费。</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AwaitNotifyTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Stack s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Productor p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Productor</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        customer c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">customer</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        c<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                s<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//解耦合公共资源类型</span>
<span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
        index<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">5</span> <span class="token operator">==</span> index<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEnpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        index<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> cArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">==</span> index<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//生产者模型</span>
<span class="token keyword">class</span> <span class="token class-name">Productor</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> Stack s<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Productor</span><span class="token punctuation">(</span>Stack s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        s<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"压入&lt;&lt;"</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
                s<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//消费者模型</span>
<span class="token keyword">class</span> <span class="token class-name">customer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> Stack s<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">customer</span><span class="token punctuation">(</span>Stack s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">isEnpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        s<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"弹出>>"</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
                s<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>只有在synchronized关键字的代码块内才有监视器模型，才可以使用await/notify方法进行消息通知。</li>
<li>在判定公共资源为空第一次await之后，再次收到通知会，并得到cpu运算资源后后继续执行下边代码。这时就会出现没有再次判定公共资源是否可用的情况（除了生产者消费者的其他线程或多个消费者中的一个），因此在判定资源是否可用时，我们通常使用循环判定的方法。</li>
<li>资源监视器模型大概如下图所示,只有在synchronized对象下才有监视器，如果不在此对象代码块下使用await/notify方法，会报监视器错误。<br><img src="/images/sourceMonitor.png" alt="sourceMonitorModel"></li>
</ul>
<h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><p>1、get/setPriority([int num])获取当前线程的优先级。<br>2、yield()方法</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>对象常用方法</title>
    <url>/2020/12/21/dui-xiang-chang-yong-fang-fa/</url>
    <content><![CDATA[<h2 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a>hashCode方法</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> prime <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> x<span class="token punctuation">;</span>
    result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> y<span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> null<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    point other <span class="token operator">=</span> <span class="token punctuation">(</span>point<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> other<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">!=</span> other<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"point [x="</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">", y="</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><ul>
<li>字符串不可变，进行大规模拼接效率低,使用StringBuilder代替拼接。</li>
<li>字符串创建对象如果第一次会在常量池中创建，再次使用会引用相同的常量池的值。<pre class="line-numbers language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>
String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//false</span>
String s2 <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>String类型的运算也有编译优化，如果直接使用+号拼接，每一个+号会创建两个对象。<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//先创建一个StringBuffer然后拼接后再转成一个新的String对象</span>
String ss <span class="token operator">=</span> <span class="token string">"c"</span> <span class="token operator">+</span> <span class="token string">"c"</span><span class="token punctuation">;</span>
String sss <span class="token operator">=</span> <span class="token string">"cc"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//ss == sss =>true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>常见方法</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>常用css设置</title>
    <url>/2020/09/24/chang-yong-css-she-zhi/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>列举常见的css命令，用于特定的功能。</p>
<span id="more"></span>

<h2 id="文本用超过使用…表示"><a href="#文本用超过使用…表示" class="headerlink" title="文本用超过使用…表示"></a>文本用超过使用…表示</h2><p>1、单行显示省略号</p>
<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">selector</span><span class="token punctuation">{</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>
    <span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span>//使用省略号代替截断文字
    <span class="token property">white-space</span><span class="token punctuation">:</span>nowrap<span class="token punctuation">;</span>//不换行
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2、多行显示（适用于chrome内核的浏览器）</p>
<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">selector</span><span class="token punctuation">{</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>
    <span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span>-webkit-box<span class="token punctuation">;</span>//显示格式为弹性伸缩盒子
    <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span>vertical<span class="token punctuation">;</span>//元素内部排列方式
    <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">;</span>//显示的文本行数（非标准属性，与上面两个属性结合才可使用）
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="将元素设置为吸顶模式"><a href="#将元素设置为吸顶模式" class="headerlink" title="将元素设置为吸顶模式"></a>将元素设置为吸顶模式</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">selector</span><span class="token punctuation">{</span>
    <span class="token property">position</span><span class="token punctuation">:</span>sticky<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">z-index</span><span class="token punctuation">:</span><span class="token number">9999</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="将元素设置为内敛模式"><a href="#将元素设置为内敛模式" class="headerlink" title="将元素设置为内敛模式"></a>将元素设置为内敛模式</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">selector</span><span class="token punctuation">{</span>
    <span class="token property">box-sizing</span><span class="token punctuation">:</span>content-box<span class="token punctuation">;</span>默认
    <span class="token property">box-sizing</span><span class="token punctuation">:</span>border-box<span class="token punctuation">;</span>//设置为内敛模式
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css常用设置</tag>
      </tags>
  </entry>
  <entry>
    <title>常见css面试题</title>
    <url>/2021/04/10/chang-jian-css-mian-shi-ti/</url>
    <content><![CDATA[<h2 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h2><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><ul>
<li>css3的transform：translate函数和绝对定位实现<iframe id="cp_embed_GRrymZG" src="//codepen.io/hyong1232/embed/GRrymZG?height=360&theme-id=dark&slug-hash=GRrymZG&default-tab=css,result" scrolling="no" frameborder="no" height="360" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>

</li>
</ul>
<h3 id="border生成三角形"><a href="#border生成三角形" class="headerlink" title="border生成三角形"></a>border生成三角形</h3><ul>
<li>css的border通过控制border的宽高、颜色生成三角形<iframe id="cp_embed_yLgpobR" src="//codepen.io/hyong1232/embed/yLgpobR?height=360&theme-id=dark&slug-hash=yLgpobR&default-tab=css,result" scrolling="no" frameborder="no" height="360" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>

</li>
</ul>
<h3 id="关于伪类和为伪元素"><a href="#关于伪类和为伪元素" class="headerlink" title="关于伪类和为伪元素"></a>关于伪类和为伪元素</h3><blockquote>
<p>常见伪类和伪元素归纳,伪类的前面只有<strong>一个冒号</strong>，而伪元素则有<strong>两个冒号</strong>。</p>
</blockquote>
<ul>
<li><p>作用：选择一些指定的有特殊格式的元素。<br><img src="/images/pseudo-class.png" alt="伪类"></p>
</li>
<li><p>作用：创建指定的元素，但是这个元素不在页面的dom树结构中。<br><img src="/images/pseudo-element.png" alt="伪元素"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>常见面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>序列化</title>
    <url>/2021/03/14/xu-lie-hua/</url>
    <content><![CDATA[<h2 id="序列化用途及应用场景"><a href="#序列化用途及应用场景" class="headerlink" title="序列化用途及应用场景"></a>序列化用途及应用场景</h2><blockquote>
<p>序列化和反序列化是java为了使数据结构或对象转换成可取用格式（文本字节，缓存内容，或网络发送），以便可以实现数据存储和数据传输的一种方式。主要应用在<strong>数据存储</strong>和<strong>网络通讯</strong>（c/s）<br>1)序列化：将对象转换为字节的过程。<br>2)反序列化：将字节转换为对象的过程。</p>
</blockquote>
<p><strong>特别的</strong>:在当前软件行业中有时也会将对象转换为字符串的过程理解为序列化,例如将对象转换为json格式的字符串。</p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><blockquote>
<p>在对象的序列化的过程中，主要是实现<strong>Serializable接口</strong>或它的子类接口<strong>Externalizable接口</strong>来实现的。其中Externalizable接口需要自己指定需要序列化的成员变量。</p>
</blockquote>
<h3 id="实现implements-Serializable接口"><a href="#实现implements-Serializable接口" class="headerlink" title="实现implements Serializable接口"></a>实现implements Serializable接口</h3><ul>
<li><p>这种方式可以使用<strong>transient</strong>关键字来设置某些成员变量或结构不被序列化。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">transient</span> String gender<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>继承此接口可以不用设置序列化的版本，编译后会自动根据类名、接口名、成员方法及属性等来生成一个64位的哈希字段值作为版本号，如果后后面修改这个对象，有可能影响<strong>反序列化</strong>。</p>
</li>
<li><p>可以通过自定义要序列化的对象的readObject和writeObject，并在方法体内自定义加密方式的方法来进行序列化的加密。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//自定义解密过程</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>ObjectInputStream ois<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
  ois<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Decoder decoder <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decode <span class="token operator">=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//自定义加序列化加密过程</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span>ObjectOutputStream oos<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
  Encoder encoder <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encode <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  oos<span class="token punctuation">.</span><span class="token function">defaultWriteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p><strong>注意：</strong>方法名称参数需要同上一致，否则不成功调用方法。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * version 1
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 接口名、类名、成员方法等生成的64位哈希值
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 5462132935608928093L<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> String gender<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Student [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", gender="</span> <span class="token operator">+</span> gender <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> String gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> gender<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span>String gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\code\\java\\testDoc/test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"杰克"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\code\\java\\testDoc/test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Student rs <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">encodeSerialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">controlSerialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">controlSerialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\code\\java\\testDoc/test2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"露西"</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\code\\java\\testDoc/test2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Student ro <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ro<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">encodeSerialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\code\\java\\testDoc/test1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"杰克"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\code\\java\\testDoc/test1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Student ro <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ro<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="实现implements-Externalizable接口"><a href="#实现implements-Externalizable接口" class="headerlink" title="实现implements Externalizable接口"></a>实现implements Externalizable接口</h3><blockquote>
<p>实现Externalizable接口需要自定义要序列化的成员变量，重写readExternal和writeExternal方法，并在方法中指定要序列化的成员变量。</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ExterDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Externalizable</span><span class="token punctuation">{</span>
    
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String gender<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"ExterDemo [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token function">ExterDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">ExterDemo</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span>String gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//实现writerExternal方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeExternal</span><span class="token punctuation">(</span>ObjectOutput out<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//实现readExternal方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readExternal</span><span class="token punctuation">(</span>ObjectInput in<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExternalizableTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\code\\java\\testDoc/test2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExterDemo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"阳光"</span><span class="token punctuation">,</span><span class="token string">"沙滩"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\code\\java\\testDoc/test2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ExterDemo ro <span class="token operator">=</span> <span class="token punctuation">(</span>ExterDemo<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ro<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：</strong></p>
<ul>
<li>指定不同类的序列化成员变量的方法不同，int是readInt，String是readUTF等等。</li>
<li>在指定的方法时读写的方法要匹配，例如readByte就不能和writeUTF匹配。</li>
<li>如果声明了有参构造，必须声明无参构造，否则在进行序列化读取强转时会报错。</li>
</ul>
<p>控制序列化的粒度即控制对象内容是否序列化两种方式transient关键字和实现Externalizable接口。</p>
<h2 id="Jackson中的应用"><a href="#Jackson中的应用" class="headerlink" title="Jackson中的应用"></a>Jackson中的应用</h2><blockquote>
<p>使用jackson-databind中的ObjectMapper对象可以实现字符串与对象的转换等功能。</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">JsonDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 3327227108329210774L<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">JsonDemo</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">JsonDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getSerialversionuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> serialVersionUID<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"JsonDemo [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacksonTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        JsonDemo jd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonDemo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"皮特"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ObjectMapper om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String jds <span class="token operator">=</span> om<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>jd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jds<span class="token punctuation">)</span><span class="token punctuation">;</span>
        JsonDemo readValue <span class="token operator">=</span> om<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>jds<span class="token punctuation">,</span> JsonDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>readValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：</strong><br>1、如果声明了有参构造，必须声明无参构造，否则在进行序列化读取强转时会报错。<br>2、必须设置成员变量的getter/setter方法，否则writeValueAsString方法报错。</p>
<h2 id="hessian中的应用"><a href="#hessian中的应用" class="headerlink" title="hessian中的应用"></a>hessian中的应用</h2><blockquote>
<p>caucho公司的hessian4.0.6x版本</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>caucho<span class="token punctuation">.</span>hessian<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Hessian2Input<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>caucho<span class="token punctuation">.</span>hessian<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Hessian2Output<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Fruit</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * version 1
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 3120159858711792276L<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">Fruit</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Fruit [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HessianDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Fruit f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Hessian2Output h2o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hessian2Output</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\code\\java\\testDoc/hessianTetx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        h2o<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
        h2o<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        h2o<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Hessian2Input h2i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hessian2Input</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\\\code\\\\java\\\\testDoc/hessianTetx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Fruit ro <span class="token operator">=</span> <span class="token punctuation">(</span>Fruit<span class="token punctuation">)</span> h2i<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span>Fruit<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//        Fruit ro = (Fruit) h2i.readObject();</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ro<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象类</title>
    <url>/2020/12/21/chou-xiang-lei/</url>
    <content><![CDATA[<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>有abstract关键字，不一定有抽象方法==&gt;&gt;防止直接创建对象。</li>
<li>有抽象方法的，一定是抽象类</li>
<li>有构造方法（用于子类的创建），但不能创建实例，要实现方法的子类来创建实例</li>
<li>有些公共方法要实现，其他需要自定义</li>
</ul>
<p><strong>接口和抽象类的区别</strong><br>1、设计目的：接口只是定义规范和标准，而抽象类可以有具体的公共方法的实现（提高代码的复用）<br>2、变量：抽象类有成员变量/常量：public static final xxx = xxx;<br>3、构造函数：有构造方法（继承自object），但无法new对象/无构造方法<br>4、方法：可以没有抽象方法/都是抽象方法（1.8后允许定义非抽象方法）</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><blockquote>
<p>猜游戏</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试实例</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请选择猜游戏：1>猜数字，2>猜字母"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> inp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    GuessGame g<span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>inp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
        g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GuessLetterGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GuessNumberGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    g<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//抽象类</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">GuessGame</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">tishi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String rand <span class="token operator">=</span> <span class="token function">suijishu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"，猜："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String inp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>rand<span class="token punctuation">,</span> inp<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猜对了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">judge</span><span class="token punctuation">(</span>String rand<span class="token punctuation">,</span> String inp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">abstract</span> String <span class="token function">suijishu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">tishi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//实现子类1</span>
<span class="token keyword">class</span> <span class="token class-name">GuessNumberGame</span> <span class="token keyword">extends</span> <span class="token class-name">GuessGame</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">boolean</span> <span class="token function">judge</span><span class="token punctuation">(</span>String rand<span class="token punctuation">,</span> String inp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> r <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>rand<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>inp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> difference <span class="token operator">=</span> r <span class="token operator">-</span> i<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>difference <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>difference <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> r <span class="token operator">==</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    String <span class="token function">suijishu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">tishi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入1个1到100之间的数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//实现子类2</span>
<span class="token keyword">class</span> <span class="token class-name">GuessLetterGame</span> <span class="token keyword">extends</span> <span class="token class-name">GuessGame</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    String <span class="token function">suijishu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"abcdefghijkomnopqrstuvwxyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">26</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>
            <span class="token keyword">char</span> c <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>rand<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sb<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>rand<span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sb<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        sb<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">tishi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入五个字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">boolean</span> <span class="token function">judge</span><span class="token punctuation">(</span>String rand<span class="token punctuation">,</span> String inp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rand<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> inp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> inp<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        a<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        b<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        String result <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token string">"A"</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">"B"</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"5A0B"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>StringBuilder是线程不安全（没有线程锁），但效率高，StringBuffer反之</li>
<li>StringBuilder的setCharAt(index,char)替换String的指定下标的char值</li>
<li>StringBuilder的delete(start,end)删除String从start到下标end的值</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>class</tag>
      </tags>
  </entry>
  <entry>
    <title>接口和面向对象</title>
    <url>/2020/09/14/jie-kou-he-mian-xiang-dui-xiang/</url>
    <content><![CDATA[<h2 id="访问控制符"><a href="#访问控制符" class="headerlink" title="访问控制符"></a>访问控制符</h2><blockquote>
<p>作用及范围</p>
</blockquote>
<table>
<thead>
<tr>
<th>符号</th>
<th>本类</th>
<th>本包</th>
<th>子类</th>
<th>无限制</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>-</td>
</tr>
<tr>
<td>default</td>
<td>√</td>
<td>√</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>private</td>
<td>√</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
</tbody></table>
<blockquote>
<p>static关键字的使用时机：1.公用资源2.通用方法</p>
</blockquote>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><blockquote>
<p>常量+抽象方法<br>1、常量：在接口中定义的变量都是常量（自动加上public static final关键字）<br>2、抽象方法：自动加上（public abstract 关键字）</p>
</blockquote>
<ul>
<li>作用分离具体功能类和功能类——变形金刚和他的武器库，而使用功能类则为测试类。</li>
</ul>
<h2 id="面向对象OOP（Object-oriented-programming）"><a href="#面向对象OOP（Object-oriented-programming）" class="headerlink" title="面向对象OOP（Object-oriented programming）"></a>面向对象OOP（Object-oriented programming）</h2><blockquote>
<p>面向对象的三大原则——封装、继承、多态</p>
</blockquote>
<p>1、封装——类私有化——private</p>
<ul>
<li><p>构造方法—<strong>抽象类是有构造方法的，在实现他的子类创建对象的时候运行</strong>常用与给成员变量赋值</p>
</li>
<li><p>this指定当前对象的引用地址，构造方法之间的相互引用</p>
</li>
</ul>
<p>2、继承——子类继承父类功能，并扩展自己的功能<br>3、多态——子类重写了父类的方法，同一个父类不同的实现类。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>access-control-character</tag>
        <tag>interface</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库事务</title>
    <url>/2021/01/11/shu-ju-ku-shi-wu/</url>
    <content><![CDATA[<h2 id="释义"><a href="#释义" class="headerlink" title="释义"></a>释义</h2><blockquote>
<p>把多条语句作为一个整体进行操作的功能，被称为数据库事务。数据库事务可以确保该事务范围内的所有操作都可以全部成功或者全部失败。如果事务失败，那么效果就和没有执行这些SQL一样，不会对数据库数据有任何改动</p>
</blockquote>
<h2 id="特性-ACID"><a href="#特性-ACID" class="headerlink" title="特性(ACID)"></a>特性(ACID)</h2><h3 id="Atomic原子性"><a href="#Atomic原子性" class="headerlink" title="Atomic原子性"></a>Atomic原子性</h3><blockquote>
<p>指事物包含的sql操作不可以单独执行,要么全部执行,要么都不执行.</p>
</blockquote>
<h3 id="Consistent一致性"><a href="#Consistent一致性" class="headerlink" title="Consistent一致性"></a>Consistent一致性</h3><blockquote>
<p>指数据库的数据在一个事务执行完毕后一定是全部改变,或者没有改变,不存在只执行了数据库中的部分操作,改变部分数据的情况.</p>
</blockquote>
<h3 id="Isolation隔离性"><a href="#Isolation隔离性" class="headerlink" title="Isolation隔离性"></a>Isolation隔离性</h3><blockquote>
<p>不同事物之间是有隔离的,这在<strong>并发处理</strong>时很有作用.<br>事务的不同隔离级别会影响事物的执行,在隔离级别较低时,会产生脏读,幻读,不可重复读等数据获取不准确的情况.</p>
</blockquote>
<ul>
<li>隔离级别<table>
<thead>
<tr>
<th>jdbc级别</th>
<th>隔离级别(Isolation Level)</th>
<th>解释</th>
<th>脏读(Dirty Read)</th>
<th>不可重复读(Non Repeatable Read)</th>
<th>幻读(Phantom Read)</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>Read Uncommitted</td>
<td>级别最低,允许一个事务操作到正在事务处理中的数据(未提交的数据)</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>2</td>
<td>Read Committed</td>
<td>在进行事务操作时允许读取数据(查询数据(已提交的)第一次和第二次不一致–被事务修改了)</td>
<td>-</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>4</td>
<td>Repeatable Read</td>
<td>在进行事务操作时,允许另一事务同时操作数据库的插入(查某数据不存在,但插入失败,在查询已存在)</td>
<td>-</td>
<td>-</td>
<td>√</td>
</tr>
<tr>
<td>8</td>
<td>Serializable</td>
<td>串行操作数据,不会有数据不准确的情况,效率最低</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="Duration持久性"><a href="#Duration持久性" class="headerlink" title="Duration持久性"></a>Duration持久性</h3><blockquote>
<p>事务完成后修改会永久保存在磁盘上</p>
</blockquote>
<h2 id="mysql中事务"><a href="#mysql中事务" class="headerlink" title="mysql中事务"></a>mysql中事务</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#开启事务</span>
<span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#进行数据操作</span>
<span class="token comment" spellcheck="true">#提交或回滚(出现错误)</span>
<span class="token keyword">commit</span><span class="token punctuation">;</span> <span class="token operator">or</span> <span class="token keyword">rollback</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="jdbc测试"><a href="#jdbc测试" class="headerlink" title="jdbc测试"></a>jdbc测试</h2><blockquote>
<p>jdbc中关闭自动提交(默认执行一次提交一次,即一个sql为一个事务),然后手动提交</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>
    Statement stat <span class="token operator">=</span> null<span class="token punctuation">;</span>
    ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        conn <span class="token operator">=</span> JdbcUtil<span class="token punctuation">.</span><span class="token function">getConn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stat <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stat<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"update acc set money = money - 200 where id=2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//by Zero错误,会捕获到catch中,在catch中回滚数据不会改变</span>
        <span class="token keyword">int</span> i  <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>
        stat<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"update acc set money = money + 200 where id=1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rs <span class="token operator">=</span> stat<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">"select * from acc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行失败,回滚数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        JdbcUtil<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> stat<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>jdbc</tag>
        <tag>数据库事务</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2020/09/21/zheng-ze-biao-da-shi/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>正则表达式的基本含义，常用语法的总结</p>
<span id="more"></span>

<h2 id="基本写法"><a href="#基本写法" class="headerlink" title="基本写法"></a>基本写法</h2><p>1、基本正则字符</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>匹配字符</th>
<th>等同写法</th>
</tr>
</thead>
<tbody><tr>
<td>abc</td>
<td>abc</td>
<td>-</td>
</tr>
<tr>
<td>[abc]</td>
<td>a,b,c中的一个</td>
<td>-</td>
</tr>
<tr>
<td>[abc][123]</td>
<td>a1,b1,c1,a2,b2,c2,a3,b3,c3中的一个</td>
<td>-</td>
</tr>
<tr>
<td>[^a-zA-Z]</td>
<td>非英文字母</td>
<td>-</td>
</tr>
<tr>
<td>[\u4e00-\u9fa5]</td>
<td>所有中文</td>
<td>-</td>
</tr>
<tr>
<td>\d</td>
<td>数字</td>
<td>[0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>非数字</td>
<td>[^0-9]</td>
</tr>
<tr>
<td>\s</td>
<td>空白字符</td>
<td>-</td>
</tr>
<tr>
<td>\S</td>
<td>非空白字符</td>
<td>-</td>
</tr>
<tr>
<td>\w</td>
<td>单词字符（包含下划线）</td>
<td>[a-zA-Z_0-9]</td>
</tr>
<tr>
<td>\W</td>
<td>空白字符</td>
<td>-</td>
</tr>
<tr>
<td>.</td>
<td>任意字符</td>
<td>-</td>
</tr>
</tbody></table>
<p>2、匹配字符数量</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>匹配字符</th>
</tr>
</thead>
<tbody><tr>
<td>?</td>
<td>匹配1或0个字符</td>
</tr>
<tr>
<td>+</td>
<td>匹配起码&gt;=1个的字符</td>
</tr>
<tr>
<td>*</td>
<td>匹配任意数量字符</td>
</tr>
<tr>
<td>expression1|expression2</td>
<td>表达式1或表达式2成立都可算整个表达式成立</td>
</tr>
<tr>
<td>{num,}/{num}</td>
<td>指定匹配-大于num/num个字符（字符组合）</td>
</tr>
</tbody></table>
<ul>
<li>注意java的字符串中将/默认为转义字符，因此在定义正则时应该加双斜杠<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//错误</span>
String regex <span class="token operator">=</span> <span class="token string">"\d{3}|\(\d{4}\)\d{6}"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//正确</span>
String regex <span class="token operator">=</span> <span class="token string">"\\d{3}|\\(\\d{4}\\)\\d{6}"</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="常用api（主要在String类中使用）"><a href="#常用api（主要在String类中使用）" class="headerlink" title="常用api（主要在String类中使用）"></a>常用api（主要在String类中使用）</h2><p>1、String对象的api</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>释义</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>matches(regex)</td>
<td>字符和正则规则比较</td>
<td>Boolean值</td>
</tr>
<tr>
<td>split(regex,[limitnum])</td>
<td>按照正则规则切分字符，返回数组</td>
<td>切分的数组</td>
</tr>
<tr>
<td>replaceAll(regex,replacement)</td>
<td>替换字符串中所有符合规则的字符</td>
<td>替换后的字符串</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>类的内部加载顺序</title>
    <url>/2020/09/13/lei-de-jia-zai-shun-xu/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>String类&amp;局部/全局变量&amp;Array常见方法使用&amp;递归&amp;BufferReader/FileReader/FileWriter&amp;混合变量后的类加载顺序</p>
<span id="more"></span>

<h2 id="java类的加载过程"><a href="#java类的加载过程" class="headerlink" title="java类的加载过程"></a>java类的加载过程</h2><blockquote>
<p>总体来说分为三个部分，即加载、链接、初始化，而链接又分为验证、准备和解析三个阶段。</p>
</blockquote>
<p><img src="/images/classloaderProcess.png" alt="类加载过程"></p>
<h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><blockquote>
<p>加载二进制数据到内存 —&gt; 映射成jvm能识别的结构 —&gt; 在内存中生成class文件。</p>
</blockquote>
<ul>
<li>字节码文件来源：1、本地存储class文件。2、网络中的class文件</li>
<li>类加载器：1、启动类加载器、2、扩展类加载器。3、应用类加载器。4、自定义加载器（非本地加载资源or加密/解密）。</li>
</ul>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><blockquote>
<p>链接是指将上面创建好的class类合并至Java虚拟机中，使之能够执行的过程，可分为验证、准备、解析三个阶段。</p>
</blockquote>
<ul>
<li>验证：验证文件格式、元数据、字节码等，保证类符合虚拟机要求，不影响虚拟机的运行。</li>
<li>准备：为类变量（static修饰的）分配内存，并赋值（默认值：int-0,引用null）</li>
<li>解析：常量池中的符号引用（表示引用的字符串）===&gt;&gt;&gt;直接引用（内存地址/偏移量）</li>
</ul>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><blockquote>
<p>初始化static修饰的内容（若父类也有static修饰的内容限制性父类的内容）。</p>
</blockquote>
<h2 id="混合变量类加载顺序"><a href="#混合变量类加载顺序" class="headerlink" title="混合变量类加载顺序"></a>混合变量类加载顺序</h2><blockquote>
<p>Array.copyOf(original,newlength)<br>返回新数组，不改变原数组<br>新数组的长度可大于或小于原数组——&gt;数组的切割/增大容量</p>
</blockquote>
<blockquote>
<p>类加载<br>1、将父类加载到方法区，并为其静态变量分配内存空间<br>2、将子类加载到方法区，并为其静态变量分配内存空间<br>3、为父类的静态变量赋值&amp;执行父类静态代码块（无先后顺序）<br>4、为子类的静态变量赋值&amp;执行子类静态代码块（无先后顺序）</p>
</blockquote>
<blockquote>
<p>new新对象<br>5、在堆中创建父类对象，为父类成员变量分配内存<br>6、在堆中创建子类对象，为子类成员变量分配内存<br>7、为父类的成员变量赋值<br>8、执行父类的构造函数<br>9、为子类的成员变量赋值<br>10、执行子类的构造函数</p>
</blockquote>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><blockquote>
<p>类对象加载实例在静态对象申明前的两种解决办法：1、将静态声明提前or2、将声明改为非静态。</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> test<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">TC</span><span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">//    static HashMap&lt;String, String> map=new HashMap&lt;String, String>(); </span>
    <span class="token keyword">static</span> TC t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">public</span> <span class="token function">TC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"xixi"</span><span class="token punctuation">,</span><span class="token string">"xixi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"xixi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClassObj</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException <span class="token punctuation">{</span>
        Class <span class="token operator">&lt;</span>TC<span class="token operator">></span> t <span class="token operator">=</span> TC<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        ClassLoader classloader <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Class<span class="token operator">&lt;</span>TC<span class="token operator">></span> t1 <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>TC<span class="token operator">></span><span class="token punctuation">)</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"test.TC"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>classloader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>eclipse查看类加载的顺序</strong> ==&gt;&gt;在run configuration中的arguments中添加<strong>-XX:+TraceClassLoding</strong>代码，即可在控制台看到打印的输出。</p>
<p>binarySearch+ArrayList？？？</p>
<h2 id="字节码对象"><a href="#字节码对象" class="headerlink" title="字节码对象"></a>字节码对象</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>1、一个jvm中只有一个相同的类对象<br>2、加载类对象可能执行静态方法（取决于classloader的读取方式）<br>3、加载类对象可能执行静态属性（取决于classloader的读取方式）</p>
<pre class="line-numbers language-java"><code class="language-java">ClassLoader classloader <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> t1 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"test.TC"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>classloader<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//forName的第二个参数为true表示加载时执行静态方法，默认为true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>ClassLoader是jdk提供的标准，mybatis和tomcat均有自己的实现，</p>
<h3 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h3><p>1、Class.forName(完整包路径)<br>2、实例.getClass()<br>3、类.class</p>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ul>
<li><?>在不能确定类型时使用

</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>因为String路径在编译阶段不能确定是否正确，已经他的具体类型，因此要使用&lt;?&gt;。</p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><blockquote>
<p>对象：属性私有化，方法能公开就公开<br>设计：一个mybatis要哪些对象？Connector+DataSource+pooled….</p>
</blockquote>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><blockquote>
<p>继承规则，<strong>扩展</strong>特性内容。例如简易缓存淘汰实现。</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> test<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedHashMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">LruCache</span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">{</span>
    
    <span class="token keyword">private</span> <span class="token keyword">int</span> maxCap<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">LruCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxCap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>maxCap<span class="token punctuation">,</span><span class="token number">0.75f</span> <span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxCap <span class="token operator">=</span> maxCap<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxCap <span class="token operator">&lt;</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LruCacheDemo</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asfsfds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        LruCache l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LruCache</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        l<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        l<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        l<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        l<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        l<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="类加载一定会执行静态代码块？"><a href="#类加载一定会执行静态代码块？" class="headerlink" title="类加载一定会执行静态代码块？"></a>类加载一定会执行静态代码块？</h3><blockquote>
<p>不一定，看类加载的方式。Class.forName(类名称)和new 对象是一定会执行static代码块的。而通过类名调用静态资源时，只调用了父类则只会执行静态代码块。如果调用了子类则子类父类的静态代码块都会执行。</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testClassLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//>>>A...B...</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> B<span class="token punctuation">.</span>a<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//>>>A...</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> B<span class="token punctuation">.</span>b<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//>>>A...B...</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"test.B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//>>>A...B...</span>
        ClassLoader scl <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"test.B"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>scl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//>>>A...B...</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> b <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//>>>无内容</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>dip<br>ocp</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>class</tag>
        <tag>String</tag>
        <tag>fileOperation</tag>
        <tag>Arrays</tag>
      </tags>
  </entry>
  <entry>
    <title>面试</title>
    <url>/2021/04/13/mian-shi/</url>
    <content><![CDATA[<h3 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h3><blockquote>
<p>js闭包、原型链、vue原理、词法分析AO、http缓存、性能优化、bfc、es6语法</p>
</blockquote>
<h3 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h3><blockquote>
<p>1、创建AO（active object）对象<br>2、将函数的参数添加至AO并赋值<br>3、将函数中的变量提升添加至AO，并赋初值，默认初值undefined==》》忽略重复声明<br>4、将函数声明添加值AO<br>5、执行函数中的立即执行函数</p>
</blockquote>
<h3 id="闭包："><a href="#闭包：" class="headerlink" title="闭包："></a>闭包：</h3><blockquote>
<p>局部变量私有化，并可以通过函数来访问私有化的变量</p>
</blockquote>
<p>特点：<br>1、私有化的变量不会被gc处理掉，因为js的链式作用域chain scope，返回的函数依赖这个属性。<br>2、私有化的变量只能被返回的闭包函数访问。</p>
<h3 id="原型链："><a href="#原型链：" class="headerlink" title="原型链："></a>原型链：</h3><p>new 关键字新建对象自动调用protorype属性对象，这里存储着公用的属性或方法。</p>
<h3 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h3><p>1、没有class，用new+this创建实例，自动调用prototype对象（获取公共方法、属性）<br>2、Javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承<br>3、判定：</p>
<ul>
<li>实例 instanceof 类型||实例.prototype.isProtorypeOf(实例)</li>
<li>实例属性==》》实例.hasOwnProperty(属性名称)||属性 in 实例==》》boolean，+for还可以遍历实例属性==》》for 属性 in 实例</li>
</ul>
<p>4、继承的5种方法：</p>
<ul>
<li>1&gt;call/apply调用父类构造函数==&gt;&gt;父类.apply(子类,arguments)</li>
<li>2&gt;替换子类的prototype–》》添加父类的公共属性/方法到子类–》》会改变子类的构造函数constructor–》》手动修改–》》实例新建会调用prototype的constructor（只想构造函数），总结：<br>  　p.prototype = {};　p.prototype.constructor = p;</li>
<li>3&gt;子类的prototype替换成父类的===》》子类和父类的prototype都指向父类，修改子类的constructor会修改父类的。</li>
<li>4&gt;在子类prototype替换成，prototype是父类的空函数的新建对象。<pre class="line-numbers language-js"><code class="language-js">　　<span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span>Child<span class="token punctuation">,</span> Parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
　　<span class="token keyword">var</span> F <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
　　F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
　　Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
　　Child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child<span class="token punctuation">;</span>
　　Child<span class="token punctuation">.</span>uber <span class="token operator">=</span> Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>5&gt;拷贝父类的prototype属性值到父类。<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">extend2</span><span class="token punctuation">(</span>Child<span class="token punctuation">,</span> Parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
　　<span class="token keyword">var</span> p <span class="token operator">=</span> Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
　　<span class="token keyword">var</span> c <span class="token operator">=</span> Child<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
　　<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
　　　　c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
　　　　<span class="token punctuation">}</span>
　　c<span class="token punctuation">.</span>uber <span class="token operator">=</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>6&gt;非构造函数的继承：<br>  1.空function返回有父类prototype的对象，然后自定义添加这个对象即可。<br>  2.遍历添加父类的所有属性：<pre class="line-numbers language-js"><code class="language-js">浅拷贝：
<span class="token keyword">function</span> <span class="token function">extendCopy</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
　　<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
　　<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
　　　　c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
　　<span class="token punctuation">}</span>
　　c<span class="token punctuation">.</span>uber <span class="token operator">=</span> p<span class="token punctuation">;</span>
　　<span class="token keyword">return</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-js"><code class="language-js"><span class="token function">深拷贝</span><span class="token punctuation">(</span>递归浅拷贝<span class="token punctuation">)</span>：
<span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> c <span class="token operator">=</span> c <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
            <span class="token function">deepCopy</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> c
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h3><blockquote>
<p>简单来说可以分成创建、运行、销毁三个阶段</p>
</blockquote>
</li>
</ul>
<h4 id="创建："><a href="#创建：" class="headerlink" title="创建："></a>创建：</h4><ul>
<li>new 一个vue对象会初始化vue对象默认的事件、属性和生命周期函数—-beforeCreate</li>
<li>初始化data和methods中的函数，完成后进入—-create（data和methods初始化完成）</li>
<li>查找el属性或$mount(el)方法，然后将template通过render渲染函数渲染成虚拟dom节点，保存在内存中—-beforeMount</li>
<li>将渲染好的虚拟dom节点替换到浏览器的dom中—–mount<h4 id="运行："><a href="#运行：" class="headerlink" title="运行："></a>运行：</h4></li>
<li>data中的属性改变时—-beforeUpdate</li>
<li>重新渲染内存中的虚拟dom，完成后替换页面dom—-update（此时页面数据已经同步）<h4 id="销毁："><a href="#销毁：" class="headerlink" title="销毁："></a>销毁：</h4></li>
<li>调用了$destroy函数，此时methods和data及其他属性、函数均可用—-beforeDestroy</li>
<li>销毁vue对象所有数据、方法、属性、过滤器等等—destroy（不可用vue特性）<br><img src="/images/vueCreateProcess.png" alt="vue生命周期图"></li>
</ul>
<h3 id="vue兄弟组件传值"><a href="#vue兄弟组件传值" class="headerlink" title="vue兄弟组件传值"></a>vue兄弟组件传值</h3><blockquote>
<p>利用vue的$on接收信息和$emit触发信息==》》》新建一个vue对象，将其添加到vue的原型对象上即可。</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//main.js 全局注册</span>
Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//brother one</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'sendMessage'</span><span class="token punctuation">,</span>message<span class="token punctuation">:</span>Object<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//brother two</span>
<span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'sendMessage'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span>Object<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">do</span> something <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="http缓存"><a href="#http缓存" class="headerlink" title="http缓存"></a>http缓存</h3><h4 id="cache-control"><a href="#cache-control" class="headerlink" title="cache-control"></a>cache-control</h4><blockquote>
<p>用于控制缓存的支持情况，请求响应头都支持这个属性设置。</p>
</blockquote>
<table>
<thead>
<tr>
<th>cache常用设置字段</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>no-store</td>
<td>缓存不存储任何请求/响应相关的内容，客户端每次下载完整响应内容</td>
</tr>
<tr>
<td>no-cache</td>
<td>客户端请求时，缓存会向服务器确认是否缓存可用，可用则直接返回缓存，不可用就重新请求</td>
</tr>
<tr>
<td>private/public</td>
<td>设置请求的响应是否可以被中间代理、CDN或其他中介缓存</td>
</tr>
<tr>
<td>max-age=<seconds></td>
<td>设置缓存的有效时间</td>
</tr>
<tr>
<td>must-revalidate</td>
<td>使用缓存必须要校验是否可用</td>
</tr>
</tbody></table>
<p><strong>pragma</strong>属性，功能与cache-control类似，主要用来向后兼容HTTP1.0协议</p>
<h4 id="新鲜度"><a href="#新鲜度" class="headerlink" title="新鲜度"></a>新鲜度</h4><blockquote>
<p>总结来讲就是缓存的内容空间是有限的，在不断有新的内容需要缓存的前提下，缓存设立新鲜度，替换老旧的缓存内容。<br>注意：<strong>不会自动清除旧缓存</strong>，而是客户端请求相同内容时，会发送If-None-Match头确认缓存是否继续可用,可用返回304，否则重新请求并缓存请求结果。</p>
</blockquote>
<p><img src="/images/HTTPStaleness.png" alt="新鲜度判定图"></p>
<ul>
<li>对于含有特定头信息的请求，会去计算缓存寿命。比如Cache-control: max-age=N的头，相应的缓存的寿命就是N。通常情况下，对于不含这个属性的请求则会去查看是否包含Expires属性，通过比较Expires的值和头里面Date属性的值来判断是否缓存还有效。如果max-age和expires属性都没有，找找头里的Last-Modified信息。如果有，缓存的寿命就等于头里面Date的值减去Last-Modified的值除以10（注：根据rfc2626其实也就是乘以10%）</li>
</ul>
<blockquote>
<p>expirationTime = responseTime + freshnessLifetime - currentAge</p>
</blockquote>
<h4 id="改进资源"><a href="#改进资源" class="headerlink" title="改进资源"></a>改进资源</h4><blockquote>
<p>设定不常变动（js/css）的缓存资源加版本号缓存，常变（html）动资源改变即可。</p>
</blockquote>
<p><img src="/images/HTTPRevved.png" alt="改进资源图"></p>
<h4 id="vary"><a href="#vary" class="headerlink" title="vary"></a>vary</h4><blockquote>
<p>给缓存的内容加一个校验规则,当请求和缓存内容相同且vary一直且在有效期内才使用缓存，否则向服务器发起请求并缓存请求内容。</p>
</blockquote>
<p><img src="/images/HTTPVary.png" alt="vary缓存校验"></p>
<ul>
<li>vary:user-agent用于区分不同的用户客户端的内容，避免不同设备的适配问题。</li>
</ul>
<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ul>
<li>transform和opacity实现动画效果</li>
<li>使用弹性布局flex</li>
<li>不覆盖js原生方法</li>
<li>多用位操作</li>
<li>使用web worker</li>
<li>requestAnimationFrame优化视觉效果</li>
<li>使用switch代替多个if/else条件判定</li>
<li>事件委托代替逐个监听（利用js冒泡监听公共父级元素）</li>
<li>减少dom重绘和重排（避免删除，改变dom元素，使用css方法修改样式）<br>重排和重绘这两个操作都是非常昂贵的，因为 JavaScript 引擎线程与 GUI 渲染线程是互斥，它们同时只能一个在工作。</li>
<li>webpack按需加载库文件</li>
<li>css代替动画/图片效果</li>
<li>iconfont字体代替图片图标</li>
<li>减少不必要的http请求，利用http协议缓存cache-control控制资源重复加载</li>
<li>css放在html头部，js放在底部（先GUI渲染，然后执行js脚本）</li>
<li>静态资源CDN加速</li>
</ul>
<h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><blockquote>
<p>BFC官方定义实在抽象，我的理解是就是一个css属性，添加了这个属性那么这个模块内的内容就不受页面的普通流布局影响。</p>
</blockquote>
<h4 id="常见bfc触发方式："><a href="#常见bfc触发方式：" class="headerlink" title="常见bfc触发方式："></a>常见bfc触发方式：</h4><table>
<thead>
<tr>
<th>元素</th>
<th>设置的值</th>
</tr>
</thead>
<tbody><tr>
<td>html根元素</td>
<td>-</td>
</tr>
<tr>
<td>浮动元素</td>
<td>float的值不为none</td>
</tr>
<tr>
<td>绝对定位的元素</td>
<td>position为absolute或fixed</td>
</tr>
<tr>
<td>行内元素</td>
<td>display为inline-box</td>
</tr>
<tr>
<td>表格元素</td>
<td>table、table-cell、table-row、table-caption、table-footer-group、table-row-group、table-header-group、inline-table</td>
</tr>
<tr>
<td>overflow</td>
<td>不为visible</td>
</tr>
<tr>
<td>弹性和网格布局</td>
<td>flex、inline-flex、grid、inline-grid</td>
</tr>
</tbody></table>
<h4 id="bfc解决常见的css布局问题："><a href="#bfc解决常见的css布局问题：" class="headerlink" title="bfc解决常见的css布局问题："></a>bfc解决常见的css布局问题：</h4><ul>
<li><p>上下相邻margin合并</p>
</li>
<li><p>float浮动导致父元素高度坍塌<br>解决方案：<br>  1、使用伪元素::after–&gt;</p>
<pre class="line-numbers language-css"><code class="language-css">    <span class="token selector">&amp;<span class="token pseudo-element">:after</span></span><span class="token punctuation">{</span>
        <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span>
        <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  2、浮动父元素，使之脱离文档流<br>  3、添加空标签清楚浮动or固定父元素的高度</p>
</li>
<li><p>浮动元素遮挡兄弟元素内容</p>
</li>
<li><p>布局内容溢出，导致环绕布局</p>
</li>
</ul>
<h3 id="es6问题"><a href="#es6问题" class="headerlink" title="es6问题"></a>es6问题</h3><h4 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h4><blockquote>
<p>宏队列：promise和MutationObserver，宏队列：dom回调，定时/延时器和ajax回调</p>
</blockquote>
<p><img src="/images/jsCallbackExecte.png" alt="js函数回调执行顺序图"></p>
<h4 id="for-of-与for-in的区别"><a href="#for-of-与for-in的区别" class="headerlink" title="for of 与for in的区别"></a>for of 与for in的区别</h4><blockquote>
<p>for of是为了解决for循环的繁琐、forEach不能continue/break、for in遍历所有可枚举属性（原型链上、数组属性-[].a = 1）的缺点设计出来的，可以遍历所有可迭代对象（有iterator或[symbol.iterator]属性）,例如map、set、arguments、string、DomNode。</p>
</blockquote>
<h4 id="重排和重绘"><a href="#重排和重绘" class="headerlink" title="重排和重绘"></a>重排和重绘</h4><blockquote>
<p>重排：dom元素的几何属性被改变的时候（w、h、margin、border）<br>重绘：dom元素的显示属性发生改变的时候（color、background、box-shadow）</p>
</blockquote>
<ul>
<li><p>避免重绘：<br>1、减少使用直接修改dom几何属性，改用css实现————display:none操作完成再block回来visibility:hidden<br>  display脱离文档流，visibility不显示不脱离文档流，opacity显示颜色为透明</p>
<table>
<thead>
<tr>
<th>区别\属性</th>
<th>display:none</th>
<th>visibility:hidden</th>
<th>opacity:0</th>
</tr>
</thead>
<tbody><tr>
<td>是否占据页面空间</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>是否影响子元素</td>
<td>√</td>
<td>×(设置visibility:visible)</td>
<td>√</td>
</tr>
<tr>
<td>是否产生回流</td>
<td>√</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td>是否影响自身绑定事件触发</td>
<td>√</td>
<td>√</td>
<td>×</td>
</tr>
</tbody></table>
</li>
</ul>
<p>2、批量操作重排操作（浏览器自动放置到渲染队列），不要穿插执行js任务（先执行渲染队列内容）<br>3、让需要频繁修改的dom脱离文档流，触发bfc<br><strong>重排一定重绘，重绘不一定重排</strong></p>
<h3 id="css问题"><a href="#css问题" class="headerlink" title="css问题"></a>css问题</h3><h4 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h4><blockquote>
<p>box、bgroup、article===》》》padding+margin+content === 盒子大小</p>
</blockquote>
<ul>
<li>ie和模型:box-sizing:content-box;</li>
<li>标准和模型：box-sizing:border-box;</li>
</ul>
<h4 id="页面不流畅"><a href="#页面不流畅" class="headerlink" title="页面不流畅"></a>页面不流畅</h4><ul>
<li>网络延迟===》》缓存</li>
<li>动画卡顿===》》requestAnimationFrame：将代码放到下一次重新渲染时执行。<br>  （FPs）帧：1s内重新渲染的次数，24帧人眼就感觉特别明显，30~60合格，越高越好，主流显示器60帧，这就要求每次页面渲染完成的时间不能超过100/60 = 16.67毫秒，意味着JavaScript线程每个任务的耗时，<strong>必须少于16毫秒</strong>。<br>  实例1：大量重排渲染<pre class="line-numbers language-js"><code class="language-js">elements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> ow <span class="token operator">=</span> e<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width
    window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span>  ow
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
  实例2：scroll时间监听<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//第三个参数true为捕获阶段处理，false冒泡阶段处理，默认冒泡</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>handler<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
  实例3：动画<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> rAF <span class="token operator">=</span> window<span class="token punctuation">.</span>requestAnimationFrame
<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token string">`rotate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token operator">++</span>reg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">deg)`</span></span>
    <span class="token function">rAF</span><span class="token punctuation">(</span>upate<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">rAF</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
  参考资料：<a href="https://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html">网页性能管理详解-阮一峰的网络博客</a></li>
</ul>
<h3 id="节流和防抖"><a href="#节流和防抖" class="headerlink" title="节流和防抖"></a>节流和防抖</h3><blockquote>
<p>相同点：节流和防抖都是在通过降低回调执行的频次，节省计算资源。<br>不同点：节流是在一段时间内只执行一次，防抖是只关心最后一次的执行情况。</p>
</blockquote>
<ul>
<li><p>节流实现</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//节流实现1</span>
<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>deplay<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">let</span> preTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">-</span> pretime <span class="token operator">></span> deplay<span class="token punctuation">)</span><span class="token punctuation">{</span>
          preTime <span class="token operator">=</span> now
          <span class="token comment" spellcheck="true">//do something</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//节流实现2</span>
<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span>
          timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
              <span class="token comment" spellcheck="true">//do something...</span>
              timer <span class="token operator">=</span> <span class="token keyword">null</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//定时执行</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>threshold<span class="token punctuation">)</span><span class="token punctuation">,</span>threshold<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>防抖实现</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">debunce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">//do something...</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><h3 id="watch-和computed区别"><a href="#watch-和computed区别" class="headerlink" title="watch 和computed区别"></a>watch 和computed区别</h3><blockquote>
<p>watch实际上就是观察者模式，把变量放置到观察者收集器中，变量值得变化可以被通知到，它接收两个参数，一个newValue一个oldValue，可选则添加immediate立即启用，deep深度（适用于watch对象）。</p>
</blockquote>
<ul>
<li>应用场景：自己的改变会影响到其他数据。</li>
</ul>
<blockquote>
<p>computed实际上就是将数据的getter重写成了自定义函数，相当于实现了数据劫持，会缓存计算结果，无论props还是data的属性值都可以作为计算属性的依赖值。</p>
</blockquote>
<ul>
<li>应用场景：依赖数据的改变会影响计算的结果。</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM框架整合</title>
    <url>/2021/02/21/ssm-kuang-jia-zheng-he/</url>
    <content><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote>
<p>配置路径：添加WEB-INF/web.xml文件，配置springmvc-config.xml和applicationContext.xml配置mybatis-config.xml,配置对应Mapper.xml文件</p>
</blockquote>
<h3 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h3><blockquote>
<p>主要配置四个地方：tomcat的默认servlet匹配静态资源、资源编码CharacterEncodingFilter、DispatcherServlet以及默认错误页面</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
    <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span>
    <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>yonghe-ssm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>default.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>default.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>default.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 默认错误处理页面 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/WEB-INF/pages/error.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/WEB-INF/pages/error.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- DispatcherServlet配置 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- 配置对应mvc其他配置的位置，整合spring的配置文件 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:spring/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 默认servlet配置静态资源访问 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.gif<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.svg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 字符编码CharacterEncodingFilter配置 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置spring文件"><a href="#配置spring文件" class="headerlink" title="配置spring文件"></a>配置spring文件</h3><blockquote>
<p>主要有两个文件spring的配置文件applicatoinContext和springMVC的配置文件springMVC-config的文件</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml">+ springmvc-config.xml
<span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/context
                          http://www.springframework.org/schema/context/spring-context-4.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    
    <span class="token comment" spellcheck="true">&lt;!-- 1.配置前端控制器放行静态资源(html/css/js等，否则静态资源将无法访问) --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 2.启用默认配置, 配置注解驱动，用于识别注解（比如@Controller） --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 3.配置需要扫描的包：spring自动去扫描 base-package 下的类，
        如果扫描到的类上有 @Controller、@Service、@Component等注解，
        将会自动将类注册为bean 
     --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tedu.controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 4.配置内部资源视图解析器
        prefix:配置路径前缀
        suffix:配置文件后缀
     --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>                    
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>applicationContext.xml<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
  http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd 
  http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
  http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- 引入jdbc的属性文件 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- 将SqlSessionFactory的创建交给spring完成 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis/mybatis-config.xml<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis/Mapper/*.xml<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- druid连接池对象配置 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${driverClassName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- 定义mapper接口扫描器
      如果bean标签上没有id,默认id值是当前类的类名,首字母小写
      扫描 com.tedu.dao包下的所有接口,由框架负责提供接口的子类
      由spring容器负责创建接口的子类实例(spring会将创建好的接口子类实例存到map中)
   --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!-- 扫描所有XxxMapper接口，将接口实例的创建交给spring容器 --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> 
          <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tedu.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- 同上，service接口扫描器 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>service<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="配置mybatis"><a href="#配置mybatis" class="headerlink" title="配置mybatis"></a>配置mybatis</h3><ul>
<li><p>mybatis-config.xml</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype">&lt;!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd"></span>
<span class="token comment" spellcheck="true">&lt;!-- MyBatis的全局配置文件 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- 将开发环境配置和导入mapper文件的配置移除,在spring的配置文件中进行配置 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>mapper配置模板</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype">&lt;!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span>
<span class="token comment" spellcheck="true">&lt;!-- 门店表的映射文件    namespace值为对应接口的全路径 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tedu.dao.DoorMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- 1.查询所有门店信息，id值为对应接口中方法的名字
      resultType指定将查询的结果封装到哪个pojo对象中
   --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tedu.pojo.Door<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      select * from tb_door
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- 2.根据id删除门店信息 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteById<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      delete from tb_door where id=#{id}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- 3.新增门店信息 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      insert into tb_door value
      (null,#{name},#{tel},#{addr})
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- 4.根据id查询门店信息 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tedu.pojo.Door<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      select * from tb_door where id=#{id}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- 5.根据id修改门店信息 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateById<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      update tb_door set name=#{name},
      tel=#{tel},addr=#{addr}
      where id=#{id}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote>
<p>使用要新建pojo下的实例和mapper对应的sql文件dao下的对应文件，然后新建service对应接口以及实现类，最后在controller类中调用对应的service实现类的方法即可。</p>
</blockquote>
</li>
</ul>
<h3 id="contoller类"><a href="#contoller类" class="headerlink" title="contoller类"></a>contoller类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> controller<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>propertyeditors<span class="token punctuation">.</span>CustomDateEditor<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>Model<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>ServletRequestDataBinder<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>InitBinder<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> pojo<span class="token punctuation">.</span>Door<span class="token punctuation">;</span>
<span class="token keyword">import</span> pojo<span class="token punctuation">.</span>Order<span class="token punctuation">;</span>
<span class="token keyword">import</span> service<span class="token punctuation">.</span>DoorServiceImpl<span class="token punctuation">;</span>
<span class="token keyword">import</span> service<span class="token punctuation">.</span>OrderServiceImpl<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> OrderServiceImpl orderServ<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> DoorServiceImpl doorServ<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orderList"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">orderList</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>Order<span class="token operator">></span> ol <span class="token operator">=</span> orderServ<span class="token punctuation">.</span><span class="token function">orderFindAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>Door<span class="token operator">></span> dl <span class="token operator">=</span> doorServ<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">,</span>ol<span class="token punctuation">)</span><span class="token punctuation">;</span>
        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"dl"</span><span class="token punctuation">,</span>dl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"order_list"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orderUpdate"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">orderUpdate</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        orderServ<span class="token punctuation">.</span><span class="token function">orderUpdateById</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"forward:/orderList"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toOrderAdd"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">toOrderAdd</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>Door<span class="token operator">></span> list <span class="token operator">=</span> doorServ<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"door"</span><span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"order_add"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orderInfo"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">orderInfo</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Order ol <span class="token operator">=</span> orderServ<span class="token punctuation">.</span><span class="token function">orderFindById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>Door<span class="token operator">></span> dl <span class="token operator">=</span> doorServ<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"ol"</span><span class="token punctuation">,</span>ol<span class="token punctuation">)</span><span class="token punctuation">;</span>
        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"dl"</span><span class="token punctuation">,</span>dl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"order_update"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orderDelete"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">orderDelete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        orderServ<span class="token punctuation">.</span><span class="token function">orderDeleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"redirect:/orderList"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orderAdd"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">orderAdd</span><span class="token punctuation">(</span>Order order<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Integer rows <span class="token operator">=</span> orderServ<span class="token punctuation">.</span><span class="token function">orderAdd</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">orderList</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@InitBinder</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">InitBinder</span><span class="token punctuation">(</span>ServletRequestDataBinder binder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        binder<span class="token punctuation">.</span><span class="token function">registerCustomEditor</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">CustomDateEditor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="service类"><a href="#service类" class="headerlink" title="service类"></a>service类</h3><ul>
<li><p>接口</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> service<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> pojo<span class="token punctuation">.</span>Order<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">orderFindAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> Order <span class="token function">orderFindById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> Integer <span class="token function">orderDeleteById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> Integer <span class="token function">orderUpdateById</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> Integer <span class="token function">orderAdd</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>实现类</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> service<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span>
<span class="token keyword">import</span> dao<span class="token punctuation">.</span>OrderMapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> pojo<span class="token punctuation">.</span>Order<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Autowired</span>
  <span class="token keyword">private</span> OrderMapper dao<span class="token punctuation">;</span>
  
  <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">orderFindAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      List<span class="token operator">&lt;</span>Order<span class="token operator">></span> list <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">orderFindById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> list<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> Order <span class="token function">orderFindById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Order list <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">orderFindById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> list<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> Integer <span class="token function">orderDeleteById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Integer rows <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">orderDeleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> rows<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> Integer <span class="token function">orderUpdateById</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Integer rows <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">orderUpdateById</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> rows<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> Integer <span class="token function">orderAdd</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Integer rows <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">orderAdd</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> rows<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="dao对应接口"><a href="#dao对应接口" class="headerlink" title="dao对应接口"></a>dao对应接口</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> controller<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>propertyeditors<span class="token punctuation">.</span>CustomDateEditor<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>Model<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>ServletRequestDataBinder<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>InitBinder<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> pojo<span class="token punctuation">.</span>Door<span class="token punctuation">;</span>
<span class="token keyword">import</span> pojo<span class="token punctuation">.</span>Order<span class="token punctuation">;</span>
<span class="token keyword">import</span> service<span class="token punctuation">.</span>DoorServiceImpl<span class="token punctuation">;</span>
<span class="token keyword">import</span> service<span class="token punctuation">.</span>OrderServiceImpl<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Autowired</span>
  <span class="token keyword">private</span> OrderServiceImpl orderServ<span class="token punctuation">;</span>
  <span class="token annotation punctuation">@Autowired</span>
  <span class="token keyword">private</span> DoorServiceImpl doorServ<span class="token punctuation">;</span>
  
  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orderList"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> String <span class="token function">orderList</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      List<span class="token operator">&lt;</span>Order<span class="token operator">></span> ol <span class="token operator">=</span> orderServ<span class="token punctuation">.</span><span class="token function">orderFindAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      List<span class="token operator">&lt;</span>Door<span class="token operator">></span> dl <span class="token operator">=</span> doorServ<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">,</span>ol<span class="token punctuation">)</span><span class="token punctuation">;</span>
      model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"dl"</span><span class="token punctuation">,</span>dl<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token string">"order_list"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orderUpdate"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> String <span class="token function">orderUpdate</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      orderServ<span class="token punctuation">.</span><span class="token function">orderUpdateById</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token string">"forward:/orderList"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toOrderAdd"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> String <span class="token function">toOrderAdd</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      List<span class="token operator">&lt;</span>Door<span class="token operator">></span> list <span class="token operator">=</span> doorServ<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"door"</span><span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token string">"order_add"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orderInfo"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> String <span class="token function">orderInfo</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Order ol <span class="token operator">=</span> orderServ<span class="token punctuation">.</span><span class="token function">orderFindById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
      List<span class="token operator">&lt;</span>Door<span class="token operator">></span> dl <span class="token operator">=</span> doorServ<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"ol"</span><span class="token punctuation">,</span>ol<span class="token punctuation">)</span><span class="token punctuation">;</span>
      model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"dl"</span><span class="token punctuation">,</span>dl<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token string">"order_update"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orderDelete"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> String <span class="token function">orderDelete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      orderServ<span class="token punctuation">.</span><span class="token function">orderDeleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token string">"redirect:/orderList"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orderAdd"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> String <span class="token function">orderAdd</span><span class="token punctuation">(</span>Order order<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Integer rows <span class="token operator">=</span> orderServ<span class="token punctuation">.</span><span class="token function">orderAdd</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">orderList</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token annotation punctuation">@InitBinder</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">InitBinder</span><span class="token punctuation">(</span>ServletRequestDataBinder binder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      binder<span class="token punctuation">.</span><span class="token function">registerCustomEditor</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
              <span class="token keyword">new</span> <span class="token class-name">CustomDateEditor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="mapper对应xml"><a href="#mapper对应xml" class="headerlink" title="mapper对应xml"></a>mapper对应xml</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype">&lt;!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao.OrderMapper<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cols<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>o.id,door_id doorId,order_no orderNo,order_type orderType,pnum,cashier,order_time orderTime,pay_time payTime,pay_type payType,price<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderFindById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Order<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cols<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> from tb_order o left join tb_door d on o.door_id=d.id
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
             having o.id=#{id}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderDeleteById<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        delete from tb_order 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                id=#{id}
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderUpdateById<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        update tb_order 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> doorId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                door_id=#{doorId},
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> orderNo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                order_no=#{orderNo},
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> orderType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                order_type=#{orderType},
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> pnum<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                pnum=#{pnum},
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> cashier<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                cashier=#{cashier},
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> orderTime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                order_time=#{orderTime},
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> payType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                pay_type=#{payType},
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> payTime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                pay_time=#{payTime},
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> price<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                price=#{price},
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                id=#{id}
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderAdd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        insert into tb_order values(null,#{doorId},#{orderNo},#{orderType},
        #{pnum},#{cashier},#{orderTime},#{payTime},#{payType},#{price});
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="框架整合"><a href="#框架整合" class="headerlink" title="框架整合"></a>框架整合</h2><blockquote>
<p>个人理解整合spring和springmvc以及mybatis主要就是将mybatis的SqlSessionFactory的创建，springmvc的视图解析器internalResourceViewResolver交给spring来管理。并且要配置相关包注册扫描：</p>
</blockquote>
<ul>
<li><p>spring配置的头文件</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">default-lazy-init</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>
     <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
     <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>
     <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
     <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
     <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>
     <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>
     <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>
     <span class="token attr-name"><span class="token namespace">xmlns:</span>util</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/util<span class="token punctuation">"</span></span>
     <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>
     http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/mvc
     http://www.springframework.org/schema/mvc/spring-mvc.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx.xsd
     http://www.springframework.org/schema/aop
     http://www.springframework.org/schema/aop/spring-aop.xsd
     http://www.springframework.org/schema/util
     http://www.springframework.org/schema/util/spring-util.xsd
     http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>数据存储相关：<br>  1、包扫描配合@Repository注解（对dao的实现类要手动添加，MapperScannerConfigurer不会自动添加）<br>  2、mapper自动扫描器MapperScannerConfigurer<br>  3、SqlSessionFactory创建（依靠SqlSessionFactoryBean类）<br>  4、数据库线程池druid<br>  5、线程池相关配置property对象的引入</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">util:</span>properties</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cfg<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:db.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">util:</span>properties</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{cfg.jdbcDriver}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{cfg.jdbcUrl}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{cfg.jdbcUser}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{cfg.jdbcPassword}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath*:mapper/sys/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>daoScanner<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.db.sys.**.dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.db.sys.dao.Impl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>业务层相关：服务层包扫描配合@Service注解</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.db.sys.service<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>web访问相关：<br>  1、包扫描==》Controller类<br>  2、视图解析器InternalResourceViewResolver配置<br>  3、静态资源访问mvc:default-servlet-handler==》》tomcat默认配置原因，对html文件的转发问题，需要添加此配置。<br>  4、访问返回资源格式转发及mvc请求转发mvc:annotation-driven，会自动注册jackson格式转换，RequestMappingHandlerMapping以及RequestMappingHandlerAdapter便于DispatcherServlet前端控制器的资源转发。</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.db.sys.controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p><img src="/images/ssm/springmvcRunDiagram.png" alt="springmvc控制示意图"><br><img src="/images/ssm/allConfiguration.png" alt="spring配置总体流程"><br><strong>注意：</strong>框架总体来讲就是接口耦合，然后由spring来注入默认的实现类</p>
<ul>
<li>最后将配置导入一个总体的spring配置文件spring-config，由此文件将spring配置交给web.xml，由前端控制器来控制资源的配套使用。<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spring-web.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spring-service.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spring-reporitory.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解"></a>常见注解</h3><table>
<thead>
<tr>
<th>注解</th>
<th>作用</th>
<th>作用域</th>
</tr>
</thead>
<tbody><tr>
<td>@RequestMapping(String path)</td>
<td>注册@Controller类的handler类映射key</td>
<td>类——父路径，方法都会加上此path，方法</td>
</tr>
<tr>
<td>@PostMapping</td>
<td>注册Post方式的请求mapper映射key</td>
<td>方法</td>
</tr>
<tr>
<td>@GetMapping</td>
<td>注册get方式的请求key</td>
<td>方法</td>
</tr>
<tr>
<td>@ResponseBody</td>
<td>方法返回值作为服务返回值，不转发到视图解析器</td>
<td>方法</td>
</tr>
<tr>
<td>@ResController</td>
<td>@Controller+@ResponseBody结合，类下所有方法都不转发到视图解析器，方法返回值作为结果</td>
<td>类</td>
</tr>
<tr>
<td>@Qualifier(Sting beanKey)</td>
<td>与@Autowired结合使用，指定同一个接口多个实现类的情况下，具体注入的实体类</td>
<td>类、方法、成员变量</td>
</tr>
<tr>
<td>@RequestParam(String ParamName)</td>
<td>自动解析请求带的同名参数至对应类型的方法形参上</td>
<td>方法形参</td>
</tr>
<tr>
<td>@ControllerAdvice</td>
<td>处理整个Controller类上的异常（理解为拦截器？），配合@ExceptionHandler使用</td>
<td>类</td>
</tr>
<tr>
<td>@ExceptiontionHandler(Class<Exception> cls)</td>
<td>统一处理某种类型的异常（根据cls来）</td>
<td>方法</td>
</tr>
<tr>
<td>@Param(String mapkey)</td>
<td>将此形参的值封装至mapkey为key的参数map中</td>
<td>方法形参前</td>
</tr>
</tbody></table>
</li>
</ul>
<p><strong>总结：</strong><br>1、框架接口耦合，spring自动DI实现类<br>2、业务层接口自定义，可调用多个dao接口实现业务<br>3、定义业务实体类，封装业务查询到的结果<br>4、定义返回值实体类，封装查询业务值（包含状态码，massage，数据等信息）<br>5、定义Contoller类的全局异常处理类，统一处理异常<br>6、根据业务自定义异常，便于捕获自定义特殊异常</p>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="报错找不到bean"><a href="#报错找不到bean" class="headerlink" title="报错找不到bean"></a>报错找不到bean</h3><blockquote>
<p>1、可能是注册的类名与获取的不一致<br>  2、可能是做接口依赖，实现DI时注入的实现类不是申明的实现类===》没有继承声明类。</p>
</blockquote>
<h3 id="mybatis报没有getter错误"><a href="#mybatis报没有getter错误" class="headerlink" title="mybatis报没有getter错误"></a>mybatis报没有getter错误</h3><blockquote>
<p>检查对应实体类entity中的属性名称是否和xml配置文件的列名称相同</p>
</blockquote>
<h3 id="mybatis报Parameter过多。"><a href="#mybatis报Parameter过多。" class="headerlink" title="mybatis报Parameter过多。"></a>mybatis报Parameter过多。</h3><blockquote>
<p>Parameter index out of range (11 &gt; number of parameters, which is 10).===》》》检查xml的sql语句中是否有注释，去掉即可。</p>
</blockquote>
<h3 id="对象的getter、setter"><a href="#对象的getter、setter" class="headerlink" title="对象的getter、setter"></a>对象的getter、setter</h3><p>序列化对象和json转换时，需要用到getter、setter，因此需要提前设定好，不能为空。</p>
<h3 id="dao和xml文件"><a href="#dao和xml文件" class="headerlink" title="dao和xml文件"></a>dao和xml文件</h3><blockquote>
<p>mapper.xml文件的名称和dao接口名称可以不一致，（要根据xml的namespace来），但是获取bean对象必须的名称首字母要小写===》》设定的mapperScannerConfigurer自动将首字母小写注册成管理的bean对象。</p>
</blockquote>
<h3 id="单个参数提示没有getter-setter"><a href="#单个参数提示没有getter-setter" class="headerlink" title="单个参数提示没有getter/setter"></a>单个参数提示没有getter/setter</h3><blockquote>
<p>添加@Param(参数名称)</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Order <span class="token function">orderFindById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> Integer <span class="token function">orderDeleteById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="sql的下划线变量名和java的驼峰"><a href="#sql的下划线变量名和java的驼峰" class="headerlink" title="sql的下划线变量名和java的驼峰"></a>sql的下划线变量名和java的驼峰</h3><blockquote>
<p>修改对应mapper:读取和存储使用别名取值。</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 读取 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cols<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>o.id,door_id doorId,order_no orderNo,order_type orderType,pnum,cashier,order_time orderTime,pay_time payTime,pay_type payType,price<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderFindById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Order<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cols<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> from tb_order o left join tb_door d on o.door_id=d.id
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            having o.id=#{id}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 存贮 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderUpdateById<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    update tb_order 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> doorId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            door_id=#{doorId},
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> orderNo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            order_no=#{orderNo},
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> orderType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            order_type=#{orderType},
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> pnum<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            pnum=#{pnum},
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> cashier<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            cashier=#{cashier},
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> orderTime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            order_time=#{orderTime},
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> payType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            pay_type=#{payType},
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> payTime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            pay_time=#{payTime},
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> price<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            price=#{price},
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null !<span class="token punctuation">=</span> id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            id=#{id}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="通用（默认）路径设置"><a href="#通用（默认）路径设置" class="headerlink" title="通用（默认）路径设置"></a>通用（默认）路径设置</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"{page}"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">page</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String page<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> page<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="sql错误access-denied-for-user-‘root’-’localhost’"><a href="#sql错误access-denied-for-user-‘root’-’localhost’" class="headerlink" title="sql错误access denied for user ‘root’@’localhost’"></a>sql错误access denied for user ‘root’@’localhost’</h3><blockquote>
<p>多半是数据库的连接时用户名或密码错误，检查jdbc的配置文件中<strong>username、password关键词</strong>，修改名称即可</p>
</blockquote>
<h3 id="no-such-bean-inXXX，not-Availa。。。"><a href="#no-such-bean-inXXX，not-Availa。。。" class="headerlink" title="no such bean inXXX，not Availa。。。"></a>no such bean inXXX，not Availa。。。</h3><blockquote>
<p>检查名称是否注册正确（第一个字母小写），检查是否配置了扫描该包。</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>SSM框架整合</tag>
      </tags>
  </entry>
  <entry>
    <title>bom和dom</title>
    <url>/2021/08/09/bom-he-dom/</url>
    <content><![CDATA[<h3 id="bom和dom对象"><a href="#bom和dom对象" class="headerlink" title="bom和dom对象"></a>bom和dom对象</h3><p><img src="/images/html/bomAndDomArea.png" alt="图中1234都是bom区，5是dom区"><br>区别：BOM是浏览器提供的对象（所以实现不同，ie），通常包含页面上可视范围的：滚动条、右键菜单、底部状态栏、顶部的收藏夹、地址栏等固定部分，而DOM是文档对象，均要实现W3C的标准。</p>
<p><img src="/images/html/bomAndDom.png" alt="bom和dom对象的联系"></p>
<p>联系：BOM通常包含DOM，例如可以使用window.document来访问DOM的根节点document对象。</p>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>bom,dom</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3入门</title>
    <url>/2021/08/14/vue3-ru-men/</url>
    <content><![CDATA[<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>相近文档☞<a href="https://24kcs.github.io/vue3_study/chapter3/01_%E8%AE%A4%E8%AF%86Vue3.html#_1-%E4%BA%86%E8%A7%A3%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF">vue3&amp;ts入门文档详解</a></p>
<h3 id="关于setup"><a href="#关于setup" class="headerlink" title="关于setup"></a>关于setup</h3><h4 id="执行的时机"><a href="#执行的时机" class="headerlink" title="执行的时机"></a>执行的时机</h4><blockquote>
<p>在beforeCreate之前执行，此时组件还没有被创建，即<strong>setup中的this是undefined，不可使用this</strong></p>
</blockquote>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><ul>
<li>会将setup和data函数的返回值以及method对象中的数据合并，并覆盖掉同名属性。</li>
<li>不可以使用async修饰setup函数（async关键字修饰的方法返回promise对象）</li>
<li>模板中可以直接使用setup返回对象中的属性值</li>
</ul>
<h3 id="ref和reactive对比"><a href="#ref和reactive对比" class="headerlink" title="ref和reactive对比"></a>ref和reactive对比</h3><ul>
<li>同：ref和reactive都可以转换普通对象为proxy代理对象，</li>
<li>异：ref的转换的代理对象取值时，要以proxyObj.value的形式取值，ref也可以代理对象，内部自动调用reactive来实现转换。</li>
</ul>
<h3 id="watch-amp-amp-watchEffect"><a href="#watch-amp-amp-watchEffect" class="headerlink" title="watch&amp;&amp;watchEffect"></a>watch&amp;&amp;watchEffect</h3><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><ul>
<li>getter&amp;setter</li>
</ul>
<h3 id="toRefs-amp-toRef"><a href="#toRefs-amp-toRef" class="headerlink" title="toRefs&amp;toRef"></a>toRefs&amp;toRef</h3><h3 id="toRaw-amp-amp-markRaw"><a href="#toRaw-amp-amp-markRaw" class="headerlink" title="toRaw&amp;&amp;markRaw"></a>toRaw&amp;&amp;markRaw</h3><ul>
<li>toRaw：临时返回proxy代理的普通对象，临时读取，写入不会同步更新到页面，操作不会被同步到</li>
<li>markRaw：标记一个对象，使其永远不会转换为代理。返回对象本身。</li>
</ul>
<h3 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h3><blockquote>
<p>自定义ref代理操作：customRef(callback: (track: () =&gt; void, trigger: () =&gt; void) =&gt; {get: () =&gt; any}, set: () =&gt; void) =&gt; any</p>
</blockquote>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h3 id="readonly-amp-shallowReadonly"><a href="#readonly-amp-shallowReadonly" class="headerlink" title="readonly&amp;shallowReadonly"></a>readonly&amp;shallowReadonly</h3><h3 id="provide-amp-amp-inject"><a href="#provide-amp-amp-inject" class="headerlink" title="provide&amp;&amp;inject"></a>provide&amp;&amp;inject</h3><h3 id="isProxy-amp-amp-isRef-amp-amp-isReactive"><a href="#isProxy-amp-amp-isRef-amp-amp-isReactive" class="headerlink" title="isProxy&amp;&amp;isRef&amp;&amp;isReactive"></a>isProxy&amp;&amp;isRef&amp;&amp;isReactive</h3>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue3入门</tag>
      </tags>
  </entry>
  <entry>
    <title>topfullstack</title>
    <url>/2021/08/29/topfullstack/</url>
    <content><![CDATA[<h3 id="nest常用命令"><a href="#nest常用命令" class="headerlink" title="nest常用命令"></a>nest常用命令</h3><ul>
<li><p>nest g app []</p>
</li>
<li><p>nest g lib [db]</p>
</li>
<li><p>nest start -w subAppName</p>
</li>
<li><p>yarn upgrade-interactive 升级依赖</p>
</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>fullstack</tag>
      </tags>
  </entry>
</search>
